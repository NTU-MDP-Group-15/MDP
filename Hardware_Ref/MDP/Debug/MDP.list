
MDP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006884  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bd8  08006a14  08006a14  00016a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075ec  080075ec  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080075ec  080075ec  000175ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080075f4  080075f4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075f4  080075f4  000175f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075f8  080075f8  000175f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080075fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004568  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200045dc  200045dc  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001362b  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cfa  00000000  00000000  000336cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001250  00000000  00000000  000363d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001128  00000000  00000000  00037620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022ceb  00000000  00000000  00038748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014559  00000000  00000000  0005b433  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d357c  00000000  00000000  0006f98c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00142f08  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004fe8  00000000  00000000  00142f58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080069fc 	.word	0x080069fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080069fc 	.word	0x080069fc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000574:	b480      	push	{r7}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
 800057a:	60f8      	str	r0, [r7, #12]
 800057c:	60b9      	str	r1, [r7, #8]
 800057e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	4a07      	ldr	r2, [pc, #28]	; (80005a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000584:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000586:	68bb      	ldr	r3, [r7, #8]
 8000588:	4a06      	ldr	r2, [pc, #24]	; (80005a4 <vApplicationGetIdleTaskMemory+0x30>)
 800058a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	2280      	movs	r2, #128	; 0x80
 8000590:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000592:	bf00      	nop
 8000594:	3714      	adds	r7, #20
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	20000090 	.word	0x20000090
 80005a4:	200000e4 	.word	0x200000e4

080005a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a8:	b5b0      	push	{r4, r5, r7, lr}
 80005aa:	b0a4      	sub	sp, #144	; 0x90
 80005ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ae:	f001 fa09 	bl	80019c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b2:	f000 f88b 	bl	80006cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b6:	f000 fb03 	bl	8000bc0 <MX_GPIO_Init>
  MX_TIM8_Init();
 80005ba:	f000 fa2b 	bl	8000a14 <MX_TIM8_Init>
  MX_TIM2_Init();
 80005be:	f000 f981 	bl	80008c4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80005c2:	f000 f9d3 	bl	800096c <MX_TIM3_Init>
  MX_TIM1_Init();
 80005c6:	f000 f8df 	bl	8000788 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 80005ca:	f000 facf 	bl	8000b6c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 80005ce:	f000 ff1d 	bl	800140c <OLED_Init>
  HAL_UART_Receive_IT(&huart3, (uint8_t *) aRxBuffer, 10); // receive an amount of data in non blocking mode
 80005d2:	220a      	movs	r2, #10
 80005d4:	4931      	ldr	r1, [pc, #196]	; (800069c <main+0xf4>)
 80005d6:	4832      	ldr	r0, [pc, #200]	; (80006a0 <main+0xf8>)
 80005d8:	f003 fb69 	bl	8003cae <HAL_UART_Receive_IT>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005dc:	4b31      	ldr	r3, [pc, #196]	; (80006a4 <main+0xfc>)
 80005de:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80005e2:	461d      	mov	r5, r3
 80005e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005f0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f004 fb11 	bl	8004c1e <osThreadCreate>
 80005fc:	4603      	mov	r3, r0
 80005fe:	4a2a      	ldr	r2, [pc, #168]	; (80006a8 <main+0x100>)
 8000600:	6013      	str	r3, [r2, #0]

  /* definition and creation of ShowTask */
  osThreadDef(ShowTask, show, osPriorityNormal, 0, 128);
 8000602:	4b2a      	ldr	r3, [pc, #168]	; (80006ac <main+0x104>)
 8000604:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000608:	461d      	mov	r5, r3
 800060a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800060c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800060e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000612:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ShowTaskHandle = osThreadCreate(osThread(ShowTask), NULL);
 8000616:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800061a:	2100      	movs	r1, #0
 800061c:	4618      	mov	r0, r3
 800061e:	f004 fafe 	bl	8004c1e <osThreadCreate>
 8000622:	4603      	mov	r3, r0
 8000624:	4a22      	ldr	r2, [pc, #136]	; (80006b0 <main+0x108>)
 8000626:	6013      	str	r3, [r2, #0]

  /* definition and creation of MotorTask */
  osThreadDef(MotorTask, motor, osPriorityHigh, 0, 128);
 8000628:	4b22      	ldr	r3, [pc, #136]	; (80006b4 <main+0x10c>)
 800062a:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800062e:	461d      	mov	r5, r3
 8000630:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000632:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000634:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000638:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MotorTaskHandle = osThreadCreate(osThread(MotorTask), NULL);
 800063c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f004 faeb 	bl	8004c1e <osThreadCreate>
 8000648:	4603      	mov	r3, r0
 800064a:	4a1b      	ldr	r2, [pc, #108]	; (80006b8 <main+0x110>)
 800064c:	6013      	str	r3, [r2, #0]

  /* definition and creation of EncoderATask */
  osThreadDef(EncoderATask, encoderMotorA, osPriorityNormal, 0, 128);
 800064e:	4b1b      	ldr	r3, [pc, #108]	; (80006bc <main+0x114>)
 8000650:	f107 0420 	add.w	r4, r7, #32
 8000654:	461d      	mov	r5, r3
 8000656:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000658:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800065a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800065e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  EncoderATaskHandle = osThreadCreate(osThread(EncoderATask), NULL);
 8000662:	f107 0320 	add.w	r3, r7, #32
 8000666:	2100      	movs	r1, #0
 8000668:	4618      	mov	r0, r3
 800066a:	f004 fad8 	bl	8004c1e <osThreadCreate>
 800066e:	4603      	mov	r3, r0
 8000670:	4a13      	ldr	r2, [pc, #76]	; (80006c0 <main+0x118>)
 8000672:	6013      	str	r3, [r2, #0]

  /* definition and creation of EncoderBTask */
  osThreadDef(EncoderBTask, encoderMotorB, osPriorityNormal, 0, 128);
 8000674:	4b13      	ldr	r3, [pc, #76]	; (80006c4 <main+0x11c>)
 8000676:	1d3c      	adds	r4, r7, #4
 8000678:	461d      	mov	r5, r3
 800067a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800067c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800067e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000682:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  EncoderBTaskHandle = osThreadCreate(osThread(EncoderBTask), NULL);
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f004 fac7 	bl	8004c1e <osThreadCreate>
 8000690:	4603      	mov	r3, r0
 8000692:	4a0d      	ldr	r2, [pc, #52]	; (80006c8 <main+0x120>)
 8000694:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000696:	f004 fabb 	bl	8004c10 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800069a:	e7fe      	b.n	800069a <main+0xf2>
 800069c:	2000045c 	.word	0x2000045c
 80006a0:	20000404 	.word	0x20000404
 80006a4:	08006a58 	.word	0x08006a58
 80006a8:	20000448 	.word	0x20000448
 80006ac:	08006a74 	.word	0x08006a74
 80006b0:	2000044c 	.word	0x2000044c
 80006b4:	08006a90 	.word	0x08006a90
 80006b8:	20000450 	.word	0x20000450
 80006bc:	08006aac 	.word	0x08006aac
 80006c0:	20000454 	.word	0x20000454
 80006c4:	08006ac8 	.word	0x08006ac8
 80006c8:	20000458 	.word	0x20000458

080006cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b094      	sub	sp, #80	; 0x50
 80006d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d2:	f107 0320 	add.w	r3, r7, #32
 80006d6:	2230      	movs	r2, #48	; 0x30
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f005 fd26 	bl	800612c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e0:	f107 030c 	add.w	r3, r7, #12
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f0:	2300      	movs	r3, #0
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	4b22      	ldr	r3, [pc, #136]	; (8000780 <SystemClock_Config+0xb4>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f8:	4a21      	ldr	r2, [pc, #132]	; (8000780 <SystemClock_Config+0xb4>)
 80006fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000700:	4b1f      	ldr	r3, [pc, #124]	; (8000780 <SystemClock_Config+0xb4>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000708:	60bb      	str	r3, [r7, #8]
 800070a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800070c:	2300      	movs	r3, #0
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <SystemClock_Config+0xb8>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a1b      	ldr	r2, [pc, #108]	; (8000784 <SystemClock_Config+0xb8>)
 8000716:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800071a:	6013      	str	r3, [r2, #0]
 800071c:	4b19      	ldr	r3, [pc, #100]	; (8000784 <SystemClock_Config+0xb8>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000728:	2302      	movs	r3, #2
 800072a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800072c:	2301      	movs	r3, #1
 800072e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000730:	2310      	movs	r3, #16
 8000732:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000734:	2300      	movs	r3, #0
 8000736:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000738:	f107 0320 	add.w	r3, r7, #32
 800073c:	4618      	mov	r0, r3
 800073e:	f001 fd73 	bl	8002228 <HAL_RCC_OscConfig>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000748:	f000 fcb4 	bl	80010b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074c:	230f      	movs	r3, #15
 800074e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000750:	2300      	movs	r3, #0
 8000752:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000754:	2300      	movs	r3, #0
 8000756:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000758:	2300      	movs	r3, #0
 800075a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800075c:	2300      	movs	r3, #0
 800075e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000760:	f107 030c 	add.w	r3, r7, #12
 8000764:	2100      	movs	r1, #0
 8000766:	4618      	mov	r0, r3
 8000768:	f001 ffd6 	bl	8002718 <HAL_RCC_ClockConfig>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000772:	f000 fc9f 	bl	80010b4 <Error_Handler>
  }
}
 8000776:	bf00      	nop
 8000778:	3750      	adds	r7, #80	; 0x50
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40023800 	.word	0x40023800
 8000784:	40007000 	.word	0x40007000

08000788 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b096      	sub	sp, #88	; 0x58
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800078e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800079c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
 80007b4:	611a      	str	r2, [r3, #16]
 80007b6:	615a      	str	r2, [r3, #20]
 80007b8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	2220      	movs	r2, #32
 80007be:	2100      	movs	r1, #0
 80007c0:	4618      	mov	r0, r3
 80007c2:	f005 fcb3 	bl	800612c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007c6:	4b3d      	ldr	r3, [pc, #244]	; (80008bc <MX_TIM1_Init+0x134>)
 80007c8:	4a3d      	ldr	r2, [pc, #244]	; (80008c0 <MX_TIM1_Init+0x138>)
 80007ca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 80007cc:	4b3b      	ldr	r3, [pc, #236]	; (80008bc <MX_TIM1_Init+0x134>)
 80007ce:	22a0      	movs	r2, #160	; 0xa0
 80007d0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d2:	4b3a      	ldr	r3, [pc, #232]	; (80008bc <MX_TIM1_Init+0x134>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80007d8:	4b38      	ldr	r3, [pc, #224]	; (80008bc <MX_TIM1_Init+0x134>)
 80007da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007de:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e0:	4b36      	ldr	r3, [pc, #216]	; (80008bc <MX_TIM1_Init+0x134>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007e6:	4b35      	ldr	r3, [pc, #212]	; (80008bc <MX_TIM1_Init+0x134>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007ec:	4b33      	ldr	r3, [pc, #204]	; (80008bc <MX_TIM1_Init+0x134>)
 80007ee:	2280      	movs	r2, #128	; 0x80
 80007f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007f2:	4832      	ldr	r0, [pc, #200]	; (80008bc <MX_TIM1_Init+0x134>)
 80007f4:	f002 f970 	bl	8002ad8 <HAL_TIM_Base_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80007fe:	f000 fc59 	bl	80010b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000802:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000806:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000808:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800080c:	4619      	mov	r1, r3
 800080e:	482b      	ldr	r0, [pc, #172]	; (80008bc <MX_TIM1_Init+0x134>)
 8000810:	f002 fcc8 	bl	80031a4 <HAL_TIM_ConfigClockSource>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800081a:	f000 fc4b 	bl	80010b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800081e:	4827      	ldr	r0, [pc, #156]	; (80008bc <MX_TIM1_Init+0x134>)
 8000820:	f002 f9a9 	bl	8002b76 <HAL_TIM_PWM_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800082a:	f000 fc43 	bl	80010b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800082e:	2300      	movs	r3, #0
 8000830:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000832:	2300      	movs	r3, #0
 8000834:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000836:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800083a:	4619      	mov	r1, r3
 800083c:	481f      	ldr	r0, [pc, #124]	; (80008bc <MX_TIM1_Init+0x134>)
 800083e:	f003 f889 	bl	8003954 <HAL_TIMEx_MasterConfigSynchronization>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000848:	f000 fc34 	bl	80010b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800084c:	2360      	movs	r3, #96	; 0x60
 800084e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000850:	2300      	movs	r3, #0
 8000852:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000854:	2300      	movs	r3, #0
 8000856:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000858:	2300      	movs	r3, #0
 800085a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800085c:	2300      	movs	r3, #0
 800085e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000860:	2300      	movs	r3, #0
 8000862:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000864:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000868:	220c      	movs	r2, #12
 800086a:	4619      	mov	r1, r3
 800086c:	4813      	ldr	r0, [pc, #76]	; (80008bc <MX_TIM1_Init+0x134>)
 800086e:	f002 fbd7 	bl	8003020 <HAL_TIM_PWM_ConfigChannel>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8000878:	f000 fc1c 	bl	80010b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800087c:	2300      	movs	r3, #0
 800087e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000880:	2300      	movs	r3, #0
 8000882:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000884:	2300      	movs	r3, #0
 8000886:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000888:	2300      	movs	r3, #0
 800088a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800088c:	2300      	movs	r3, #0
 800088e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000890:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000894:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000896:	2300      	movs	r3, #0
 8000898:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800089a:	1d3b      	adds	r3, r7, #4
 800089c:	4619      	mov	r1, r3
 800089e:	4807      	ldr	r0, [pc, #28]	; (80008bc <MX_TIM1_Init+0x134>)
 80008a0:	f003 f8d4 	bl	8003a4c <HAL_TIMEx_ConfigBreakDeadTime>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80008aa:	f000 fc03 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008ae:	4803      	ldr	r0, [pc, #12]	; (80008bc <MX_TIM1_Init+0x134>)
 80008b0:	f000 ff36 	bl	8001720 <HAL_TIM_MspPostInit>

}
 80008b4:	bf00      	nop
 80008b6:	3758      	adds	r7, #88	; 0x58
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	200002e4 	.word	0x200002e4
 80008c0:	40010000 	.word	0x40010000

080008c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08c      	sub	sp, #48	; 0x30
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80008ca:	f107 030c 	add.w	r3, r7, #12
 80008ce:	2224      	movs	r2, #36	; 0x24
 80008d0:	2100      	movs	r1, #0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f005 fc2a 	bl	800612c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008e0:	4b21      	ldr	r3, [pc, #132]	; (8000968 <MX_TIM2_Init+0xa4>)
 80008e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80008e8:	4b1f      	ldr	r3, [pc, #124]	; (8000968 <MX_TIM2_Init+0xa4>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ee:	4b1e      	ldr	r3, [pc, #120]	; (8000968 <MX_TIM2_Init+0xa4>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80008f4:	4b1c      	ldr	r3, [pc, #112]	; (8000968 <MX_TIM2_Init+0xa4>)
 80008f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008fc:	4b1a      	ldr	r3, [pc, #104]	; (8000968 <MX_TIM2_Init+0xa4>)
 80008fe:	2200      	movs	r2, #0
 8000900:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000902:	4b19      	ldr	r3, [pc, #100]	; (8000968 <MX_TIM2_Init+0xa4>)
 8000904:	2200      	movs	r2, #0
 8000906:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000908:	2303      	movs	r3, #3
 800090a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800090c:	2300      	movs	r3, #0
 800090e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000910:	2301      	movs	r3, #1
 8000912:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000914:	2300      	movs	r3, #0
 8000916:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000918:	230a      	movs	r3, #10
 800091a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800091c:	2300      	movs	r3, #0
 800091e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000920:	2301      	movs	r3, #1
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000924:	2300      	movs	r3, #0
 8000926:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8000928:	230a      	movs	r3, #10
 800092a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800092c:	f107 030c 	add.w	r3, r7, #12
 8000930:	4619      	mov	r1, r3
 8000932:	480d      	ldr	r0, [pc, #52]	; (8000968 <MX_TIM2_Init+0xa4>)
 8000934:	f002 fa40 	bl	8002db8 <HAL_TIM_Encoder_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800093e:	f000 fbb9 	bl	80010b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000942:	2300      	movs	r3, #0
 8000944:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000946:	2300      	movs	r3, #0
 8000948:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	4619      	mov	r1, r3
 800094e:	4806      	ldr	r0, [pc, #24]	; (8000968 <MX_TIM2_Init+0xa4>)
 8000950:	f003 f800 	bl	8003954 <HAL_TIMEx_MasterConfigSynchronization>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800095a:	f000 fbab 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800095e:	bf00      	nop
 8000960:	3730      	adds	r7, #48	; 0x30
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	2000032c 	.word	0x2000032c

0800096c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08c      	sub	sp, #48	; 0x30
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000972:	f107 030c 	add.w	r3, r7, #12
 8000976:	2224      	movs	r2, #36	; 0x24
 8000978:	2100      	movs	r1, #0
 800097a:	4618      	mov	r0, r3
 800097c:	f005 fbd6 	bl	800612c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000980:	1d3b      	adds	r3, r7, #4
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000988:	4b20      	ldr	r3, [pc, #128]	; (8000a0c <MX_TIM3_Init+0xa0>)
 800098a:	4a21      	ldr	r2, [pc, #132]	; (8000a10 <MX_TIM3_Init+0xa4>)
 800098c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800098e:	4b1f      	ldr	r3, [pc, #124]	; (8000a0c <MX_TIM3_Init+0xa0>)
 8000990:	2200      	movs	r2, #0
 8000992:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000994:	4b1d      	ldr	r3, [pc, #116]	; (8000a0c <MX_TIM3_Init+0xa0>)
 8000996:	2200      	movs	r2, #0
 8000998:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800099a:	4b1c      	ldr	r3, [pc, #112]	; (8000a0c <MX_TIM3_Init+0xa0>)
 800099c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009a0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009a2:	4b1a      	ldr	r3, [pc, #104]	; (8000a0c <MX_TIM3_Init+0xa0>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009a8:	4b18      	ldr	r3, [pc, #96]	; (8000a0c <MX_TIM3_Init+0xa0>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80009ae:	2303      	movs	r3, #3
 80009b0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80009b2:	2300      	movs	r3, #0
 80009b4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80009b6:	2301      	movs	r3, #1
 80009b8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80009be:	2300      	movs	r3, #0
 80009c0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80009c2:	2300      	movs	r3, #0
 80009c4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80009c6:	2301      	movs	r3, #1
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80009ca:	2300      	movs	r3, #0
 80009cc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80009d2:	f107 030c 	add.w	r3, r7, #12
 80009d6:	4619      	mov	r1, r3
 80009d8:	480c      	ldr	r0, [pc, #48]	; (8000a0c <MX_TIM3_Init+0xa0>)
 80009da:	f002 f9ed 	bl	8002db8 <HAL_TIM_Encoder_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80009e4:	f000 fb66 	bl	80010b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009e8:	2300      	movs	r3, #0
 80009ea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ec:	2300      	movs	r3, #0
 80009ee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009f0:	1d3b      	adds	r3, r7, #4
 80009f2:	4619      	mov	r1, r3
 80009f4:	4805      	ldr	r0, [pc, #20]	; (8000a0c <MX_TIM3_Init+0xa0>)
 80009f6:	f002 ffad 	bl	8003954 <HAL_TIMEx_MasterConfigSynchronization>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000a00:	f000 fb58 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a04:	bf00      	nop
 8000a06:	3730      	adds	r7, #48	; 0x30
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	20000374 	.word	0x20000374
 8000a10:	40000400 	.word	0x40000400

08000a14 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b096      	sub	sp, #88	; 0x58
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a1a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]
 8000a26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a28:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	605a      	str	r2, [r3, #4]
 8000a3c:	609a      	str	r2, [r3, #8]
 8000a3e:	60da      	str	r2, [r3, #12]
 8000a40:	611a      	str	r2, [r3, #16]
 8000a42:	615a      	str	r2, [r3, #20]
 8000a44:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a46:	1d3b      	adds	r3, r7, #4
 8000a48:	2220      	movs	r2, #32
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f005 fb6d 	bl	800612c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000a52:	4b44      	ldr	r3, [pc, #272]	; (8000b64 <MX_TIM8_Init+0x150>)
 8000a54:	4a44      	ldr	r2, [pc, #272]	; (8000b68 <MX_TIM8_Init+0x154>)
 8000a56:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000a58:	4b42      	ldr	r3, [pc, #264]	; (8000b64 <MX_TIM8_Init+0x150>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a5e:	4b41      	ldr	r3, [pc, #260]	; (8000b64 <MX_TIM8_Init+0x150>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8000a64:	4b3f      	ldr	r3, [pc, #252]	; (8000b64 <MX_TIM8_Init+0x150>)
 8000a66:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000a6a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a6c:	4b3d      	ldr	r3, [pc, #244]	; (8000b64 <MX_TIM8_Init+0x150>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000a72:	4b3c      	ldr	r3, [pc, #240]	; (8000b64 <MX_TIM8_Init+0x150>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a78:	4b3a      	ldr	r3, [pc, #232]	; (8000b64 <MX_TIM8_Init+0x150>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000a7e:	4839      	ldr	r0, [pc, #228]	; (8000b64 <MX_TIM8_Init+0x150>)
 8000a80:	f002 f82a 	bl	8002ad8 <HAL_TIM_Base_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8000a8a:	f000 fb13 	bl	80010b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a92:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000a94:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4832      	ldr	r0, [pc, #200]	; (8000b64 <MX_TIM8_Init+0x150>)
 8000a9c:	f002 fb82 	bl	80031a4 <HAL_TIM_ConfigClockSource>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8000aa6:	f000 fb05 	bl	80010b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000aaa:	482e      	ldr	r0, [pc, #184]	; (8000b64 <MX_TIM8_Init+0x150>)
 8000aac:	f002 f863 	bl	8002b76 <HAL_TIM_PWM_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8000ab6:	f000 fafd 	bl	80010b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aba:	2300      	movs	r3, #0
 8000abc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000ac2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4826      	ldr	r0, [pc, #152]	; (8000b64 <MX_TIM8_Init+0x150>)
 8000aca:	f002 ff43 	bl	8003954 <HAL_TIMEx_MasterConfigSynchronization>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000ad4:	f000 faee 	bl	80010b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ad8:	2360      	movs	r3, #96	; 0x60
 8000ada:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000aec:	2300      	movs	r3, #0
 8000aee:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000af0:	2300      	movs	r3, #0
 8000af2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000af4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af8:	2200      	movs	r2, #0
 8000afa:	4619      	mov	r1, r3
 8000afc:	4819      	ldr	r0, [pc, #100]	; (8000b64 <MX_TIM8_Init+0x150>)
 8000afe:	f002 fa8f 	bl	8003020 <HAL_TIM_PWM_ConfigChannel>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8000b08:	f000 fad4 	bl	80010b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b10:	2204      	movs	r2, #4
 8000b12:	4619      	mov	r1, r3
 8000b14:	4813      	ldr	r0, [pc, #76]	; (8000b64 <MX_TIM8_Init+0x150>)
 8000b16:	f002 fa83 	bl	8003020 <HAL_TIM_PWM_ConfigChannel>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8000b20:	f000 fac8 	bl	80010b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b24:	2300      	movs	r3, #0
 8000b26:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b3c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000b42:	1d3b      	adds	r3, r7, #4
 8000b44:	4619      	mov	r1, r3
 8000b46:	4807      	ldr	r0, [pc, #28]	; (8000b64 <MX_TIM8_Init+0x150>)
 8000b48:	f002 ff80 	bl	8003a4c <HAL_TIMEx_ConfigBreakDeadTime>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8000b52:	f000 faaf 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000b56:	4803      	ldr	r0, [pc, #12]	; (8000b64 <MX_TIM8_Init+0x150>)
 8000b58:	f000 fde2 	bl	8001720 <HAL_TIM_MspPostInit>

}
 8000b5c:	bf00      	nop
 8000b5e:	3758      	adds	r7, #88	; 0x58
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	200003bc 	.word	0x200003bc
 8000b68:	40010400 	.word	0x40010400

08000b6c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b70:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <MX_USART3_UART_Init+0x4c>)
 8000b72:	4a12      	ldr	r2, [pc, #72]	; (8000bbc <MX_USART3_UART_Init+0x50>)
 8000b74:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b76:	4b10      	ldr	r3, [pc, #64]	; (8000bb8 <MX_USART3_UART_Init+0x4c>)
 8000b78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b7c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <MX_USART3_UART_Init+0x4c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b84:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <MX_USART3_UART_Init+0x4c>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b8a:	4b0b      	ldr	r3, [pc, #44]	; (8000bb8 <MX_USART3_UART_Init+0x4c>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b90:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <MX_USART3_UART_Init+0x4c>)
 8000b92:	220c      	movs	r2, #12
 8000b94:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b96:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <MX_USART3_UART_Init+0x4c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <MX_USART3_UART_Init+0x4c>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ba2:	4805      	ldr	r0, [pc, #20]	; (8000bb8 <MX_USART3_UART_Init+0x4c>)
 8000ba4:	f002 ffa4 	bl	8003af0 <HAL_UART_Init>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000bae:	f000 fa81 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000404 	.word	0x20000404
 8000bbc:	40004800 	.word	0x40004800

08000bc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08a      	sub	sp, #40	; 0x28
 8000bc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc6:	f107 0314 	add.w	r3, r7, #20
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]
 8000bd0:	609a      	str	r2, [r3, #8]
 8000bd2:	60da      	str	r2, [r3, #12]
 8000bd4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	613b      	str	r3, [r7, #16]
 8000bda:	4b31      	ldr	r3, [pc, #196]	; (8000ca0 <MX_GPIO_Init+0xe0>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	4a30      	ldr	r2, [pc, #192]	; (8000ca0 <MX_GPIO_Init+0xe0>)
 8000be0:	f043 0310 	orr.w	r3, r3, #16
 8000be4:	6313      	str	r3, [r2, #48]	; 0x30
 8000be6:	4b2e      	ldr	r3, [pc, #184]	; (8000ca0 <MX_GPIO_Init+0xe0>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	f003 0310 	and.w	r3, r3, #16
 8000bee:	613b      	str	r3, [r7, #16]
 8000bf0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	4b2a      	ldr	r3, [pc, #168]	; (8000ca0 <MX_GPIO_Init+0xe0>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	4a29      	ldr	r2, [pc, #164]	; (8000ca0 <MX_GPIO_Init+0xe0>)
 8000bfc:	f043 0301 	orr.w	r3, r3, #1
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
 8000c02:	4b27      	ldr	r3, [pc, #156]	; (8000ca0 <MX_GPIO_Init+0xe0>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60bb      	str	r3, [r7, #8]
 8000c12:	4b23      	ldr	r3, [pc, #140]	; (8000ca0 <MX_GPIO_Init+0xe0>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	4a22      	ldr	r2, [pc, #136]	; (8000ca0 <MX_GPIO_Init+0xe0>)
 8000c18:	f043 0304 	orr.w	r3, r3, #4
 8000c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1e:	4b20      	ldr	r3, [pc, #128]	; (8000ca0 <MX_GPIO_Init+0xe0>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	f003 0304 	and.w	r3, r3, #4
 8000c26:	60bb      	str	r3, [r7, #8]
 8000c28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	607b      	str	r3, [r7, #4]
 8000c2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ca0 <MX_GPIO_Init+0xe0>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a1b      	ldr	r2, [pc, #108]	; (8000ca0 <MX_GPIO_Init+0xe0>)
 8000c34:	f043 0302 	orr.w	r3, r3, #2
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b19      	ldr	r3, [pc, #100]	; (8000ca0 <MX_GPIO_Init+0xe0>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0302 	and.w	r3, r3, #2
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCLK_Pin|OLED_SDIN_Pin|OLED_RESET__Pin|OLED_DC_Pin
 8000c46:	2200      	movs	r2, #0
 8000c48:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 8000c4c:	4815      	ldr	r0, [pc, #84]	; (8000ca4 <MX_GPIO_Init+0xe4>)
 8000c4e:	f001 fa8f 	bl	8002170 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 8000c52:	2200      	movs	r2, #0
 8000c54:	213c      	movs	r1, #60	; 0x3c
 8000c56:	4814      	ldr	r0, [pc, #80]	; (8000ca8 <MX_GPIO_Init+0xe8>)
 8000c58:	f001 fa8a 	bl	8002170 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCLK_Pin OLED_SDIN_Pin OLED_RESET__Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCLK_Pin|OLED_SDIN_Pin|OLED_RESET__Pin|OLED_DC_Pin
 8000c5c:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 8000c60:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c62:	2301      	movs	r3, #1
 8000c64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c6e:	f107 0314 	add.w	r3, r7, #20
 8000c72:	4619      	mov	r1, r3
 8000c74:	480b      	ldr	r0, [pc, #44]	; (8000ca4 <MX_GPIO_Init+0xe4>)
 8000c76:	f001 f8df 	bl	8001e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 8000c7a:	233c      	movs	r3, #60	; 0x3c
 8000c7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c86:	2302      	movs	r3, #2
 8000c88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8a:	f107 0314 	add.w	r3, r7, #20
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4805      	ldr	r0, [pc, #20]	; (8000ca8 <MX_GPIO_Init+0xe8>)
 8000c92:	f001 f8d1 	bl	8001e38 <HAL_GPIO_Init>

}
 8000c96:	bf00      	nop
 8000c98:	3728      	adds	r7, #40	; 0x28
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40023800 	.word	0x40023800
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	40020000 	.word	0x40020000

08000cac <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) // interrupt callback function when receive message comes in
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
	// Prevent unused argument(s) compilation warning
	UNUSED(huart);

	HAL_UART_Transmit(&huart3, (uint8_t *) aRxBuffer, 10, 0xFFFF); // receive and put inside
 8000cb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cb8:	220a      	movs	r2, #10
 8000cba:	4904      	ldr	r1, [pc, #16]	; (8000ccc <HAL_UART_RxCpltCallback+0x20>)
 8000cbc:	4804      	ldr	r0, [pc, #16]	; (8000cd0 <HAL_UART_RxCpltCallback+0x24>)
 8000cbe:	f002 ff64 	bl	8003b8a <HAL_UART_Transmit>
}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	2000045c 	.word	0x2000045c
 8000cd0:	20000404 	.word	0x20000404

08000cd4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	uint8_t ch = 'A';
 8000cdc:	2341      	movs	r3, #65	; 0x41
 8000cde:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	HAL_UART_Transmit(&huart3, (uint8_t *) &ch, 1, 0xFFFF); // transmit 1 char every 5 second
 8000ce0:	f107 010f 	add.w	r1, r7, #15
 8000ce4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ce8:	2201      	movs	r2, #1
 8000cea:	480b      	ldr	r0, [pc, #44]	; (8000d18 <StartDefaultTask+0x44>)
 8000cec:	f002 ff4d 	bl	8003b8a <HAL_UART_Transmit>
	if(ch <'Z')
 8000cf0:	7bfb      	ldrb	r3, [r7, #15]
 8000cf2:	2b59      	cmp	r3, #89	; 0x59
 8000cf4:	d804      	bhi.n	8000d00 <StartDefaultTask+0x2c>
		ch++;
 8000cf6:	7bfb      	ldrb	r3, [r7, #15]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	73fb      	strb	r3, [r7, #15]
 8000cfe:	e001      	b.n	8000d04 <StartDefaultTask+0x30>
	else ch = 'A';
 8000d00:	2341      	movs	r3, #65	; 0x41
 8000d02:	73fb      	strb	r3, [r7, #15]

    HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8000d04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d08:	4804      	ldr	r0, [pc, #16]	; (8000d1c <StartDefaultTask+0x48>)
 8000d0a:	f001 fa4a 	bl	80021a2 <HAL_GPIO_TogglePin>
    osDelay(5000);
 8000d0e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000d12:	f003 ffd0 	bl	8004cb6 <osDelay>
	HAL_UART_Transmit(&huart3, (uint8_t *) &ch, 1, 0xFFFF); // transmit 1 char every 5 second
 8000d16:	e7e3      	b.n	8000ce0 <StartDefaultTask+0xc>
 8000d18:	20000404 	.word	0x20000404
 8000d1c:	40021000 	.word	0x40021000

08000d20 <show>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_show */
void show(void const * argument)
{
 8000d20:	b590      	push	{r4, r7, lr}
 8000d22:	b089      	sub	sp, #36	; 0x24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN show */
	uint8_t hello[20] = "Hello World!";
 8000d28:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <show+0x4c>)
 8000d2a:	f107 040c 	add.w	r4, r7, #12
 8000d2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d30:	c407      	stmia	r4!, {r0, r1, r2}
 8000d32:	7023      	strb	r3, [r4, #0]
 8000d34:	f107 0319 	add.w	r3, r7, #25
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	f8c3 2003 	str.w	r2, [r3, #3]

  /* Infinite loop */
  for(;;)
  {
	sprintf(hello, "%s\0", aRxBuffer); // to prevent incorrect display
 8000d40:	f107 030c 	add.w	r3, r7, #12
 8000d44:	4a0a      	ldr	r2, [pc, #40]	; (8000d70 <show+0x50>)
 8000d46:	490b      	ldr	r1, [pc, #44]	; (8000d74 <show+0x54>)
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f005 f9f7 	bl	800613c <siprintf>
	OLED_ShowString(10,10,hello);
 8000d4e:	f107 030c 	add.w	r3, r7, #12
 8000d52:	461a      	mov	r2, r3
 8000d54:	210a      	movs	r1, #10
 8000d56:	200a      	movs	r0, #10
 8000d58:	f000 fb26 	bl	80013a8 <OLED_ShowString>
	OLED_Refresh_Gram();
 8000d5c:	f000 f9b0 	bl	80010c0 <OLED_Refresh_Gram>
    osDelay(1000);
 8000d60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d64:	f003 ffa7 	bl	8004cb6 <osDelay>
  {
 8000d68:	e7ea      	b.n	8000d40 <show+0x20>
 8000d6a:	bf00      	nop
 8000d6c:	08006ae8 	.word	0x08006ae8
 8000d70:	2000045c 	.word	0x2000045c
 8000d74:	08006ae4 	.word	0x08006ae4

08000d78 <stopMotor>:
  }
  /* USER CODE END show */
}

void stopMotor(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 0);
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <stopMotor+0x20>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2200      	movs	r2, #0
 8000d82:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 0);
 8000d84:	4b04      	ldr	r3, [pc, #16]	; (8000d98 <stopMotor+0x20>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2200      	movs	r2, #0
 8000d8a:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	200003bc 	.word	0x200003bc

08000d9c <moveForward>:

void moveForward(void) //anti-clockwise
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);  // high
 8000da0:	2201      	movs	r2, #1
 8000da2:	2108      	movs	r1, #8
 8000da4:	4810      	ldr	r0, [pc, #64]	; (8000de8 <moveForward+0x4c>)
 8000da6:	f001 f9e3 	bl	8002170 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET); // low
 8000daa:	2200      	movs	r2, #0
 8000dac:	2104      	movs	r1, #4
 8000dae:	480e      	ldr	r0, [pc, #56]	; (8000de8 <moveForward+0x4c>)
 8000db0:	f001 f9de 	bl	8002170 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 8000db4:	2201      	movs	r2, #1
 8000db6:	2110      	movs	r1, #16
 8000db8:	480b      	ldr	r0, [pc, #44]	; (8000de8 <moveForward+0x4c>)
 8000dba:	f001 f9d9 	bl	8002170 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2120      	movs	r1, #32
 8000dc2:	4809      	ldr	r0, [pc, #36]	; (8000de8 <moveForward+0x4c>)
 8000dc4:	f001 f9d4 	bl	8002170 <HAL_GPIO_WritePin>

	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 2500);
 8000dc8:	4b08      	ldr	r3, [pc, #32]	; (8000dec <moveForward+0x50>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000dd0:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 2500);
 8000dd2:	4b06      	ldr	r3, [pc, #24]	; (8000dec <moveForward+0x50>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000dda:	639a      	str	r2, [r3, #56]	; 0x38

	osDelay(10);
 8000ddc:	200a      	movs	r0, #10
 8000dde:	f003 ff6a 	bl	8004cb6 <osDelay>
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40020000 	.word	0x40020000
 8000dec:	200003bc 	.word	0x200003bc

08000df0 <motor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_motor */
void motor(void const * argument)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN motor */

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4); // Servo Motor PWM
 8000df8:	210c      	movs	r1, #12
 8000dfa:	4834      	ldr	r0, [pc, #208]	; (8000ecc <motor+0xdc>)
 8000dfc:	f001 ff14 	bl	8002c28 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1); // Motor A PWM
 8000e00:	2100      	movs	r1, #0
 8000e02:	4833      	ldr	r0, [pc, #204]	; (8000ed0 <motor+0xe0>)
 8000e04:	f001 ff10 	bl	8002c28 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2); // Motor B PWM
 8000e08:	2104      	movs	r1, #4
 8000e0a:	4831      	ldr	r0, [pc, #196]	; (8000ed0 <motor+0xe0>)
 8000e0c:	f001 ff0c 	bl	8002c28 <HAL_TIM_PWM_Start>
	uint16_t cnt = 0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	81fb      	strh	r3, [r7, #14]

	//Infinite loop
	for (;;)
	{
		//anti-clockwise (forward)
		while (cnt < 3000)
 8000e14:	e004      	b.n	8000e20 <motor+0x30>
		{
			moveForward();
 8000e16:	f7ff ffc1 	bl	8000d9c <moveForward>
			cnt+=10;
 8000e1a:	89fb      	ldrh	r3, [r7, #14]
 8000e1c:	330a      	adds	r3, #10
 8000e1e:	81fb      	strh	r3, [r7, #14]
		while (cnt < 3000)
 8000e20:	89fb      	ldrh	r3, [r7, #14]
 8000e22:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d9f5      	bls.n	8000e16 <motor+0x26>
		}

		stopMotor();
 8000e2a:	f7ff ffa5 	bl	8000d78 <stopMotor>
		htim1.Instance->CCR4 = 100; // extreme left
 8000e2e:	4b27      	ldr	r3, [pc, #156]	; (8000ecc <motor+0xdc>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	2264      	movs	r2, #100	; 0x64
 8000e34:	641a      	str	r2, [r3, #64]	; 0x40
		osDelay(1000);
 8000e36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e3a:	f003 ff3c 	bl	8004cb6 <osDelay>
		cnt = 0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	81fb      	strh	r3, [r7, #14]

		while (cnt < 1000)
 8000e42:	e004      	b.n	8000e4e <motor+0x5e>
		{
			moveForward();
 8000e44:	f7ff ffaa 	bl	8000d9c <moveForward>
			cnt+=10;
 8000e48:	89fb      	ldrh	r3, [r7, #14]
 8000e4a:	330a      	adds	r3, #10
 8000e4c:	81fb      	strh	r3, [r7, #14]
		while (cnt < 1000)
 8000e4e:	89fb      	ldrh	r3, [r7, #14]
 8000e50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e54:	d3f6      	bcc.n	8000e44 <motor+0x54>
		}

		stopMotor();
 8000e56:	f7ff ff8f 	bl	8000d78 <stopMotor>
		htim1.Instance->CCR4 = 145; // centre
 8000e5a:	4b1c      	ldr	r3, [pc, #112]	; (8000ecc <motor+0xdc>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	2291      	movs	r2, #145	; 0x91
 8000e60:	641a      	str	r2, [r3, #64]	; 0x40
		osDelay(1000);
 8000e62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e66:	f003 ff26 	bl	8004cb6 <osDelay>
		cnt=0;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	81fb      	strh	r3, [r7, #14]

		while (cnt < 3000)
 8000e6e:	e004      	b.n	8000e7a <motor+0x8a>
				{
					moveForward();
 8000e70:	f7ff ff94 	bl	8000d9c <moveForward>
					cnt+=10;
 8000e74:	89fb      	ldrh	r3, [r7, #14]
 8000e76:	330a      	adds	r3, #10
 8000e78:	81fb      	strh	r3, [r7, #14]
		while (cnt < 3000)
 8000e7a:	89fb      	ldrh	r3, [r7, #14]
 8000e7c:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d9f5      	bls.n	8000e70 <motor+0x80>
				}

		stopMotor();
 8000e84:	f7ff ff78 	bl	8000d78 <stopMotor>
		htim1.Instance->CCR4 = 200; // extreme right
 8000e88:	4b10      	ldr	r3, [pc, #64]	; (8000ecc <motor+0xdc>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	22c8      	movs	r2, #200	; 0xc8
 8000e8e:	641a      	str	r2, [r3, #64]	; 0x40
		osDelay(1000);
 8000e90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e94:	f003 ff0f 	bl	8004cb6 <osDelay>
		cnt=0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	81fb      	strh	r3, [r7, #14]

		while (cnt < 1000)
 8000e9c:	e004      	b.n	8000ea8 <motor+0xb8>
		{
			moveForward();
 8000e9e:	f7ff ff7d 	bl	8000d9c <moveForward>
			cnt+=10;
 8000ea2:	89fb      	ldrh	r3, [r7, #14]
 8000ea4:	330a      	adds	r3, #10
 8000ea6:	81fb      	strh	r3, [r7, #14]
		while (cnt < 1000)
 8000ea8:	89fb      	ldrh	r3, [r7, #14]
 8000eaa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000eae:	d3f6      	bcc.n	8000e9e <motor+0xae>
		}

		stopMotor();
 8000eb0:	f7ff ff62 	bl	8000d78 <stopMotor>
		htim1.Instance->CCR4 = 145; // centre
 8000eb4:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <motor+0xdc>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2291      	movs	r2, #145	; 0x91
 8000eba:	641a      	str	r2, [r3, #64]	; 0x40
		osDelay(1000);
 8000ebc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ec0:	f003 fef9 	bl	8004cb6 <osDelay>
		cnt=0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	81fb      	strh	r3, [r7, #14]
		while (cnt < 3000)
 8000ec8:	e7aa      	b.n	8000e20 <motor+0x30>
 8000eca:	bf00      	nop
 8000ecc:	200002e4 	.word	0x200002e4
 8000ed0:	200003bc 	.word	0x200003bc

08000ed4 <encoderMotorA>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_encoderMotorA */
void encoderMotorA(void const * argument)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08c      	sub	sp, #48	; 0x30
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN encoderMotorA */
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000edc:	213c      	movs	r1, #60	; 0x3c
 8000ede:	4836      	ldr	r0, [pc, #216]	; (8000fb8 <encoderMotorA+0xe4>)
 8000ee0:	f002 f810 	bl	8002f04 <HAL_TIM_Encoder_Start>
	int cntA1, cntA2, diffA;
	uint32_t tickA;

	cntA1 = __HAL_TIM_GET_COUNTER(&htim2);
 8000ee4:	4b34      	ldr	r3, [pc, #208]	; (8000fb8 <encoderMotorA+0xe4>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eea:	62fb      	str	r3, [r7, #44]	; 0x2c
	tickA = HAL_GetTick();
 8000eec:	f000 fdd0 	bl	8001a90 <HAL_GetTick>
 8000ef0:	6278      	str	r0, [r7, #36]	; 0x24

	uint8_t helloA[20];
	uint16_t dirA;
	/* Infinite loop */
	for (;;) {
		if (HAL_GetTick() - tickA > 1000L) // get reading every 1000 ticks
 8000ef2:	f000 fdcd 	bl	8001a90 <HAL_GetTick>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f00:	d9f7      	bls.n	8000ef2 <encoderMotorA+0x1e>
				{
			cntA2 = __HAL_TIM_GET_COUNTER(&htim2); // get counter again from tim2
 8000f02:	4b2d      	ldr	r3, [pc, #180]	; (8000fb8 <encoderMotorA+0xe4>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f08:	623b      	str	r3, [r7, #32]
			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) // check overflow and prevent it
 8000f0a:	4b2b      	ldr	r3, [pc, #172]	; (8000fb8 <encoderMotorA+0xe4>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f003 0310 	and.w	r3, r3, #16
 8000f14:	2b10      	cmp	r3, #16
 8000f16:	d110      	bne.n	8000f3a <encoderMotorA+0x66>
					{
				if (cntA2 < cntA1)
 8000f18:	6a3a      	ldr	r2, [r7, #32]
 8000f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	da04      	bge.n	8000f2a <encoderMotorA+0x56>
					diffA = cntA1 - cntA2;
 8000f20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f22:	6a3b      	ldr	r3, [r7, #32]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f28:	e017      	b.n	8000f5a <encoderMotorA+0x86>
				else
					diffA = (65535 - cntA2) + cntA1;
 8000f2a:	6a3b      	ldr	r3, [r7, #32]
 8000f2c:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8000f30:	33ff      	adds	r3, #255	; 0xff
 8000f32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f34:	4413      	add	r3, r2
 8000f36:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f38:	e00f      	b.n	8000f5a <encoderMotorA+0x86>
			} else {
				if (cntA2 > cntA1)
 8000f3a:	6a3a      	ldr	r2, [r7, #32]
 8000f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	dd04      	ble.n	8000f4c <encoderMotorA+0x78>
					diffA = cntA2 - cntA1;
 8000f42:	6a3a      	ldr	r2, [r7, #32]
 8000f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f4a:	e006      	b.n	8000f5a <encoderMotorA+0x86>
				else
					diffA = (65535 - cntA1) + cntA2;
 8000f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f4e:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8000f52:	33ff      	adds	r3, #255	; 0xff
 8000f54:	6a3a      	ldr	r2, [r7, #32]
 8000f56:	4413      	add	r3, r2
 8000f58:	62bb      	str	r3, [r7, #40]	; 0x28
			}
			sprintf(helloA, "SpeedA: %5d\0", diffA);
 8000f5a:	f107 0308 	add.w	r3, r7, #8
 8000f5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f60:	4916      	ldr	r1, [pc, #88]	; (8000fbc <encoderMotorA+0xe8>)
 8000f62:	4618      	mov	r0, r3
 8000f64:	f005 f8ea 	bl	800613c <siprintf>
			OLED_ShowString(10, 20, helloA);
 8000f68:	f107 0308 	add.w	r3, r7, #8
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	2114      	movs	r1, #20
 8000f70:	200a      	movs	r0, #10
 8000f72:	f000 fa19 	bl	80013a8 <OLED_ShowString>
			dirA = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2);
 8000f76:	4b10      	ldr	r3, [pc, #64]	; (8000fb8 <encoderMotorA+0xe4>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f003 0310 	and.w	r3, r3, #16
 8000f80:	2b10      	cmp	r3, #16
 8000f82:	bf0c      	ite	eq
 8000f84:	2301      	moveq	r3, #1
 8000f86:	2300      	movne	r3, #0
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	83fb      	strh	r3, [r7, #30]
			sprintf(helloA, "DirA: %5d\0", dirA);
 8000f8c:	8bfa      	ldrh	r2, [r7, #30]
 8000f8e:	f107 0308 	add.w	r3, r7, #8
 8000f92:	490b      	ldr	r1, [pc, #44]	; (8000fc0 <encoderMotorA+0xec>)
 8000f94:	4618      	mov	r0, r3
 8000f96:	f005 f8d1 	bl	800613c <siprintf>
			OLED_ShowString(10, 30, helloA);
 8000f9a:	f107 0308 	add.w	r3, r7, #8
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	211e      	movs	r1, #30
 8000fa2:	200a      	movs	r0, #10
 8000fa4:	f000 fa00 	bl	80013a8 <OLED_ShowString>
			cntA1 = __HAL_TIM_GET_COUNTER(&htim2);
 8000fa8:	4b03      	ldr	r3, [pc, #12]	; (8000fb8 <encoderMotorA+0xe4>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fae:	62fb      	str	r3, [r7, #44]	; 0x2c
			tickA = HAL_GetTick();
 8000fb0:	f000 fd6e 	bl	8001a90 <HAL_GetTick>
 8000fb4:	6278      	str	r0, [r7, #36]	; 0x24
		if (HAL_GetTick() - tickA > 1000L) // get reading every 1000 ticks
 8000fb6:	e79c      	b.n	8000ef2 <encoderMotorA+0x1e>
 8000fb8:	2000032c 	.word	0x2000032c
 8000fbc:	08006afc 	.word	0x08006afc
 8000fc0:	08006b0c 	.word	0x08006b0c

08000fc4 <encoderMotorB>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_encoderMotorB */
void encoderMotorB(void const * argument)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08c      	sub	sp, #48	; 0x30
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN encoderMotorB */
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000fcc:	213c      	movs	r1, #60	; 0x3c
 8000fce:	4836      	ldr	r0, [pc, #216]	; (80010a8 <encoderMotorB+0xe4>)
 8000fd0:	f001 ff98 	bl	8002f04 <HAL_TIM_Encoder_Start>
		int cntB1, cntB2, diffB;
		uint32_t tickB;

		cntB1 = __HAL_TIM_GET_COUNTER(&htim3);
 8000fd4:	4b34      	ldr	r3, [pc, #208]	; (80010a8 <encoderMotorB+0xe4>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fda:	62fb      	str	r3, [r7, #44]	; 0x2c
		tickB = HAL_GetTick();
 8000fdc:	f000 fd58 	bl	8001a90 <HAL_GetTick>
 8000fe0:	6278      	str	r0, [r7, #36]	; 0x24

		uint8_t helloB[20];
		uint16_t dirB;
		/* Infinite loop */
		for (;;) {
			if (HAL_GetTick() - tickB > 1000L) // get reading every 1000 ticks
 8000fe2:	f000 fd55 	bl	8001a90 <HAL_GetTick>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ff0:	d9f7      	bls.n	8000fe2 <encoderMotorB+0x1e>
					{
				cntB2 = __HAL_TIM_GET_COUNTER(&htim3); // get counter again from tim2
 8000ff2:	4b2d      	ldr	r3, [pc, #180]	; (80010a8 <encoderMotorB+0xe4>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff8:	623b      	str	r3, [r7, #32]
				if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3)) // check overflow and prevent it
 8000ffa:	4b2b      	ldr	r3, [pc, #172]	; (80010a8 <encoderMotorB+0xe4>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f003 0310 	and.w	r3, r3, #16
 8001004:	2b10      	cmp	r3, #16
 8001006:	d110      	bne.n	800102a <encoderMotorB+0x66>
						{
					if (cntB2 < cntB1)
 8001008:	6a3a      	ldr	r2, [r7, #32]
 800100a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800100c:	429a      	cmp	r2, r3
 800100e:	da04      	bge.n	800101a <encoderMotorB+0x56>
						diffB = cntB1 - cntB2;
 8001010:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001012:	6a3b      	ldr	r3, [r7, #32]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	62bb      	str	r3, [r7, #40]	; 0x28
 8001018:	e017      	b.n	800104a <encoderMotorB+0x86>
					else
						diffB = (65535 - cntB2) + cntB1;
 800101a:	6a3b      	ldr	r3, [r7, #32]
 800101c:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001020:	33ff      	adds	r3, #255	; 0xff
 8001022:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001024:	4413      	add	r3, r2
 8001026:	62bb      	str	r3, [r7, #40]	; 0x28
 8001028:	e00f      	b.n	800104a <encoderMotorB+0x86>
				} else {
					if (cntB2 > cntB1)
 800102a:	6a3a      	ldr	r2, [r7, #32]
 800102c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800102e:	429a      	cmp	r2, r3
 8001030:	dd04      	ble.n	800103c <encoderMotorB+0x78>
						diffB = cntB2 - cntB1;
 8001032:	6a3a      	ldr	r2, [r7, #32]
 8001034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	62bb      	str	r3, [r7, #40]	; 0x28
 800103a:	e006      	b.n	800104a <encoderMotorB+0x86>
					else
						diffB = (65535 - cntB1) + cntB2;
 800103c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800103e:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001042:	33ff      	adds	r3, #255	; 0xff
 8001044:	6a3a      	ldr	r2, [r7, #32]
 8001046:	4413      	add	r3, r2
 8001048:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				sprintf(helloB, "SpeedB: %5d\0", diffB);
 800104a:	f107 0308 	add.w	r3, r7, #8
 800104e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001050:	4916      	ldr	r1, [pc, #88]	; (80010ac <encoderMotorB+0xe8>)
 8001052:	4618      	mov	r0, r3
 8001054:	f005 f872 	bl	800613c <siprintf>
				OLED_ShowString(10, 40, helloB);
 8001058:	f107 0308 	add.w	r3, r7, #8
 800105c:	461a      	mov	r2, r3
 800105e:	2128      	movs	r1, #40	; 0x28
 8001060:	200a      	movs	r0, #10
 8001062:	f000 f9a1 	bl	80013a8 <OLED_ShowString>
				dirB = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3);
 8001066:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <encoderMotorB+0xe4>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 0310 	and.w	r3, r3, #16
 8001070:	2b10      	cmp	r3, #16
 8001072:	bf0c      	ite	eq
 8001074:	2301      	moveq	r3, #1
 8001076:	2300      	movne	r3, #0
 8001078:	b2db      	uxtb	r3, r3
 800107a:	83fb      	strh	r3, [r7, #30]
				sprintf(helloB, "DirB: %5d\0", dirB);
 800107c:	8bfa      	ldrh	r2, [r7, #30]
 800107e:	f107 0308 	add.w	r3, r7, #8
 8001082:	490b      	ldr	r1, [pc, #44]	; (80010b0 <encoderMotorB+0xec>)
 8001084:	4618      	mov	r0, r3
 8001086:	f005 f859 	bl	800613c <siprintf>
				OLED_ShowString(10, 50, helloB);
 800108a:	f107 0308 	add.w	r3, r7, #8
 800108e:	461a      	mov	r2, r3
 8001090:	2132      	movs	r1, #50	; 0x32
 8001092:	200a      	movs	r0, #10
 8001094:	f000 f988 	bl	80013a8 <OLED_ShowString>
				cntB1 = __HAL_TIM_GET_COUNTER(&htim3);
 8001098:	4b03      	ldr	r3, [pc, #12]	; (80010a8 <encoderMotorB+0xe4>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800109e:	62fb      	str	r3, [r7, #44]	; 0x2c
				tickB = HAL_GetTick();
 80010a0:	f000 fcf6 	bl	8001a90 <HAL_GetTick>
 80010a4:	6278      	str	r0, [r7, #36]	; 0x24
			if (HAL_GetTick() - tickB > 1000L) // get reading every 1000 ticks
 80010a6:	e79c      	b.n	8000fe2 <encoderMotorB+0x1e>
 80010a8:	20000374 	.word	0x20000374
 80010ac:	08006b18 	.word	0x08006b18
 80010b0:	08006b28 	.word	0x08006b28

080010b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b8:	b672      	cpsid	i
}
 80010ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010bc:	e7fe      	b.n	80010bc <Error_Handler+0x8>
	...

080010c0 <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 80010c6:	2300      	movs	r3, #0
 80010c8:	71fb      	strb	r3, [r7, #7]
 80010ca:	e026      	b.n	800111a <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	3b50      	subs	r3, #80	; 0x50
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	2100      	movs	r1, #0
 80010d4:	4618      	mov	r0, r3
 80010d6:	f000 f82b 	bl	8001130 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 80010da:	2100      	movs	r1, #0
 80010dc:	2000      	movs	r0, #0
 80010de:	f000 f827 	bl	8001130 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 80010e2:	2100      	movs	r1, #0
 80010e4:	2010      	movs	r0, #16
 80010e6:	f000 f823 	bl	8001130 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 80010ea:	2300      	movs	r3, #0
 80010ec:	71bb      	strb	r3, [r7, #6]
 80010ee:	e00d      	b.n	800110c <OLED_Refresh_Gram+0x4c>
 80010f0:	79ba      	ldrb	r2, [r7, #6]
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	490d      	ldr	r1, [pc, #52]	; (800112c <OLED_Refresh_Gram+0x6c>)
 80010f6:	00d2      	lsls	r2, r2, #3
 80010f8:	440a      	add	r2, r1
 80010fa:	4413      	add	r3, r2
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	2101      	movs	r1, #1
 8001100:	4618      	mov	r0, r3
 8001102:	f000 f815 	bl	8001130 <OLED_WR_Byte>
 8001106:	79bb      	ldrb	r3, [r7, #6]
 8001108:	3301      	adds	r3, #1
 800110a:	71bb      	strb	r3, [r7, #6]
 800110c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001110:	2b00      	cmp	r3, #0
 8001112:	daed      	bge.n	80010f0 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	3301      	adds	r3, #1
 8001118:	71fb      	strb	r3, [r7, #7]
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	2b07      	cmp	r3, #7
 800111e:	d9d5      	bls.n	80010cc <OLED_Refresh_Gram+0xc>
	}   
}
 8001120:	bf00      	nop
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000470 	.word	0x20000470

08001130 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	460a      	mov	r2, r1
 800113a:	71fb      	strb	r3, [r7, #7]
 800113c:	4613      	mov	r3, r2
 800113e:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 8001140:	79bb      	ldrb	r3, [r7, #6]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d006      	beq.n	8001154 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 8001146:	2201      	movs	r2, #1
 8001148:	f44f 7180 	mov.w	r1, #256	; 0x100
 800114c:	481c      	ldr	r0, [pc, #112]	; (80011c0 <OLED_WR_Byte+0x90>)
 800114e:	f001 f80f 	bl	8002170 <HAL_GPIO_WritePin>
 8001152:	e005      	b.n	8001160 <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 8001154:	2200      	movs	r2, #0
 8001156:	f44f 7180 	mov.w	r1, #256	; 0x100
 800115a:	4819      	ldr	r0, [pc, #100]	; (80011c0 <OLED_WR_Byte+0x90>)
 800115c:	f001 f808 	bl	8002170 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8001160:	2300      	movs	r3, #0
 8001162:	73fb      	strb	r3, [r7, #15]
 8001164:	e01e      	b.n	80011a4 <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 8001166:	2200      	movs	r2, #0
 8001168:	2120      	movs	r1, #32
 800116a:	4815      	ldr	r0, [pc, #84]	; (80011c0 <OLED_WR_Byte+0x90>)
 800116c:	f001 f800 	bl	8002170 <HAL_GPIO_WritePin>
		if(dat&0x80)
 8001170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001174:	2b00      	cmp	r3, #0
 8001176:	da05      	bge.n	8001184 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 8001178:	2201      	movs	r2, #1
 800117a:	2140      	movs	r1, #64	; 0x40
 800117c:	4810      	ldr	r0, [pc, #64]	; (80011c0 <OLED_WR_Byte+0x90>)
 800117e:	f000 fff7 	bl	8002170 <HAL_GPIO_WritePin>
 8001182:	e004      	b.n	800118e <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 8001184:	2200      	movs	r2, #0
 8001186:	2140      	movs	r1, #64	; 0x40
 8001188:	480d      	ldr	r0, [pc, #52]	; (80011c0 <OLED_WR_Byte+0x90>)
 800118a:	f000 fff1 	bl	8002170 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 800118e:	2201      	movs	r2, #1
 8001190:	2120      	movs	r1, #32
 8001192:	480b      	ldr	r0, [pc, #44]	; (80011c0 <OLED_WR_Byte+0x90>)
 8001194:	f000 ffec 	bl	8002170 <HAL_GPIO_WritePin>
		dat<<=1;   
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 800119e:	7bfb      	ldrb	r3, [r7, #15]
 80011a0:	3301      	adds	r3, #1
 80011a2:	73fb      	strb	r3, [r7, #15]
 80011a4:	7bfb      	ldrb	r3, [r7, #15]
 80011a6:	2b07      	cmp	r3, #7
 80011a8:	d9dd      	bls.n	8001166 <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 80011aa:	2201      	movs	r2, #1
 80011ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011b0:	4803      	ldr	r0, [pc, #12]	; (80011c0 <OLED_WR_Byte+0x90>)
 80011b2:	f000 ffdd 	bl	8002170 <HAL_GPIO_WritePin>
} 
 80011b6:	bf00      	nop
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40021000 	.word	0x40021000

080011c4 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 80011ca:	2300      	movs	r3, #0
 80011cc:	71fb      	strb	r3, [r7, #7]
 80011ce:	e014      	b.n	80011fa <OLED_Clear+0x36>
 80011d0:	2300      	movs	r3, #0
 80011d2:	71bb      	strb	r3, [r7, #6]
 80011d4:	e00a      	b.n	80011ec <OLED_Clear+0x28>
 80011d6:	79ba      	ldrb	r2, [r7, #6]
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	490c      	ldr	r1, [pc, #48]	; (800120c <OLED_Clear+0x48>)
 80011dc:	00d2      	lsls	r2, r2, #3
 80011de:	440a      	add	r2, r1
 80011e0:	4413      	add	r3, r2
 80011e2:	2200      	movs	r2, #0
 80011e4:	701a      	strb	r2, [r3, #0]
 80011e6:	79bb      	ldrb	r3, [r7, #6]
 80011e8:	3301      	adds	r3, #1
 80011ea:	71bb      	strb	r3, [r7, #6]
 80011ec:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	daf0      	bge.n	80011d6 <OLED_Clear+0x12>
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	3301      	adds	r3, #1
 80011f8:	71fb      	strb	r3, [r7, #7]
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	2b07      	cmp	r3, #7
 80011fe:	d9e7      	bls.n	80011d0 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 8001200:	f7ff ff5e 	bl	80010c0 <OLED_Refresh_Gram>
}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20000470 	.word	0x20000470

08001210 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	71fb      	strb	r3, [r7, #7]
 800121a:	460b      	mov	r3, r1
 800121c:	71bb      	strb	r3, [r7, #6]
 800121e:	4613      	mov	r3, r2
 8001220:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 8001222:	2300      	movs	r3, #0
 8001224:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 8001226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122a:	2b00      	cmp	r3, #0
 800122c:	db41      	blt.n	80012b2 <OLED_DrawPoint+0xa2>
 800122e:	79bb      	ldrb	r3, [r7, #6]
 8001230:	2b3f      	cmp	r3, #63	; 0x3f
 8001232:	d83e      	bhi.n	80012b2 <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 8001234:	79bb      	ldrb	r3, [r7, #6]
 8001236:	08db      	lsrs	r3, r3, #3
 8001238:	b2db      	uxtb	r3, r3
 800123a:	f1c3 0307 	rsb	r3, r3, #7
 800123e:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 8001240:	79bb      	ldrb	r3, [r7, #6]
 8001242:	f003 0307 	and.w	r3, r3, #7
 8001246:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8001248:	7b7b      	ldrb	r3, [r7, #13]
 800124a:	f1c3 0307 	rsb	r3, r3, #7
 800124e:	2201      	movs	r2, #1
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 8001256:	797b      	ldrb	r3, [r7, #5]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d012      	beq.n	8001282 <OLED_DrawPoint+0x72>
 800125c:	79fa      	ldrb	r2, [r7, #7]
 800125e:	7bbb      	ldrb	r3, [r7, #14]
 8001260:	4917      	ldr	r1, [pc, #92]	; (80012c0 <OLED_DrawPoint+0xb0>)
 8001262:	00d2      	lsls	r2, r2, #3
 8001264:	440a      	add	r2, r1
 8001266:	4413      	add	r3, r2
 8001268:	7818      	ldrb	r0, [r3, #0]
 800126a:	79fa      	ldrb	r2, [r7, #7]
 800126c:	7bbb      	ldrb	r3, [r7, #14]
 800126e:	7bf9      	ldrb	r1, [r7, #15]
 8001270:	4301      	orrs	r1, r0
 8001272:	b2c8      	uxtb	r0, r1
 8001274:	4912      	ldr	r1, [pc, #72]	; (80012c0 <OLED_DrawPoint+0xb0>)
 8001276:	00d2      	lsls	r2, r2, #3
 8001278:	440a      	add	r2, r1
 800127a:	4413      	add	r3, r2
 800127c:	4602      	mov	r2, r0
 800127e:	701a      	strb	r2, [r3, #0]
 8001280:	e018      	b.n	80012b4 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 8001282:	79fa      	ldrb	r2, [r7, #7]
 8001284:	7bbb      	ldrb	r3, [r7, #14]
 8001286:	490e      	ldr	r1, [pc, #56]	; (80012c0 <OLED_DrawPoint+0xb0>)
 8001288:	00d2      	lsls	r2, r2, #3
 800128a:	440a      	add	r2, r1
 800128c:	4413      	add	r3, r2
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	b25a      	sxtb	r2, r3
 8001292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001296:	43db      	mvns	r3, r3
 8001298:	b25b      	sxtb	r3, r3
 800129a:	4013      	ands	r3, r2
 800129c:	b259      	sxtb	r1, r3
 800129e:	79fa      	ldrb	r2, [r7, #7]
 80012a0:	7bbb      	ldrb	r3, [r7, #14]
 80012a2:	b2c8      	uxtb	r0, r1
 80012a4:	4906      	ldr	r1, [pc, #24]	; (80012c0 <OLED_DrawPoint+0xb0>)
 80012a6:	00d2      	lsls	r2, r2, #3
 80012a8:	440a      	add	r2, r1
 80012aa:	4413      	add	r3, r2
 80012ac:	4602      	mov	r2, r0
 80012ae:	701a      	strb	r2, [r3, #0]
 80012b0:	e000      	b.n	80012b4 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 80012b2:	bf00      	nop
}
 80012b4:	3714      	adds	r7, #20
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	20000470 	.word	0x20000470

080012c4 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 80012c4:	b590      	push	{r4, r7, lr}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4604      	mov	r4, r0
 80012cc:	4608      	mov	r0, r1
 80012ce:	4611      	mov	r1, r2
 80012d0:	461a      	mov	r2, r3
 80012d2:	4623      	mov	r3, r4
 80012d4:	71fb      	strb	r3, [r7, #7]
 80012d6:	4603      	mov	r3, r0
 80012d8:	71bb      	strb	r3, [r7, #6]
 80012da:	460b      	mov	r3, r1
 80012dc:	717b      	strb	r3, [r7, #5]
 80012de:	4613      	mov	r3, r2
 80012e0:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 80012e2:	79bb      	ldrb	r3, [r7, #6]
 80012e4:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 80012e6:	797b      	ldrb	r3, [r7, #5]
 80012e8:	3b20      	subs	r3, #32
 80012ea:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 80012ec:	2300      	movs	r3, #0
 80012ee:	73bb      	strb	r3, [r7, #14]
 80012f0:	e04d      	b.n	800138e <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 80012f2:	793b      	ldrb	r3, [r7, #4]
 80012f4:	2b0c      	cmp	r3, #12
 80012f6:	d10b      	bne.n	8001310 <OLED_ShowChar+0x4c>
 80012f8:	797a      	ldrb	r2, [r7, #5]
 80012fa:	7bb9      	ldrb	r1, [r7, #14]
 80012fc:	4828      	ldr	r0, [pc, #160]	; (80013a0 <OLED_ShowChar+0xdc>)
 80012fe:	4613      	mov	r3, r2
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	4413      	add	r3, r2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	4403      	add	r3, r0
 8001308:	440b      	add	r3, r1
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	73fb      	strb	r3, [r7, #15]
 800130e:	e007      	b.n	8001320 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 8001310:	797a      	ldrb	r2, [r7, #5]
 8001312:	7bbb      	ldrb	r3, [r7, #14]
 8001314:	4923      	ldr	r1, [pc, #140]	; (80013a4 <OLED_ShowChar+0xe0>)
 8001316:	0112      	lsls	r2, r2, #4
 8001318:	440a      	add	r2, r1
 800131a:	4413      	add	r3, r2
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 8001320:	2300      	movs	r3, #0
 8001322:	737b      	strb	r3, [r7, #13]
 8001324:	e02d      	b.n	8001382 <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 8001326:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800132a:	2b00      	cmp	r3, #0
 800132c:	da07      	bge.n	800133e <OLED_ShowChar+0x7a>
 800132e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001332:	79b9      	ldrb	r1, [r7, #6]
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff ff6a 	bl	8001210 <OLED_DrawPoint>
 800133c:	e00c      	b.n	8001358 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 800133e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001342:	2b00      	cmp	r3, #0
 8001344:	bf0c      	ite	eq
 8001346:	2301      	moveq	r3, #1
 8001348:	2300      	movne	r3, #0
 800134a:	b2db      	uxtb	r3, r3
 800134c:	461a      	mov	r2, r3
 800134e:	79b9      	ldrb	r1, [r7, #6]
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff ff5c 	bl	8001210 <OLED_DrawPoint>
			temp<<=1;
 8001358:	7bfb      	ldrb	r3, [r7, #15]
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	73fb      	strb	r3, [r7, #15]
			y++;
 800135e:	79bb      	ldrb	r3, [r7, #6]
 8001360:	3301      	adds	r3, #1
 8001362:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 8001364:	79ba      	ldrb	r2, [r7, #6]
 8001366:	7b3b      	ldrb	r3, [r7, #12]
 8001368:	1ad2      	subs	r2, r2, r3
 800136a:	793b      	ldrb	r3, [r7, #4]
 800136c:	429a      	cmp	r2, r3
 800136e:	d105      	bne.n	800137c <OLED_ShowChar+0xb8>
			{
				y=y0;
 8001370:	7b3b      	ldrb	r3, [r7, #12]
 8001372:	71bb      	strb	r3, [r7, #6]
				x++;
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	3301      	adds	r3, #1
 8001378:	71fb      	strb	r3, [r7, #7]
				break;
 800137a:	e005      	b.n	8001388 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 800137c:	7b7b      	ldrb	r3, [r7, #13]
 800137e:	3301      	adds	r3, #1
 8001380:	737b      	strb	r3, [r7, #13]
 8001382:	7b7b      	ldrb	r3, [r7, #13]
 8001384:	2b07      	cmp	r3, #7
 8001386:	d9ce      	bls.n	8001326 <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 8001388:	7bbb      	ldrb	r3, [r7, #14]
 800138a:	3301      	adds	r3, #1
 800138c:	73bb      	strb	r3, [r7, #14]
 800138e:	7bba      	ldrb	r2, [r7, #14]
 8001390:	793b      	ldrb	r3, [r7, #4]
 8001392:	429a      	cmp	r2, r3
 8001394:	d3ad      	bcc.n	80012f2 <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 8001396:	bf00      	nop
 8001398:	bf00      	nop
 800139a:	3714      	adds	r7, #20
 800139c:	46bd      	mov	sp, r7
 800139e:	bd90      	pop	{r4, r7, pc}
 80013a0:	08006b3c 	.word	0x08006b3c
 80013a4:	08006fb0 	.word	0x08006fb0

080013a8 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af02      	add	r7, sp, #8
 80013ae:	4603      	mov	r3, r0
 80013b0:	603a      	str	r2, [r7, #0]
 80013b2:	71fb      	strb	r3, [r7, #7]
 80013b4:	460b      	mov	r3, r1
 80013b6:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 80013b8:	e01f      	b.n	80013fa <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	2b7a      	cmp	r3, #122	; 0x7a
 80013be:	d904      	bls.n	80013ca <OLED_ShowString+0x22>
 80013c0:	2300      	movs	r3, #0
 80013c2:	71fb      	strb	r3, [r7, #7]
 80013c4:	79bb      	ldrb	r3, [r7, #6]
 80013c6:	3310      	adds	r3, #16
 80013c8:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 80013ca:	79bb      	ldrb	r3, [r7, #6]
 80013cc:	2b3a      	cmp	r3, #58	; 0x3a
 80013ce:	d905      	bls.n	80013dc <OLED_ShowString+0x34>
 80013d0:	2300      	movs	r3, #0
 80013d2:	71fb      	strb	r3, [r7, #7]
 80013d4:	79fb      	ldrb	r3, [r7, #7]
 80013d6:	71bb      	strb	r3, [r7, #6]
 80013d8:	f7ff fef4 	bl	80011c4 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	781a      	ldrb	r2, [r3, #0]
 80013e0:	79b9      	ldrb	r1, [r7, #6]
 80013e2:	79f8      	ldrb	r0, [r7, #7]
 80013e4:	2301      	movs	r3, #1
 80013e6:	9300      	str	r3, [sp, #0]
 80013e8:	230c      	movs	r3, #12
 80013ea:	f7ff ff6b 	bl	80012c4 <OLED_ShowChar>
        x+=8;
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	3308      	adds	r3, #8
 80013f2:	71fb      	strb	r3, [r7, #7]
        p++;
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	3301      	adds	r3, #1
 80013f8:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d1db      	bne.n	80013ba <OLED_ShowString+0x12>
    }  
}	 
 8001402:	bf00      	nop
 8001404:	bf00      	nop
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <OLED_Init>:

void OLED_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 8001410:	f000 fee2 	bl	80021d8 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 8001414:	4b41      	ldr	r3, [pc, #260]	; (800151c <OLED_Init+0x110>)
 8001416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001418:	4a40      	ldr	r2, [pc, #256]	; (800151c <OLED_Init+0x110>)
 800141a:	f023 0301 	bic.w	r3, r3, #1
 800141e:	6713      	str	r3, [r2, #112]	; 0x70
 8001420:	4b3e      	ldr	r3, [pc, #248]	; (800151c <OLED_Init+0x110>)
 8001422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001424:	4a3d      	ldr	r2, [pc, #244]	; (800151c <OLED_Init+0x110>)
 8001426:	f023 0304 	bic.w	r3, r3, #4
 800142a:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 800142c:	f000 fee8 	bl	8002200 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 8001430:	2200      	movs	r2, #0
 8001432:	2180      	movs	r1, #128	; 0x80
 8001434:	483a      	ldr	r0, [pc, #232]	; (8001520 <OLED_Init+0x114>)
 8001436:	f000 fe9b 	bl	8002170 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800143a:	2064      	movs	r0, #100	; 0x64
 800143c:	f000 fb34 	bl	8001aa8 <HAL_Delay>
	OLED_RST_Set();
 8001440:	2201      	movs	r2, #1
 8001442:	2180      	movs	r1, #128	; 0x80
 8001444:	4836      	ldr	r0, [pc, #216]	; (8001520 <OLED_Init+0x114>)
 8001446:	f000 fe93 	bl	8002170 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 800144a:	2100      	movs	r1, #0
 800144c:	20ae      	movs	r0, #174	; 0xae
 800144e:	f7ff fe6f 	bl	8001130 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 8001452:	2100      	movs	r1, #0
 8001454:	20d5      	movs	r0, #213	; 0xd5
 8001456:	f7ff fe6b 	bl	8001130 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 800145a:	2100      	movs	r1, #0
 800145c:	2050      	movs	r0, #80	; 0x50
 800145e:	f7ff fe67 	bl	8001130 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 8001462:	2100      	movs	r1, #0
 8001464:	20a8      	movs	r0, #168	; 0xa8
 8001466:	f7ff fe63 	bl	8001130 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 800146a:	2100      	movs	r1, #0
 800146c:	203f      	movs	r0, #63	; 0x3f
 800146e:	f7ff fe5f 	bl	8001130 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 8001472:	2100      	movs	r1, #0
 8001474:	20d3      	movs	r0, #211	; 0xd3
 8001476:	f7ff fe5b 	bl	8001130 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 800147a:	2100      	movs	r1, #0
 800147c:	2000      	movs	r0, #0
 800147e:	f7ff fe57 	bl	8001130 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 8001482:	2100      	movs	r1, #0
 8001484:	2040      	movs	r0, #64	; 0x40
 8001486:	f7ff fe53 	bl	8001130 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 800148a:	2100      	movs	r1, #0
 800148c:	208d      	movs	r0, #141	; 0x8d
 800148e:	f7ff fe4f 	bl	8001130 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 8001492:	2100      	movs	r1, #0
 8001494:	2014      	movs	r0, #20
 8001496:	f7ff fe4b 	bl	8001130 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 800149a:	2100      	movs	r1, #0
 800149c:	2020      	movs	r0, #32
 800149e:	f7ff fe47 	bl	8001130 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 80014a2:	2100      	movs	r1, #0
 80014a4:	2002      	movs	r0, #2
 80014a6:	f7ff fe43 	bl	8001130 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 80014aa:	2100      	movs	r1, #0
 80014ac:	20a1      	movs	r0, #161	; 0xa1
 80014ae:	f7ff fe3f 	bl	8001130 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 80014b2:	2100      	movs	r1, #0
 80014b4:	20c0      	movs	r0, #192	; 0xc0
 80014b6:	f7ff fe3b 	bl	8001130 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 80014ba:	2100      	movs	r1, #0
 80014bc:	20da      	movs	r0, #218	; 0xda
 80014be:	f7ff fe37 	bl	8001130 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 80014c2:	2100      	movs	r1, #0
 80014c4:	2012      	movs	r0, #18
 80014c6:	f7ff fe33 	bl	8001130 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 80014ca:	2100      	movs	r1, #0
 80014cc:	2081      	movs	r0, #129	; 0x81
 80014ce:	f7ff fe2f 	bl	8001130 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 80014d2:	2100      	movs	r1, #0
 80014d4:	20ef      	movs	r0, #239	; 0xef
 80014d6:	f7ff fe2b 	bl	8001130 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 80014da:	2100      	movs	r1, #0
 80014dc:	20d9      	movs	r0, #217	; 0xd9
 80014de:	f7ff fe27 	bl	8001130 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 80014e2:	2100      	movs	r1, #0
 80014e4:	20f1      	movs	r0, #241	; 0xf1
 80014e6:	f7ff fe23 	bl	8001130 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 80014ea:	2100      	movs	r1, #0
 80014ec:	20db      	movs	r0, #219	; 0xdb
 80014ee:	f7ff fe1f 	bl	8001130 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 80014f2:	2100      	movs	r1, #0
 80014f4:	2030      	movs	r0, #48	; 0x30
 80014f6:	f7ff fe1b 	bl	8001130 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 80014fa:	2100      	movs	r1, #0
 80014fc:	20a4      	movs	r0, #164	; 0xa4
 80014fe:	f7ff fe17 	bl	8001130 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 8001502:	2100      	movs	r1, #0
 8001504:	20a6      	movs	r0, #166	; 0xa6
 8001506:	f7ff fe13 	bl	8001130 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 800150a:	2100      	movs	r1, #0
 800150c:	20af      	movs	r0, #175	; 0xaf
 800150e:	f7ff fe0f 	bl	8001130 <OLED_WR_Byte>
	OLED_Clear(); 
 8001512:	f7ff fe57 	bl	80011c4 <OLED_Clear>
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40023800 	.word	0x40023800
 8001520:	40021000 	.word	0x40021000

08001524 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	607b      	str	r3, [r7, #4]
 800152e:	4b12      	ldr	r3, [pc, #72]	; (8001578 <HAL_MspInit+0x54>)
 8001530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001532:	4a11      	ldr	r2, [pc, #68]	; (8001578 <HAL_MspInit+0x54>)
 8001534:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001538:	6453      	str	r3, [r2, #68]	; 0x44
 800153a:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <HAL_MspInit+0x54>)
 800153c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001542:	607b      	str	r3, [r7, #4]
 8001544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	603b      	str	r3, [r7, #0]
 800154a:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <HAL_MspInit+0x54>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	4a0a      	ldr	r2, [pc, #40]	; (8001578 <HAL_MspInit+0x54>)
 8001550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001554:	6413      	str	r3, [r2, #64]	; 0x40
 8001556:	4b08      	ldr	r3, [pc, #32]	; (8001578 <HAL_MspInit+0x54>)
 8001558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155e:	603b      	str	r3, [r7, #0]
 8001560:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001562:	2200      	movs	r2, #0
 8001564:	210f      	movs	r1, #15
 8001566:	f06f 0001 	mvn.w	r0, #1
 800156a:	f000 fb9c 	bl	8001ca6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800156e:	bf00      	nop
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40023800 	.word	0x40023800

0800157c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a15      	ldr	r2, [pc, #84]	; (80015e0 <HAL_TIM_Base_MspInit+0x64>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d10e      	bne.n	80015ac <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	4b14      	ldr	r3, [pc, #80]	; (80015e4 <HAL_TIM_Base_MspInit+0x68>)
 8001594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001596:	4a13      	ldr	r2, [pc, #76]	; (80015e4 <HAL_TIM_Base_MspInit+0x68>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	6453      	str	r3, [r2, #68]	; 0x44
 800159e:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <HAL_TIM_Base_MspInit+0x68>)
 80015a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80015aa:	e012      	b.n	80015d2 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM8)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a0d      	ldr	r2, [pc, #52]	; (80015e8 <HAL_TIM_Base_MspInit+0x6c>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d10d      	bne.n	80015d2 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	60bb      	str	r3, [r7, #8]
 80015ba:	4b0a      	ldr	r3, [pc, #40]	; (80015e4 <HAL_TIM_Base_MspInit+0x68>)
 80015bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015be:	4a09      	ldr	r2, [pc, #36]	; (80015e4 <HAL_TIM_Base_MspInit+0x68>)
 80015c0:	f043 0302 	orr.w	r3, r3, #2
 80015c4:	6453      	str	r3, [r2, #68]	; 0x44
 80015c6:	4b07      	ldr	r3, [pc, #28]	; (80015e4 <HAL_TIM_Base_MspInit+0x68>)
 80015c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	60bb      	str	r3, [r7, #8]
 80015d0:	68bb      	ldr	r3, [r7, #8]
}
 80015d2:	bf00      	nop
 80015d4:	3714      	adds	r7, #20
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	40010000 	.word	0x40010000
 80015e4:	40023800 	.word	0x40023800
 80015e8:	40010400 	.word	0x40010400

080015ec <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b08c      	sub	sp, #48	; 0x30
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f4:	f107 031c 	add.w	r3, r7, #28
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800160c:	d14b      	bne.n	80016a6 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	61bb      	str	r3, [r7, #24]
 8001612:	4b3f      	ldr	r3, [pc, #252]	; (8001710 <HAL_TIM_Encoder_MspInit+0x124>)
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	4a3e      	ldr	r2, [pc, #248]	; (8001710 <HAL_TIM_Encoder_MspInit+0x124>)
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	6413      	str	r3, [r2, #64]	; 0x40
 800161e:	4b3c      	ldr	r3, [pc, #240]	; (8001710 <HAL_TIM_Encoder_MspInit+0x124>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	61bb      	str	r3, [r7, #24]
 8001628:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]
 800162e:	4b38      	ldr	r3, [pc, #224]	; (8001710 <HAL_TIM_Encoder_MspInit+0x124>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	4a37      	ldr	r2, [pc, #220]	; (8001710 <HAL_TIM_Encoder_MspInit+0x124>)
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	6313      	str	r3, [r2, #48]	; 0x30
 800163a:	4b35      	ldr	r3, [pc, #212]	; (8001710 <HAL_TIM_Encoder_MspInit+0x124>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	617b      	str	r3, [r7, #20]
 8001644:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	613b      	str	r3, [r7, #16]
 800164a:	4b31      	ldr	r3, [pc, #196]	; (8001710 <HAL_TIM_Encoder_MspInit+0x124>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	4a30      	ldr	r2, [pc, #192]	; (8001710 <HAL_TIM_Encoder_MspInit+0x124>)
 8001650:	f043 0302 	orr.w	r3, r3, #2
 8001654:	6313      	str	r3, [r2, #48]	; 0x30
 8001656:	4b2e      	ldr	r3, [pc, #184]	; (8001710 <HAL_TIM_Encoder_MspInit+0x124>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	613b      	str	r3, [r7, #16]
 8001660:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001662:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001666:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001668:	2302      	movs	r3, #2
 800166a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001670:	2300      	movs	r3, #0
 8001672:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001674:	2301      	movs	r3, #1
 8001676:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001678:	f107 031c 	add.w	r3, r7, #28
 800167c:	4619      	mov	r1, r3
 800167e:	4825      	ldr	r0, [pc, #148]	; (8001714 <HAL_TIM_Encoder_MspInit+0x128>)
 8001680:	f000 fbda 	bl	8001e38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001684:	2308      	movs	r3, #8
 8001686:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001688:	2302      	movs	r3, #2
 800168a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001690:	2300      	movs	r3, #0
 8001692:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001694:	2301      	movs	r3, #1
 8001696:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001698:	f107 031c 	add.w	r3, r7, #28
 800169c:	4619      	mov	r1, r3
 800169e:	481e      	ldr	r0, [pc, #120]	; (8001718 <HAL_TIM_Encoder_MspInit+0x12c>)
 80016a0:	f000 fbca 	bl	8001e38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80016a4:	e030      	b.n	8001708 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a1c      	ldr	r2, [pc, #112]	; (800171c <HAL_TIM_Encoder_MspInit+0x130>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d12b      	bne.n	8001708 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016b0:	2300      	movs	r3, #0
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	4b16      	ldr	r3, [pc, #88]	; (8001710 <HAL_TIM_Encoder_MspInit+0x124>)
 80016b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b8:	4a15      	ldr	r2, [pc, #84]	; (8001710 <HAL_TIM_Encoder_MspInit+0x124>)
 80016ba:	f043 0302 	orr.w	r3, r3, #2
 80016be:	6413      	str	r3, [r2, #64]	; 0x40
 80016c0:	4b13      	ldr	r3, [pc, #76]	; (8001710 <HAL_TIM_Encoder_MspInit+0x124>)
 80016c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c4:	f003 0302 	and.w	r3, r3, #2
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016cc:	2300      	movs	r3, #0
 80016ce:	60bb      	str	r3, [r7, #8]
 80016d0:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <HAL_TIM_Encoder_MspInit+0x124>)
 80016d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d4:	4a0e      	ldr	r2, [pc, #56]	; (8001710 <HAL_TIM_Encoder_MspInit+0x124>)
 80016d6:	f043 0301 	orr.w	r3, r3, #1
 80016da:	6313      	str	r3, [r2, #48]	; 0x30
 80016dc:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <HAL_TIM_Encoder_MspInit+0x124>)
 80016de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e0:	f003 0301 	and.w	r3, r3, #1
 80016e4:	60bb      	str	r3, [r7, #8]
 80016e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016e8:	23c0      	movs	r3, #192	; 0xc0
 80016ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ec:	2302      	movs	r3, #2
 80016ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f4:	2300      	movs	r3, #0
 80016f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016f8:	2302      	movs	r3, #2
 80016fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016fc:	f107 031c 	add.w	r3, r7, #28
 8001700:	4619      	mov	r1, r3
 8001702:	4804      	ldr	r0, [pc, #16]	; (8001714 <HAL_TIM_Encoder_MspInit+0x128>)
 8001704:	f000 fb98 	bl	8001e38 <HAL_GPIO_Init>
}
 8001708:	bf00      	nop
 800170a:	3730      	adds	r7, #48	; 0x30
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40023800 	.word	0x40023800
 8001714:	40020000 	.word	0x40020000
 8001718:	40020400 	.word	0x40020400
 800171c:	40000400 	.word	0x40000400

08001720 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b08a      	sub	sp, #40	; 0x28
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001728:	f107 0314 	add.w	r3, r7, #20
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	60da      	str	r2, [r3, #12]
 8001736:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a24      	ldr	r2, [pc, #144]	; (80017d0 <HAL_TIM_MspPostInit+0xb0>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d11f      	bne.n	8001782 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	613b      	str	r3, [r7, #16]
 8001746:	4b23      	ldr	r3, [pc, #140]	; (80017d4 <HAL_TIM_MspPostInit+0xb4>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	4a22      	ldr	r2, [pc, #136]	; (80017d4 <HAL_TIM_MspPostInit+0xb4>)
 800174c:	f043 0310 	orr.w	r3, r3, #16
 8001750:	6313      	str	r3, [r2, #48]	; 0x30
 8001752:	4b20      	ldr	r3, [pc, #128]	; (80017d4 <HAL_TIM_MspPostInit+0xb4>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	f003 0310 	and.w	r3, r3, #16
 800175a:	613b      	str	r3, [r7, #16]
 800175c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800175e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001762:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001764:	2302      	movs	r3, #2
 8001766:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176c:	2300      	movs	r3, #0
 800176e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001770:	2301      	movs	r3, #1
 8001772:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001774:	f107 0314 	add.w	r3, r7, #20
 8001778:	4619      	mov	r1, r3
 800177a:	4817      	ldr	r0, [pc, #92]	; (80017d8 <HAL_TIM_MspPostInit+0xb8>)
 800177c:	f000 fb5c 	bl	8001e38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001780:	e022      	b.n	80017c8 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM8)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a15      	ldr	r2, [pc, #84]	; (80017dc <HAL_TIM_MspPostInit+0xbc>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d11d      	bne.n	80017c8 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800178c:	2300      	movs	r3, #0
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <HAL_TIM_MspPostInit+0xb4>)
 8001792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001794:	4a0f      	ldr	r2, [pc, #60]	; (80017d4 <HAL_TIM_MspPostInit+0xb4>)
 8001796:	f043 0304 	orr.w	r3, r3, #4
 800179a:	6313      	str	r3, [r2, #48]	; 0x30
 800179c:	4b0d      	ldr	r3, [pc, #52]	; (80017d4 <HAL_TIM_MspPostInit+0xb4>)
 800179e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a0:	f003 0304 	and.w	r3, r3, #4
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 80017a8:	23c0      	movs	r3, #192	; 0xc0
 80017aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ac:	2302      	movs	r3, #2
 80017ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b4:	2300      	movs	r3, #0
 80017b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80017b8:	2303      	movs	r3, #3
 80017ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	4619      	mov	r1, r3
 80017c2:	4807      	ldr	r0, [pc, #28]	; (80017e0 <HAL_TIM_MspPostInit+0xc0>)
 80017c4:	f000 fb38 	bl	8001e38 <HAL_GPIO_Init>
}
 80017c8:	bf00      	nop
 80017ca:	3728      	adds	r7, #40	; 0x28
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40010000 	.word	0x40010000
 80017d4:	40023800 	.word	0x40023800
 80017d8:	40021000 	.word	0x40021000
 80017dc:	40010400 	.word	0x40010400
 80017e0:	40020800 	.word	0x40020800

080017e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08a      	sub	sp, #40	; 0x28
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ec:	f107 0314 	add.w	r3, r7, #20
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a1d      	ldr	r2, [pc, #116]	; (8001878 <HAL_UART_MspInit+0x94>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d134      	bne.n	8001870 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	613b      	str	r3, [r7, #16]
 800180a:	4b1c      	ldr	r3, [pc, #112]	; (800187c <HAL_UART_MspInit+0x98>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	4a1b      	ldr	r2, [pc, #108]	; (800187c <HAL_UART_MspInit+0x98>)
 8001810:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001814:	6413      	str	r3, [r2, #64]	; 0x40
 8001816:	4b19      	ldr	r3, [pc, #100]	; (800187c <HAL_UART_MspInit+0x98>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800181e:	613b      	str	r3, [r7, #16]
 8001820:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	4b15      	ldr	r3, [pc, #84]	; (800187c <HAL_UART_MspInit+0x98>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	4a14      	ldr	r2, [pc, #80]	; (800187c <HAL_UART_MspInit+0x98>)
 800182c:	f043 0304 	orr.w	r3, r3, #4
 8001830:	6313      	str	r3, [r2, #48]	; 0x30
 8001832:	4b12      	ldr	r3, [pc, #72]	; (800187c <HAL_UART_MspInit+0x98>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	f003 0304 	and.w	r3, r3, #4
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800183e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001842:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001844:	2302      	movs	r3, #2
 8001846:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800184c:	2303      	movs	r3, #3
 800184e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001850:	2307      	movs	r3, #7
 8001852:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001854:	f107 0314 	add.w	r3, r7, #20
 8001858:	4619      	mov	r1, r3
 800185a:	4809      	ldr	r0, [pc, #36]	; (8001880 <HAL_UART_MspInit+0x9c>)
 800185c:	f000 faec 	bl	8001e38 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001860:	2200      	movs	r2, #0
 8001862:	2105      	movs	r1, #5
 8001864:	2027      	movs	r0, #39	; 0x27
 8001866:	f000 fa1e 	bl	8001ca6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800186a:	2027      	movs	r0, #39	; 0x27
 800186c:	f000 fa37 	bl	8001cde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001870:	bf00      	nop
 8001872:	3728      	adds	r7, #40	; 0x28
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40004800 	.word	0x40004800
 800187c:	40023800 	.word	0x40023800
 8001880:	40020800 	.word	0x40020800

08001884 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001888:	e7fe      	b.n	8001888 <NMI_Handler+0x4>

0800188a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800188e:	e7fe      	b.n	800188e <HardFault_Handler+0x4>

08001890 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001894:	e7fe      	b.n	8001894 <MemManage_Handler+0x4>

08001896 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001896:	b480      	push	{r7}
 8001898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800189a:	e7fe      	b.n	800189a <BusFault_Handler+0x4>

0800189c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018a0:	e7fe      	b.n	80018a0 <UsageFault_Handler+0x4>

080018a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018a2:	b480      	push	{r7}
 80018a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018b4:	f000 f8d8 	bl	8001a68 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80018b8:	f003 ff80 	bl	80057bc <xTaskGetSchedulerState>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d001      	beq.n	80018c6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80018c2:	f004 f9c1 	bl	8005c48 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
	...

080018cc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80018d0:	4802      	ldr	r0, [pc, #8]	; (80018dc <USART3_IRQHandler+0x10>)
 80018d2:	f002 fa1d 	bl	8003d10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20000404 	.word	0x20000404

080018e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018e8:	4a14      	ldr	r2, [pc, #80]	; (800193c <_sbrk+0x5c>)
 80018ea:	4b15      	ldr	r3, [pc, #84]	; (8001940 <_sbrk+0x60>)
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018f4:	4b13      	ldr	r3, [pc, #76]	; (8001944 <_sbrk+0x64>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d102      	bne.n	8001902 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018fc:	4b11      	ldr	r3, [pc, #68]	; (8001944 <_sbrk+0x64>)
 80018fe:	4a12      	ldr	r2, [pc, #72]	; (8001948 <_sbrk+0x68>)
 8001900:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001902:	4b10      	ldr	r3, [pc, #64]	; (8001944 <_sbrk+0x64>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4413      	add	r3, r2
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	429a      	cmp	r2, r3
 800190e:	d207      	bcs.n	8001920 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001910:	f004 fbd4 	bl	80060bc <__errno>
 8001914:	4603      	mov	r3, r0
 8001916:	220c      	movs	r2, #12
 8001918:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800191a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800191e:	e009      	b.n	8001934 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001920:	4b08      	ldr	r3, [pc, #32]	; (8001944 <_sbrk+0x64>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001926:	4b07      	ldr	r3, [pc, #28]	; (8001944 <_sbrk+0x64>)
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4413      	add	r3, r2
 800192e:	4a05      	ldr	r2, [pc, #20]	; (8001944 <_sbrk+0x64>)
 8001930:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001932:	68fb      	ldr	r3, [r7, #12]
}
 8001934:	4618      	mov	r0, r3
 8001936:	3718      	adds	r7, #24
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20020000 	.word	0x20020000
 8001940:	00000400 	.word	0x00000400
 8001944:	20000870 	.word	0x20000870
 8001948:	200045e0 	.word	0x200045e0

0800194c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001950:	4b06      	ldr	r3, [pc, #24]	; (800196c <SystemInit+0x20>)
 8001952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001956:	4a05      	ldr	r2, [pc, #20]	; (800196c <SystemInit+0x20>)
 8001958:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800195c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	e000ed00 	.word	0xe000ed00

08001970 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001970:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001974:	480d      	ldr	r0, [pc, #52]	; (80019ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001976:	490e      	ldr	r1, [pc, #56]	; (80019b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001978:	4a0e      	ldr	r2, [pc, #56]	; (80019b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800197a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800197c:	e002      	b.n	8001984 <LoopCopyDataInit>

0800197e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800197e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001980:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001982:	3304      	adds	r3, #4

08001984 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001984:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001986:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001988:	d3f9      	bcc.n	800197e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800198a:	4a0b      	ldr	r2, [pc, #44]	; (80019b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800198c:	4c0b      	ldr	r4, [pc, #44]	; (80019bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800198e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001990:	e001      	b.n	8001996 <LoopFillZerobss>

08001992 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001992:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001994:	3204      	adds	r2, #4

08001996 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001996:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001998:	d3fb      	bcc.n	8001992 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800199a:	f7ff ffd7 	bl	800194c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800199e:	f004 fb93 	bl	80060c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019a2:	f7fe fe01 	bl	80005a8 <main>
  bx  lr    
 80019a6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80019a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019b0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80019b4:	080075fc 	.word	0x080075fc
  ldr r2, =_sbss
 80019b8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80019bc:	200045dc 	.word	0x200045dc

080019c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019c0:	e7fe      	b.n	80019c0 <ADC_IRQHandler>
	...

080019c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019c8:	4b0e      	ldr	r3, [pc, #56]	; (8001a04 <HAL_Init+0x40>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a0d      	ldr	r2, [pc, #52]	; (8001a04 <HAL_Init+0x40>)
 80019ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019d4:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <HAL_Init+0x40>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a0a      	ldr	r2, [pc, #40]	; (8001a04 <HAL_Init+0x40>)
 80019da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019e0:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <HAL_Init+0x40>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a07      	ldr	r2, [pc, #28]	; (8001a04 <HAL_Init+0x40>)
 80019e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019ec:	2003      	movs	r0, #3
 80019ee:	f000 f94f 	bl	8001c90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019f2:	200f      	movs	r0, #15
 80019f4:	f000 f808 	bl	8001a08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019f8:	f7ff fd94 	bl	8001524 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40023c00 	.word	0x40023c00

08001a08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a10:	4b12      	ldr	r3, [pc, #72]	; (8001a5c <HAL_InitTick+0x54>)
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	4b12      	ldr	r3, [pc, #72]	; (8001a60 <HAL_InitTick+0x58>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	4619      	mov	r1, r3
 8001a1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a26:	4618      	mov	r0, r3
 8001a28:	f000 f967 	bl	8001cfa <HAL_SYSTICK_Config>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e00e      	b.n	8001a54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2b0f      	cmp	r3, #15
 8001a3a:	d80a      	bhi.n	8001a52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	6879      	ldr	r1, [r7, #4]
 8001a40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a44:	f000 f92f 	bl	8001ca6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a48:	4a06      	ldr	r2, [pc, #24]	; (8001a64 <HAL_InitTick+0x5c>)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	e000      	b.n	8001a54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	20000000 	.word	0x20000000
 8001a60:	20000008 	.word	0x20000008
 8001a64:	20000004 	.word	0x20000004

08001a68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a6c:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <HAL_IncTick+0x20>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	461a      	mov	r2, r3
 8001a72:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <HAL_IncTick+0x24>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4413      	add	r3, r2
 8001a78:	4a04      	ldr	r2, [pc, #16]	; (8001a8c <HAL_IncTick+0x24>)
 8001a7a:	6013      	str	r3, [r2, #0]
}
 8001a7c:	bf00      	nop
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	20000008 	.word	0x20000008
 8001a8c:	20000874 	.word	0x20000874

08001a90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  return uwTick;
 8001a94:	4b03      	ldr	r3, [pc, #12]	; (8001aa4 <HAL_GetTick+0x14>)
 8001a96:	681b      	ldr	r3, [r3, #0]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	20000874 	.word	0x20000874

08001aa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ab0:	f7ff ffee 	bl	8001a90 <HAL_GetTick>
 8001ab4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ac0:	d005      	beq.n	8001ace <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ac2:	4b0a      	ldr	r3, [pc, #40]	; (8001aec <HAL_Delay+0x44>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	4413      	add	r3, r2
 8001acc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ace:	bf00      	nop
 8001ad0:	f7ff ffde 	bl	8001a90 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d8f7      	bhi.n	8001ad0 <HAL_Delay+0x28>
  {
  }
}
 8001ae0:	bf00      	nop
 8001ae2:	bf00      	nop
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	20000008 	.word	0x20000008

08001af0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b085      	sub	sp, #20
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f003 0307 	and.w	r3, r3, #7
 8001afe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b00:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <__NVIC_SetPriorityGrouping+0x44>)
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b06:	68ba      	ldr	r2, [r7, #8]
 8001b08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b22:	4a04      	ldr	r2, [pc, #16]	; (8001b34 <__NVIC_SetPriorityGrouping+0x44>)
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	60d3      	str	r3, [r2, #12]
}
 8001b28:	bf00      	nop
 8001b2a:	3714      	adds	r7, #20
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr
 8001b34:	e000ed00 	.word	0xe000ed00

08001b38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b3c:	4b04      	ldr	r3, [pc, #16]	; (8001b50 <__NVIC_GetPriorityGrouping+0x18>)
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	0a1b      	lsrs	r3, r3, #8
 8001b42:	f003 0307 	and.w	r3, r3, #7
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	e000ed00 	.word	0xe000ed00

08001b54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	db0b      	blt.n	8001b7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b66:	79fb      	ldrb	r3, [r7, #7]
 8001b68:	f003 021f 	and.w	r2, r3, #31
 8001b6c:	4907      	ldr	r1, [pc, #28]	; (8001b8c <__NVIC_EnableIRQ+0x38>)
 8001b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b72:	095b      	lsrs	r3, r3, #5
 8001b74:	2001      	movs	r0, #1
 8001b76:	fa00 f202 	lsl.w	r2, r0, r2
 8001b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	e000e100 	.word	0xe000e100

08001b90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	6039      	str	r1, [r7, #0]
 8001b9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	db0a      	blt.n	8001bba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	490c      	ldr	r1, [pc, #48]	; (8001bdc <__NVIC_SetPriority+0x4c>)
 8001baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bae:	0112      	lsls	r2, r2, #4
 8001bb0:	b2d2      	uxtb	r2, r2
 8001bb2:	440b      	add	r3, r1
 8001bb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bb8:	e00a      	b.n	8001bd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	4908      	ldr	r1, [pc, #32]	; (8001be0 <__NVIC_SetPriority+0x50>)
 8001bc0:	79fb      	ldrb	r3, [r7, #7]
 8001bc2:	f003 030f 	and.w	r3, r3, #15
 8001bc6:	3b04      	subs	r3, #4
 8001bc8:	0112      	lsls	r2, r2, #4
 8001bca:	b2d2      	uxtb	r2, r2
 8001bcc:	440b      	add	r3, r1
 8001bce:	761a      	strb	r2, [r3, #24]
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	e000e100 	.word	0xe000e100
 8001be0:	e000ed00 	.word	0xe000ed00

08001be4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b089      	sub	sp, #36	; 0x24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	f1c3 0307 	rsb	r3, r3, #7
 8001bfe:	2b04      	cmp	r3, #4
 8001c00:	bf28      	it	cs
 8001c02:	2304      	movcs	r3, #4
 8001c04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	3304      	adds	r3, #4
 8001c0a:	2b06      	cmp	r3, #6
 8001c0c:	d902      	bls.n	8001c14 <NVIC_EncodePriority+0x30>
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	3b03      	subs	r3, #3
 8001c12:	e000      	b.n	8001c16 <NVIC_EncodePriority+0x32>
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	43da      	mvns	r2, r3
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	401a      	ands	r2, r3
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	fa01 f303 	lsl.w	r3, r1, r3
 8001c36:	43d9      	mvns	r1, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c3c:	4313      	orrs	r3, r2
         );
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3724      	adds	r7, #36	; 0x24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
	...

08001c4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3b01      	subs	r3, #1
 8001c58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c5c:	d301      	bcc.n	8001c62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e00f      	b.n	8001c82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c62:	4a0a      	ldr	r2, [pc, #40]	; (8001c8c <SysTick_Config+0x40>)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3b01      	subs	r3, #1
 8001c68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c6a:	210f      	movs	r1, #15
 8001c6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c70:	f7ff ff8e 	bl	8001b90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c74:	4b05      	ldr	r3, [pc, #20]	; (8001c8c <SysTick_Config+0x40>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c7a:	4b04      	ldr	r3, [pc, #16]	; (8001c8c <SysTick_Config+0x40>)
 8001c7c:	2207      	movs	r2, #7
 8001c7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	e000e010 	.word	0xe000e010

08001c90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f7ff ff29 	bl	8001af0 <__NVIC_SetPriorityGrouping>
}
 8001c9e:	bf00      	nop
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b086      	sub	sp, #24
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	4603      	mov	r3, r0
 8001cae:	60b9      	str	r1, [r7, #8]
 8001cb0:	607a      	str	r2, [r7, #4]
 8001cb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cb8:	f7ff ff3e 	bl	8001b38 <__NVIC_GetPriorityGrouping>
 8001cbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	68b9      	ldr	r1, [r7, #8]
 8001cc2:	6978      	ldr	r0, [r7, #20]
 8001cc4:	f7ff ff8e 	bl	8001be4 <NVIC_EncodePriority>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cce:	4611      	mov	r1, r2
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff ff5d 	bl	8001b90 <__NVIC_SetPriority>
}
 8001cd6:	bf00      	nop
 8001cd8:	3718      	adds	r7, #24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b082      	sub	sp, #8
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff ff31 	bl	8001b54 <__NVIC_EnableIRQ>
}
 8001cf2:	bf00      	nop
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b082      	sub	sp, #8
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f7ff ffa2 	bl	8001c4c <SysTick_Config>
 8001d08:	4603      	mov	r3, r0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b084      	sub	sp, #16
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d20:	f7ff feb6 	bl	8001a90 <HAL_GetTick>
 8001d24:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d008      	beq.n	8001d44 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2280      	movs	r2, #128	; 0x80
 8001d36:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e052      	b.n	8001dea <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f022 0216 	bic.w	r2, r2, #22
 8001d52:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	695a      	ldr	r2, [r3, #20]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d62:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d103      	bne.n	8001d74 <HAL_DMA_Abort+0x62>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d007      	beq.n	8001d84 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f022 0208 	bic.w	r2, r2, #8
 8001d82:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f022 0201 	bic.w	r2, r2, #1
 8001d92:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d94:	e013      	b.n	8001dbe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d96:	f7ff fe7b 	bl	8001a90 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b05      	cmp	r3, #5
 8001da2:	d90c      	bls.n	8001dbe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2220      	movs	r2, #32
 8001da8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2203      	movs	r2, #3
 8001dae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e015      	b.n	8001dea <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d1e4      	bne.n	8001d96 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd0:	223f      	movs	r2, #63	; 0x3f
 8001dd2:	409a      	lsls	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3710      	adds	r7, #16
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b083      	sub	sp, #12
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d004      	beq.n	8001e10 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2280      	movs	r2, #128	; 0x80
 8001e0a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e00c      	b.n	8001e2a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2205      	movs	r2, #5
 8001e14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f022 0201 	bic.w	r2, r2, #1
 8001e26:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
	...

08001e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b089      	sub	sp, #36	; 0x24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e42:	2300      	movs	r3, #0
 8001e44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e46:	2300      	movs	r3, #0
 8001e48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61fb      	str	r3, [r7, #28]
 8001e52:	e16b      	b.n	800212c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e54:	2201      	movs	r2, #1
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	4013      	ands	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	f040 815a 	bne.w	8002126 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f003 0303 	and.w	r3, r3, #3
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d005      	beq.n	8001e8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d130      	bne.n	8001eec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	2203      	movs	r2, #3
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	68da      	ldr	r2, [r3, #12]
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	091b      	lsrs	r3, r3, #4
 8001ed6:	f003 0201 	and.w	r2, r3, #1
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f003 0303 	and.w	r3, r3, #3
 8001ef4:	2b03      	cmp	r3, #3
 8001ef6:	d017      	beq.n	8001f28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	2203      	movs	r2, #3
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f003 0303 	and.w	r3, r3, #3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d123      	bne.n	8001f7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	08da      	lsrs	r2, r3, #3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3208      	adds	r2, #8
 8001f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	f003 0307 	and.w	r3, r3, #7
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	220f      	movs	r2, #15
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	43db      	mvns	r3, r3
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4013      	ands	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	691a      	ldr	r2, [r3, #16]
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	08da      	lsrs	r2, r3, #3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	3208      	adds	r2, #8
 8001f76:	69b9      	ldr	r1, [r7, #24]
 8001f78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	2203      	movs	r2, #3
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	4013      	ands	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 0203 	and.w	r2, r3, #3
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f000 80b4 	beq.w	8002126 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	4b60      	ldr	r3, [pc, #384]	; (8002144 <HAL_GPIO_Init+0x30c>)
 8001fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc6:	4a5f      	ldr	r2, [pc, #380]	; (8002144 <HAL_GPIO_Init+0x30c>)
 8001fc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8001fce:	4b5d      	ldr	r3, [pc, #372]	; (8002144 <HAL_GPIO_Init+0x30c>)
 8001fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fda:	4a5b      	ldr	r2, [pc, #364]	; (8002148 <HAL_GPIO_Init+0x310>)
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	089b      	lsrs	r3, r3, #2
 8001fe0:	3302      	adds	r3, #2
 8001fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	f003 0303 	and.w	r3, r3, #3
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	220f      	movs	r2, #15
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a52      	ldr	r2, [pc, #328]	; (800214c <HAL_GPIO_Init+0x314>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d02b      	beq.n	800205e <HAL_GPIO_Init+0x226>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a51      	ldr	r2, [pc, #324]	; (8002150 <HAL_GPIO_Init+0x318>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d025      	beq.n	800205a <HAL_GPIO_Init+0x222>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a50      	ldr	r2, [pc, #320]	; (8002154 <HAL_GPIO_Init+0x31c>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d01f      	beq.n	8002056 <HAL_GPIO_Init+0x21e>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a4f      	ldr	r2, [pc, #316]	; (8002158 <HAL_GPIO_Init+0x320>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d019      	beq.n	8002052 <HAL_GPIO_Init+0x21a>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a4e      	ldr	r2, [pc, #312]	; (800215c <HAL_GPIO_Init+0x324>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d013      	beq.n	800204e <HAL_GPIO_Init+0x216>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a4d      	ldr	r2, [pc, #308]	; (8002160 <HAL_GPIO_Init+0x328>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d00d      	beq.n	800204a <HAL_GPIO_Init+0x212>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a4c      	ldr	r2, [pc, #304]	; (8002164 <HAL_GPIO_Init+0x32c>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d007      	beq.n	8002046 <HAL_GPIO_Init+0x20e>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a4b      	ldr	r2, [pc, #300]	; (8002168 <HAL_GPIO_Init+0x330>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d101      	bne.n	8002042 <HAL_GPIO_Init+0x20a>
 800203e:	2307      	movs	r3, #7
 8002040:	e00e      	b.n	8002060 <HAL_GPIO_Init+0x228>
 8002042:	2308      	movs	r3, #8
 8002044:	e00c      	b.n	8002060 <HAL_GPIO_Init+0x228>
 8002046:	2306      	movs	r3, #6
 8002048:	e00a      	b.n	8002060 <HAL_GPIO_Init+0x228>
 800204a:	2305      	movs	r3, #5
 800204c:	e008      	b.n	8002060 <HAL_GPIO_Init+0x228>
 800204e:	2304      	movs	r3, #4
 8002050:	e006      	b.n	8002060 <HAL_GPIO_Init+0x228>
 8002052:	2303      	movs	r3, #3
 8002054:	e004      	b.n	8002060 <HAL_GPIO_Init+0x228>
 8002056:	2302      	movs	r3, #2
 8002058:	e002      	b.n	8002060 <HAL_GPIO_Init+0x228>
 800205a:	2301      	movs	r3, #1
 800205c:	e000      	b.n	8002060 <HAL_GPIO_Init+0x228>
 800205e:	2300      	movs	r3, #0
 8002060:	69fa      	ldr	r2, [r7, #28]
 8002062:	f002 0203 	and.w	r2, r2, #3
 8002066:	0092      	lsls	r2, r2, #2
 8002068:	4093      	lsls	r3, r2
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	4313      	orrs	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002070:	4935      	ldr	r1, [pc, #212]	; (8002148 <HAL_GPIO_Init+0x310>)
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	089b      	lsrs	r3, r3, #2
 8002076:	3302      	adds	r3, #2
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800207e:	4b3b      	ldr	r3, [pc, #236]	; (800216c <HAL_GPIO_Init+0x334>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	43db      	mvns	r3, r3
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	4013      	ands	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	4313      	orrs	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020a2:	4a32      	ldr	r2, [pc, #200]	; (800216c <HAL_GPIO_Init+0x334>)
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020a8:	4b30      	ldr	r3, [pc, #192]	; (800216c <HAL_GPIO_Init+0x334>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	43db      	mvns	r3, r3
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	4013      	ands	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d003      	beq.n	80020cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020cc:	4a27      	ldr	r2, [pc, #156]	; (800216c <HAL_GPIO_Init+0x334>)
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020d2:	4b26      	ldr	r3, [pc, #152]	; (800216c <HAL_GPIO_Init+0x334>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	43db      	mvns	r3, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4013      	ands	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020f6:	4a1d      	ldr	r2, [pc, #116]	; (800216c <HAL_GPIO_Init+0x334>)
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020fc:	4b1b      	ldr	r3, [pc, #108]	; (800216c <HAL_GPIO_Init+0x334>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	43db      	mvns	r3, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4013      	ands	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d003      	beq.n	8002120 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	4313      	orrs	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002120:	4a12      	ldr	r2, [pc, #72]	; (800216c <HAL_GPIO_Init+0x334>)
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	3301      	adds	r3, #1
 800212a:	61fb      	str	r3, [r7, #28]
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	2b0f      	cmp	r3, #15
 8002130:	f67f ae90 	bls.w	8001e54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002134:	bf00      	nop
 8002136:	bf00      	nop
 8002138:	3724      	adds	r7, #36	; 0x24
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	40023800 	.word	0x40023800
 8002148:	40013800 	.word	0x40013800
 800214c:	40020000 	.word	0x40020000
 8002150:	40020400 	.word	0x40020400
 8002154:	40020800 	.word	0x40020800
 8002158:	40020c00 	.word	0x40020c00
 800215c:	40021000 	.word	0x40021000
 8002160:	40021400 	.word	0x40021400
 8002164:	40021800 	.word	0x40021800
 8002168:	40021c00 	.word	0x40021c00
 800216c:	40013c00 	.word	0x40013c00

08002170 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	460b      	mov	r3, r1
 800217a:	807b      	strh	r3, [r7, #2]
 800217c:	4613      	mov	r3, r2
 800217e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002180:	787b      	ldrb	r3, [r7, #1]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d003      	beq.n	800218e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002186:	887a      	ldrh	r2, [r7, #2]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800218c:	e003      	b.n	8002196 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800218e:	887b      	ldrh	r3, [r7, #2]
 8002190:	041a      	lsls	r2, r3, #16
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	619a      	str	r2, [r3, #24]
}
 8002196:	bf00      	nop
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr

080021a2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021a2:	b480      	push	{r7}
 80021a4:	b085      	sub	sp, #20
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
 80021aa:	460b      	mov	r3, r1
 80021ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021b4:	887a      	ldrh	r2, [r7, #2]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	4013      	ands	r3, r2
 80021ba:	041a      	lsls	r2, r3, #16
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	43d9      	mvns	r1, r3
 80021c0:	887b      	ldrh	r3, [r7, #2]
 80021c2:	400b      	ands	r3, r1
 80021c4:	431a      	orrs	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	619a      	str	r2, [r3, #24]
}
 80021ca:	bf00      	nop
 80021cc:	3714      	adds	r7, #20
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
	...

080021d8 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80021de:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <HAL_PWR_EnableBkUpAccess+0x20>)
 80021e0:	2201      	movs	r2, #1
 80021e2:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80021e4:	4b05      	ldr	r3, [pc, #20]	; (80021fc <HAL_PWR_EnableBkUpAccess+0x24>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80021ea:	687b      	ldr	r3, [r7, #4]
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	420e0020 	.word	0x420e0020
 80021fc:	40007000 	.word	0x40007000

08002200 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8002206:	4b06      	ldr	r3, [pc, #24]	; (8002220 <HAL_PWR_DisableBkUpAccess+0x20>)
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 800220c:	4b05      	ldr	r3, [pc, #20]	; (8002224 <HAL_PWR_DisableBkUpAccess+0x24>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8002212:	687b      	ldr	r3, [r7, #4]
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr
 8002220:	420e0020 	.word	0x420e0020
 8002224:	40007000 	.word	0x40007000

08002228 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e267      	b.n	800270a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b00      	cmp	r3, #0
 8002244:	d075      	beq.n	8002332 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002246:	4b88      	ldr	r3, [pc, #544]	; (8002468 <HAL_RCC_OscConfig+0x240>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f003 030c 	and.w	r3, r3, #12
 800224e:	2b04      	cmp	r3, #4
 8002250:	d00c      	beq.n	800226c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002252:	4b85      	ldr	r3, [pc, #532]	; (8002468 <HAL_RCC_OscConfig+0x240>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800225a:	2b08      	cmp	r3, #8
 800225c:	d112      	bne.n	8002284 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800225e:	4b82      	ldr	r3, [pc, #520]	; (8002468 <HAL_RCC_OscConfig+0x240>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002266:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800226a:	d10b      	bne.n	8002284 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800226c:	4b7e      	ldr	r3, [pc, #504]	; (8002468 <HAL_RCC_OscConfig+0x240>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d05b      	beq.n	8002330 <HAL_RCC_OscConfig+0x108>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d157      	bne.n	8002330 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e242      	b.n	800270a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800228c:	d106      	bne.n	800229c <HAL_RCC_OscConfig+0x74>
 800228e:	4b76      	ldr	r3, [pc, #472]	; (8002468 <HAL_RCC_OscConfig+0x240>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a75      	ldr	r2, [pc, #468]	; (8002468 <HAL_RCC_OscConfig+0x240>)
 8002294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002298:	6013      	str	r3, [r2, #0]
 800229a:	e01d      	b.n	80022d8 <HAL_RCC_OscConfig+0xb0>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022a4:	d10c      	bne.n	80022c0 <HAL_RCC_OscConfig+0x98>
 80022a6:	4b70      	ldr	r3, [pc, #448]	; (8002468 <HAL_RCC_OscConfig+0x240>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a6f      	ldr	r2, [pc, #444]	; (8002468 <HAL_RCC_OscConfig+0x240>)
 80022ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022b0:	6013      	str	r3, [r2, #0]
 80022b2:	4b6d      	ldr	r3, [pc, #436]	; (8002468 <HAL_RCC_OscConfig+0x240>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a6c      	ldr	r2, [pc, #432]	; (8002468 <HAL_RCC_OscConfig+0x240>)
 80022b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022bc:	6013      	str	r3, [r2, #0]
 80022be:	e00b      	b.n	80022d8 <HAL_RCC_OscConfig+0xb0>
 80022c0:	4b69      	ldr	r3, [pc, #420]	; (8002468 <HAL_RCC_OscConfig+0x240>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a68      	ldr	r2, [pc, #416]	; (8002468 <HAL_RCC_OscConfig+0x240>)
 80022c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ca:	6013      	str	r3, [r2, #0]
 80022cc:	4b66      	ldr	r3, [pc, #408]	; (8002468 <HAL_RCC_OscConfig+0x240>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a65      	ldr	r2, [pc, #404]	; (8002468 <HAL_RCC_OscConfig+0x240>)
 80022d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d013      	beq.n	8002308 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e0:	f7ff fbd6 	bl	8001a90 <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022e8:	f7ff fbd2 	bl	8001a90 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b64      	cmp	r3, #100	; 0x64
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e207      	b.n	800270a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022fa:	4b5b      	ldr	r3, [pc, #364]	; (8002468 <HAL_RCC_OscConfig+0x240>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d0f0      	beq.n	80022e8 <HAL_RCC_OscConfig+0xc0>
 8002306:	e014      	b.n	8002332 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002308:	f7ff fbc2 	bl	8001a90 <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002310:	f7ff fbbe 	bl	8001a90 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b64      	cmp	r3, #100	; 0x64
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e1f3      	b.n	800270a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002322:	4b51      	ldr	r3, [pc, #324]	; (8002468 <HAL_RCC_OscConfig+0x240>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1f0      	bne.n	8002310 <HAL_RCC_OscConfig+0xe8>
 800232e:	e000      	b.n	8002332 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002330:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d063      	beq.n	8002406 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800233e:	4b4a      	ldr	r3, [pc, #296]	; (8002468 <HAL_RCC_OscConfig+0x240>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f003 030c 	and.w	r3, r3, #12
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00b      	beq.n	8002362 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800234a:	4b47      	ldr	r3, [pc, #284]	; (8002468 <HAL_RCC_OscConfig+0x240>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002352:	2b08      	cmp	r3, #8
 8002354:	d11c      	bne.n	8002390 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002356:	4b44      	ldr	r3, [pc, #272]	; (8002468 <HAL_RCC_OscConfig+0x240>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d116      	bne.n	8002390 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002362:	4b41      	ldr	r3, [pc, #260]	; (8002468 <HAL_RCC_OscConfig+0x240>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d005      	beq.n	800237a <HAL_RCC_OscConfig+0x152>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d001      	beq.n	800237a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e1c7      	b.n	800270a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800237a:	4b3b      	ldr	r3, [pc, #236]	; (8002468 <HAL_RCC_OscConfig+0x240>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	4937      	ldr	r1, [pc, #220]	; (8002468 <HAL_RCC_OscConfig+0x240>)
 800238a:	4313      	orrs	r3, r2
 800238c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800238e:	e03a      	b.n	8002406 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d020      	beq.n	80023da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002398:	4b34      	ldr	r3, [pc, #208]	; (800246c <HAL_RCC_OscConfig+0x244>)
 800239a:	2201      	movs	r2, #1
 800239c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800239e:	f7ff fb77 	bl	8001a90 <HAL_GetTick>
 80023a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a4:	e008      	b.n	80023b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023a6:	f7ff fb73 	bl	8001a90 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e1a8      	b.n	800270a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b8:	4b2b      	ldr	r3, [pc, #172]	; (8002468 <HAL_RCC_OscConfig+0x240>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d0f0      	beq.n	80023a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c4:	4b28      	ldr	r3, [pc, #160]	; (8002468 <HAL_RCC_OscConfig+0x240>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	4925      	ldr	r1, [pc, #148]	; (8002468 <HAL_RCC_OscConfig+0x240>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	600b      	str	r3, [r1, #0]
 80023d8:	e015      	b.n	8002406 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023da:	4b24      	ldr	r3, [pc, #144]	; (800246c <HAL_RCC_OscConfig+0x244>)
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e0:	f7ff fb56 	bl	8001a90 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023e8:	f7ff fb52 	bl	8001a90 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e187      	b.n	800270a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023fa:	4b1b      	ldr	r3, [pc, #108]	; (8002468 <HAL_RCC_OscConfig+0x240>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1f0      	bne.n	80023e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0308 	and.w	r3, r3, #8
 800240e:	2b00      	cmp	r3, #0
 8002410:	d036      	beq.n	8002480 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d016      	beq.n	8002448 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800241a:	4b15      	ldr	r3, [pc, #84]	; (8002470 <HAL_RCC_OscConfig+0x248>)
 800241c:	2201      	movs	r2, #1
 800241e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002420:	f7ff fb36 	bl	8001a90 <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002428:	f7ff fb32 	bl	8001a90 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e167      	b.n	800270a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800243a:	4b0b      	ldr	r3, [pc, #44]	; (8002468 <HAL_RCC_OscConfig+0x240>)
 800243c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d0f0      	beq.n	8002428 <HAL_RCC_OscConfig+0x200>
 8002446:	e01b      	b.n	8002480 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002448:	4b09      	ldr	r3, [pc, #36]	; (8002470 <HAL_RCC_OscConfig+0x248>)
 800244a:	2200      	movs	r2, #0
 800244c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800244e:	f7ff fb1f 	bl	8001a90 <HAL_GetTick>
 8002452:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002454:	e00e      	b.n	8002474 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002456:	f7ff fb1b 	bl	8001a90 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d907      	bls.n	8002474 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e150      	b.n	800270a <HAL_RCC_OscConfig+0x4e2>
 8002468:	40023800 	.word	0x40023800
 800246c:	42470000 	.word	0x42470000
 8002470:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002474:	4b88      	ldr	r3, [pc, #544]	; (8002698 <HAL_RCC_OscConfig+0x470>)
 8002476:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d1ea      	bne.n	8002456 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0304 	and.w	r3, r3, #4
 8002488:	2b00      	cmp	r3, #0
 800248a:	f000 8097 	beq.w	80025bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800248e:	2300      	movs	r3, #0
 8002490:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002492:	4b81      	ldr	r3, [pc, #516]	; (8002698 <HAL_RCC_OscConfig+0x470>)
 8002494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d10f      	bne.n	80024be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800249e:	2300      	movs	r3, #0
 80024a0:	60bb      	str	r3, [r7, #8]
 80024a2:	4b7d      	ldr	r3, [pc, #500]	; (8002698 <HAL_RCC_OscConfig+0x470>)
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	4a7c      	ldr	r2, [pc, #496]	; (8002698 <HAL_RCC_OscConfig+0x470>)
 80024a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ac:	6413      	str	r3, [r2, #64]	; 0x40
 80024ae:	4b7a      	ldr	r3, [pc, #488]	; (8002698 <HAL_RCC_OscConfig+0x470>)
 80024b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b6:	60bb      	str	r3, [r7, #8]
 80024b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ba:	2301      	movs	r3, #1
 80024bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024be:	4b77      	ldr	r3, [pc, #476]	; (800269c <HAL_RCC_OscConfig+0x474>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d118      	bne.n	80024fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024ca:	4b74      	ldr	r3, [pc, #464]	; (800269c <HAL_RCC_OscConfig+0x474>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a73      	ldr	r2, [pc, #460]	; (800269c <HAL_RCC_OscConfig+0x474>)
 80024d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024d6:	f7ff fadb 	bl	8001a90 <HAL_GetTick>
 80024da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024dc:	e008      	b.n	80024f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024de:	f7ff fad7 	bl	8001a90 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e10c      	b.n	800270a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f0:	4b6a      	ldr	r3, [pc, #424]	; (800269c <HAL_RCC_OscConfig+0x474>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d0f0      	beq.n	80024de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d106      	bne.n	8002512 <HAL_RCC_OscConfig+0x2ea>
 8002504:	4b64      	ldr	r3, [pc, #400]	; (8002698 <HAL_RCC_OscConfig+0x470>)
 8002506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002508:	4a63      	ldr	r2, [pc, #396]	; (8002698 <HAL_RCC_OscConfig+0x470>)
 800250a:	f043 0301 	orr.w	r3, r3, #1
 800250e:	6713      	str	r3, [r2, #112]	; 0x70
 8002510:	e01c      	b.n	800254c <HAL_RCC_OscConfig+0x324>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	2b05      	cmp	r3, #5
 8002518:	d10c      	bne.n	8002534 <HAL_RCC_OscConfig+0x30c>
 800251a:	4b5f      	ldr	r3, [pc, #380]	; (8002698 <HAL_RCC_OscConfig+0x470>)
 800251c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800251e:	4a5e      	ldr	r2, [pc, #376]	; (8002698 <HAL_RCC_OscConfig+0x470>)
 8002520:	f043 0304 	orr.w	r3, r3, #4
 8002524:	6713      	str	r3, [r2, #112]	; 0x70
 8002526:	4b5c      	ldr	r3, [pc, #368]	; (8002698 <HAL_RCC_OscConfig+0x470>)
 8002528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800252a:	4a5b      	ldr	r2, [pc, #364]	; (8002698 <HAL_RCC_OscConfig+0x470>)
 800252c:	f043 0301 	orr.w	r3, r3, #1
 8002530:	6713      	str	r3, [r2, #112]	; 0x70
 8002532:	e00b      	b.n	800254c <HAL_RCC_OscConfig+0x324>
 8002534:	4b58      	ldr	r3, [pc, #352]	; (8002698 <HAL_RCC_OscConfig+0x470>)
 8002536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002538:	4a57      	ldr	r2, [pc, #348]	; (8002698 <HAL_RCC_OscConfig+0x470>)
 800253a:	f023 0301 	bic.w	r3, r3, #1
 800253e:	6713      	str	r3, [r2, #112]	; 0x70
 8002540:	4b55      	ldr	r3, [pc, #340]	; (8002698 <HAL_RCC_OscConfig+0x470>)
 8002542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002544:	4a54      	ldr	r2, [pc, #336]	; (8002698 <HAL_RCC_OscConfig+0x470>)
 8002546:	f023 0304 	bic.w	r3, r3, #4
 800254a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d015      	beq.n	8002580 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002554:	f7ff fa9c 	bl	8001a90 <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800255a:	e00a      	b.n	8002572 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800255c:	f7ff fa98 	bl	8001a90 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	f241 3288 	movw	r2, #5000	; 0x1388
 800256a:	4293      	cmp	r3, r2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e0cb      	b.n	800270a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002572:	4b49      	ldr	r3, [pc, #292]	; (8002698 <HAL_RCC_OscConfig+0x470>)
 8002574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d0ee      	beq.n	800255c <HAL_RCC_OscConfig+0x334>
 800257e:	e014      	b.n	80025aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002580:	f7ff fa86 	bl	8001a90 <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002586:	e00a      	b.n	800259e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002588:	f7ff fa82 	bl	8001a90 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	f241 3288 	movw	r2, #5000	; 0x1388
 8002596:	4293      	cmp	r3, r2
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e0b5      	b.n	800270a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800259e:	4b3e      	ldr	r3, [pc, #248]	; (8002698 <HAL_RCC_OscConfig+0x470>)
 80025a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1ee      	bne.n	8002588 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025aa:	7dfb      	ldrb	r3, [r7, #23]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d105      	bne.n	80025bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025b0:	4b39      	ldr	r3, [pc, #228]	; (8002698 <HAL_RCC_OscConfig+0x470>)
 80025b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b4:	4a38      	ldr	r2, [pc, #224]	; (8002698 <HAL_RCC_OscConfig+0x470>)
 80025b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f000 80a1 	beq.w	8002708 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025c6:	4b34      	ldr	r3, [pc, #208]	; (8002698 <HAL_RCC_OscConfig+0x470>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f003 030c 	and.w	r3, r3, #12
 80025ce:	2b08      	cmp	r3, #8
 80025d0:	d05c      	beq.n	800268c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d141      	bne.n	800265e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025da:	4b31      	ldr	r3, [pc, #196]	; (80026a0 <HAL_RCC_OscConfig+0x478>)
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e0:	f7ff fa56 	bl	8001a90 <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025e8:	f7ff fa52 	bl	8001a90 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e087      	b.n	800270a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025fa:	4b27      	ldr	r3, [pc, #156]	; (8002698 <HAL_RCC_OscConfig+0x470>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1f0      	bne.n	80025e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	69da      	ldr	r2, [r3, #28]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a1b      	ldr	r3, [r3, #32]
 800260e:	431a      	orrs	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002614:	019b      	lsls	r3, r3, #6
 8002616:	431a      	orrs	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800261c:	085b      	lsrs	r3, r3, #1
 800261e:	3b01      	subs	r3, #1
 8002620:	041b      	lsls	r3, r3, #16
 8002622:	431a      	orrs	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002628:	061b      	lsls	r3, r3, #24
 800262a:	491b      	ldr	r1, [pc, #108]	; (8002698 <HAL_RCC_OscConfig+0x470>)
 800262c:	4313      	orrs	r3, r2
 800262e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002630:	4b1b      	ldr	r3, [pc, #108]	; (80026a0 <HAL_RCC_OscConfig+0x478>)
 8002632:	2201      	movs	r2, #1
 8002634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002636:	f7ff fa2b 	bl	8001a90 <HAL_GetTick>
 800263a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800263c:	e008      	b.n	8002650 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800263e:	f7ff fa27 	bl	8001a90 <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d901      	bls.n	8002650 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e05c      	b.n	800270a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002650:	4b11      	ldr	r3, [pc, #68]	; (8002698 <HAL_RCC_OscConfig+0x470>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d0f0      	beq.n	800263e <HAL_RCC_OscConfig+0x416>
 800265c:	e054      	b.n	8002708 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800265e:	4b10      	ldr	r3, [pc, #64]	; (80026a0 <HAL_RCC_OscConfig+0x478>)
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002664:	f7ff fa14 	bl	8001a90 <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800266a:	e008      	b.n	800267e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800266c:	f7ff fa10 	bl	8001a90 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b02      	cmp	r3, #2
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e045      	b.n	800270a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800267e:	4b06      	ldr	r3, [pc, #24]	; (8002698 <HAL_RCC_OscConfig+0x470>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1f0      	bne.n	800266c <HAL_RCC_OscConfig+0x444>
 800268a:	e03d      	b.n	8002708 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d107      	bne.n	80026a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e038      	b.n	800270a <HAL_RCC_OscConfig+0x4e2>
 8002698:	40023800 	.word	0x40023800
 800269c:	40007000 	.word	0x40007000
 80026a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026a4:	4b1b      	ldr	r3, [pc, #108]	; (8002714 <HAL_RCC_OscConfig+0x4ec>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d028      	beq.n	8002704 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026bc:	429a      	cmp	r2, r3
 80026be:	d121      	bne.n	8002704 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d11a      	bne.n	8002704 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026ce:	68fa      	ldr	r2, [r7, #12]
 80026d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026d4:	4013      	ands	r3, r2
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026dc:	4293      	cmp	r3, r2
 80026de:	d111      	bne.n	8002704 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ea:	085b      	lsrs	r3, r3, #1
 80026ec:	3b01      	subs	r3, #1
 80026ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d107      	bne.n	8002704 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002700:	429a      	cmp	r2, r3
 8002702:	d001      	beq.n	8002708 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e000      	b.n	800270a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3718      	adds	r7, #24
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	40023800 	.word	0x40023800

08002718 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d101      	bne.n	800272c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e0cc      	b.n	80028c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800272c:	4b68      	ldr	r3, [pc, #416]	; (80028d0 <HAL_RCC_ClockConfig+0x1b8>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0307 	and.w	r3, r3, #7
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	429a      	cmp	r2, r3
 8002738:	d90c      	bls.n	8002754 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800273a:	4b65      	ldr	r3, [pc, #404]	; (80028d0 <HAL_RCC_ClockConfig+0x1b8>)
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	b2d2      	uxtb	r2, r2
 8002740:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002742:	4b63      	ldr	r3, [pc, #396]	; (80028d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0307 	and.w	r3, r3, #7
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	429a      	cmp	r2, r3
 800274e:	d001      	beq.n	8002754 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e0b8      	b.n	80028c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d020      	beq.n	80027a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0304 	and.w	r3, r3, #4
 8002768:	2b00      	cmp	r3, #0
 800276a:	d005      	beq.n	8002778 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800276c:	4b59      	ldr	r3, [pc, #356]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	4a58      	ldr	r2, [pc, #352]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002772:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002776:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0308 	and.w	r3, r3, #8
 8002780:	2b00      	cmp	r3, #0
 8002782:	d005      	beq.n	8002790 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002784:	4b53      	ldr	r3, [pc, #332]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	4a52      	ldr	r2, [pc, #328]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 800278a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800278e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002790:	4b50      	ldr	r3, [pc, #320]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	494d      	ldr	r1, [pc, #308]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d044      	beq.n	8002838 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d107      	bne.n	80027c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027b6:	4b47      	ldr	r3, [pc, #284]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d119      	bne.n	80027f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e07f      	b.n	80028c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d003      	beq.n	80027d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027d2:	2b03      	cmp	r3, #3
 80027d4:	d107      	bne.n	80027e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027d6:	4b3f      	ldr	r3, [pc, #252]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d109      	bne.n	80027f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e06f      	b.n	80028c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e6:	4b3b      	ldr	r3, [pc, #236]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e067      	b.n	80028c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027f6:	4b37      	ldr	r3, [pc, #220]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f023 0203 	bic.w	r2, r3, #3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	4934      	ldr	r1, [pc, #208]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002804:	4313      	orrs	r3, r2
 8002806:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002808:	f7ff f942 	bl	8001a90 <HAL_GetTick>
 800280c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800280e:	e00a      	b.n	8002826 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002810:	f7ff f93e 	bl	8001a90 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	f241 3288 	movw	r2, #5000	; 0x1388
 800281e:	4293      	cmp	r3, r2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e04f      	b.n	80028c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002826:	4b2b      	ldr	r3, [pc, #172]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f003 020c 	and.w	r2, r3, #12
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	429a      	cmp	r2, r3
 8002836:	d1eb      	bne.n	8002810 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002838:	4b25      	ldr	r3, [pc, #148]	; (80028d0 <HAL_RCC_ClockConfig+0x1b8>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0307 	and.w	r3, r3, #7
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	429a      	cmp	r2, r3
 8002844:	d20c      	bcs.n	8002860 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002846:	4b22      	ldr	r3, [pc, #136]	; (80028d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002848:	683a      	ldr	r2, [r7, #0]
 800284a:	b2d2      	uxtb	r2, r2
 800284c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800284e:	4b20      	ldr	r3, [pc, #128]	; (80028d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0307 	and.w	r3, r3, #7
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	429a      	cmp	r2, r3
 800285a:	d001      	beq.n	8002860 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e032      	b.n	80028c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0304 	and.w	r3, r3, #4
 8002868:	2b00      	cmp	r3, #0
 800286a:	d008      	beq.n	800287e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800286c:	4b19      	ldr	r3, [pc, #100]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	4916      	ldr	r1, [pc, #88]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 800287a:	4313      	orrs	r3, r2
 800287c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0308 	and.w	r3, r3, #8
 8002886:	2b00      	cmp	r3, #0
 8002888:	d009      	beq.n	800289e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800288a:	4b12      	ldr	r3, [pc, #72]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	490e      	ldr	r1, [pc, #56]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 800289a:	4313      	orrs	r3, r2
 800289c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800289e:	f000 f821 	bl	80028e4 <HAL_RCC_GetSysClockFreq>
 80028a2:	4602      	mov	r2, r0
 80028a4:	4b0b      	ldr	r3, [pc, #44]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	091b      	lsrs	r3, r3, #4
 80028aa:	f003 030f 	and.w	r3, r3, #15
 80028ae:	490a      	ldr	r1, [pc, #40]	; (80028d8 <HAL_RCC_ClockConfig+0x1c0>)
 80028b0:	5ccb      	ldrb	r3, [r1, r3]
 80028b2:	fa22 f303 	lsr.w	r3, r2, r3
 80028b6:	4a09      	ldr	r2, [pc, #36]	; (80028dc <HAL_RCC_ClockConfig+0x1c4>)
 80028b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028ba:	4b09      	ldr	r3, [pc, #36]	; (80028e0 <HAL_RCC_ClockConfig+0x1c8>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4618      	mov	r0, r3
 80028c0:	f7ff f8a2 	bl	8001a08 <HAL_InitTick>

  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	40023c00 	.word	0x40023c00
 80028d4:	40023800 	.word	0x40023800
 80028d8:	080075a0 	.word	0x080075a0
 80028dc:	20000000 	.word	0x20000000
 80028e0:	20000004 	.word	0x20000004

080028e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028e8:	b090      	sub	sp, #64	; 0x40
 80028ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80028ec:	2300      	movs	r3, #0
 80028ee:	637b      	str	r3, [r7, #52]	; 0x34
 80028f0:	2300      	movs	r3, #0
 80028f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028f4:	2300      	movs	r3, #0
 80028f6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80028f8:	2300      	movs	r3, #0
 80028fa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028fc:	4b59      	ldr	r3, [pc, #356]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x180>)
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f003 030c 	and.w	r3, r3, #12
 8002904:	2b08      	cmp	r3, #8
 8002906:	d00d      	beq.n	8002924 <HAL_RCC_GetSysClockFreq+0x40>
 8002908:	2b08      	cmp	r3, #8
 800290a:	f200 80a1 	bhi.w	8002a50 <HAL_RCC_GetSysClockFreq+0x16c>
 800290e:	2b00      	cmp	r3, #0
 8002910:	d002      	beq.n	8002918 <HAL_RCC_GetSysClockFreq+0x34>
 8002912:	2b04      	cmp	r3, #4
 8002914:	d003      	beq.n	800291e <HAL_RCC_GetSysClockFreq+0x3a>
 8002916:	e09b      	b.n	8002a50 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002918:	4b53      	ldr	r3, [pc, #332]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x184>)
 800291a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800291c:	e09b      	b.n	8002a56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800291e:	4b53      	ldr	r3, [pc, #332]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x188>)
 8002920:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002922:	e098      	b.n	8002a56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002924:	4b4f      	ldr	r3, [pc, #316]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x180>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800292c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800292e:	4b4d      	ldr	r3, [pc, #308]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x180>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d028      	beq.n	800298c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800293a:	4b4a      	ldr	r3, [pc, #296]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x180>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	099b      	lsrs	r3, r3, #6
 8002940:	2200      	movs	r2, #0
 8002942:	623b      	str	r3, [r7, #32]
 8002944:	627a      	str	r2, [r7, #36]	; 0x24
 8002946:	6a3b      	ldr	r3, [r7, #32]
 8002948:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800294c:	2100      	movs	r1, #0
 800294e:	4b47      	ldr	r3, [pc, #284]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x188>)
 8002950:	fb03 f201 	mul.w	r2, r3, r1
 8002954:	2300      	movs	r3, #0
 8002956:	fb00 f303 	mul.w	r3, r0, r3
 800295a:	4413      	add	r3, r2
 800295c:	4a43      	ldr	r2, [pc, #268]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x188>)
 800295e:	fba0 1202 	umull	r1, r2, r0, r2
 8002962:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002964:	460a      	mov	r2, r1
 8002966:	62ba      	str	r2, [r7, #40]	; 0x28
 8002968:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800296a:	4413      	add	r3, r2
 800296c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800296e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002970:	2200      	movs	r2, #0
 8002972:	61bb      	str	r3, [r7, #24]
 8002974:	61fa      	str	r2, [r7, #28]
 8002976:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800297a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800297e:	f7fd fc77 	bl	8000270 <__aeabi_uldivmod>
 8002982:	4602      	mov	r2, r0
 8002984:	460b      	mov	r3, r1
 8002986:	4613      	mov	r3, r2
 8002988:	63fb      	str	r3, [r7, #60]	; 0x3c
 800298a:	e053      	b.n	8002a34 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800298c:	4b35      	ldr	r3, [pc, #212]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x180>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	099b      	lsrs	r3, r3, #6
 8002992:	2200      	movs	r2, #0
 8002994:	613b      	str	r3, [r7, #16]
 8002996:	617a      	str	r2, [r7, #20]
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800299e:	f04f 0b00 	mov.w	fp, #0
 80029a2:	4652      	mov	r2, sl
 80029a4:	465b      	mov	r3, fp
 80029a6:	f04f 0000 	mov.w	r0, #0
 80029aa:	f04f 0100 	mov.w	r1, #0
 80029ae:	0159      	lsls	r1, r3, #5
 80029b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029b4:	0150      	lsls	r0, r2, #5
 80029b6:	4602      	mov	r2, r0
 80029b8:	460b      	mov	r3, r1
 80029ba:	ebb2 080a 	subs.w	r8, r2, sl
 80029be:	eb63 090b 	sbc.w	r9, r3, fp
 80029c2:	f04f 0200 	mov.w	r2, #0
 80029c6:	f04f 0300 	mov.w	r3, #0
 80029ca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80029ce:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80029d2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80029d6:	ebb2 0408 	subs.w	r4, r2, r8
 80029da:	eb63 0509 	sbc.w	r5, r3, r9
 80029de:	f04f 0200 	mov.w	r2, #0
 80029e2:	f04f 0300 	mov.w	r3, #0
 80029e6:	00eb      	lsls	r3, r5, #3
 80029e8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029ec:	00e2      	lsls	r2, r4, #3
 80029ee:	4614      	mov	r4, r2
 80029f0:	461d      	mov	r5, r3
 80029f2:	eb14 030a 	adds.w	r3, r4, sl
 80029f6:	603b      	str	r3, [r7, #0]
 80029f8:	eb45 030b 	adc.w	r3, r5, fp
 80029fc:	607b      	str	r3, [r7, #4]
 80029fe:	f04f 0200 	mov.w	r2, #0
 8002a02:	f04f 0300 	mov.w	r3, #0
 8002a06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a0a:	4629      	mov	r1, r5
 8002a0c:	028b      	lsls	r3, r1, #10
 8002a0e:	4621      	mov	r1, r4
 8002a10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a14:	4621      	mov	r1, r4
 8002a16:	028a      	lsls	r2, r1, #10
 8002a18:	4610      	mov	r0, r2
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a1e:	2200      	movs	r2, #0
 8002a20:	60bb      	str	r3, [r7, #8]
 8002a22:	60fa      	str	r2, [r7, #12]
 8002a24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a28:	f7fd fc22 	bl	8000270 <__aeabi_uldivmod>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	460b      	mov	r3, r1
 8002a30:	4613      	mov	r3, r2
 8002a32:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a34:	4b0b      	ldr	r3, [pc, #44]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	0c1b      	lsrs	r3, r3, #16
 8002a3a:	f003 0303 	and.w	r3, r3, #3
 8002a3e:	3301      	adds	r3, #1
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002a44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a4c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a4e:	e002      	b.n	8002a56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a50:	4b05      	ldr	r3, [pc, #20]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a52:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3740      	adds	r7, #64	; 0x40
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a62:	bf00      	nop
 8002a64:	40023800 	.word	0x40023800
 8002a68:	00f42400 	.word	0x00f42400
 8002a6c:	017d7840 	.word	0x017d7840

08002a70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a74:	4b03      	ldr	r3, [pc, #12]	; (8002a84 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a76:	681b      	ldr	r3, [r3, #0]
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	20000000 	.word	0x20000000

08002a88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a8c:	f7ff fff0 	bl	8002a70 <HAL_RCC_GetHCLKFreq>
 8002a90:	4602      	mov	r2, r0
 8002a92:	4b05      	ldr	r3, [pc, #20]	; (8002aa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	0a9b      	lsrs	r3, r3, #10
 8002a98:	f003 0307 	and.w	r3, r3, #7
 8002a9c:	4903      	ldr	r1, [pc, #12]	; (8002aac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a9e:	5ccb      	ldrb	r3, [r1, r3]
 8002aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	080075b0 	.word	0x080075b0

08002ab0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ab4:	f7ff ffdc 	bl	8002a70 <HAL_RCC_GetHCLKFreq>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	4b05      	ldr	r3, [pc, #20]	; (8002ad0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	0b5b      	lsrs	r3, r3, #13
 8002ac0:	f003 0307 	and.w	r3, r3, #7
 8002ac4:	4903      	ldr	r1, [pc, #12]	; (8002ad4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ac6:	5ccb      	ldrb	r3, [r1, r3]
 8002ac8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	40023800 	.word	0x40023800
 8002ad4:	080075b0 	.word	0x080075b0

08002ad8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e041      	b.n	8002b6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d106      	bne.n	8002b04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f7fe fd3c 	bl	800157c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2202      	movs	r2, #2
 8002b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	3304      	adds	r3, #4
 8002b14:	4619      	mov	r1, r3
 8002b16:	4610      	mov	r0, r2
 8002b18:	f000 fc0c 	bl	8003334 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b082      	sub	sp, #8
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d101      	bne.n	8002b88 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e041      	b.n	8002c0c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d106      	bne.n	8002ba2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f000 f839 	bl	8002c14 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2202      	movs	r2, #2
 8002ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	3304      	adds	r3, #4
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	4610      	mov	r0, r2
 8002bb6:	f000 fbbd 	bl	8003334 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2201      	movs	r2, #1
 8002be6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2201      	movs	r2, #1
 8002bee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d109      	bne.n	8002c4c <HAL_TIM_PWM_Start+0x24>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	bf14      	ite	ne
 8002c44:	2301      	movne	r3, #1
 8002c46:	2300      	moveq	r3, #0
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	e022      	b.n	8002c92 <HAL_TIM_PWM_Start+0x6a>
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	2b04      	cmp	r3, #4
 8002c50:	d109      	bne.n	8002c66 <HAL_TIM_PWM_Start+0x3e>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	bf14      	ite	ne
 8002c5e:	2301      	movne	r3, #1
 8002c60:	2300      	moveq	r3, #0
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	e015      	b.n	8002c92 <HAL_TIM_PWM_Start+0x6a>
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	2b08      	cmp	r3, #8
 8002c6a:	d109      	bne.n	8002c80 <HAL_TIM_PWM_Start+0x58>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	bf14      	ite	ne
 8002c78:	2301      	movne	r3, #1
 8002c7a:	2300      	moveq	r3, #0
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	e008      	b.n	8002c92 <HAL_TIM_PWM_Start+0x6a>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	bf14      	ite	ne
 8002c8c:	2301      	movne	r3, #1
 8002c8e:	2300      	moveq	r3, #0
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e07c      	b.n	8002d94 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d104      	bne.n	8002caa <HAL_TIM_PWM_Start+0x82>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2202      	movs	r2, #2
 8002ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ca8:	e013      	b.n	8002cd2 <HAL_TIM_PWM_Start+0xaa>
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	2b04      	cmp	r3, #4
 8002cae:	d104      	bne.n	8002cba <HAL_TIM_PWM_Start+0x92>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cb8:	e00b      	b.n	8002cd2 <HAL_TIM_PWM_Start+0xaa>
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	2b08      	cmp	r3, #8
 8002cbe:	d104      	bne.n	8002cca <HAL_TIM_PWM_Start+0xa2>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cc8:	e003      	b.n	8002cd2 <HAL_TIM_PWM_Start+0xaa>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2202      	movs	r2, #2
 8002cce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	6839      	ldr	r1, [r7, #0]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f000 fe14 	bl	8003908 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a2d      	ldr	r2, [pc, #180]	; (8002d9c <HAL_TIM_PWM_Start+0x174>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d004      	beq.n	8002cf4 <HAL_TIM_PWM_Start+0xcc>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a2c      	ldr	r2, [pc, #176]	; (8002da0 <HAL_TIM_PWM_Start+0x178>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d101      	bne.n	8002cf8 <HAL_TIM_PWM_Start+0xd0>
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e000      	b.n	8002cfa <HAL_TIM_PWM_Start+0xd2>
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d007      	beq.n	8002d0e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d0c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a22      	ldr	r2, [pc, #136]	; (8002d9c <HAL_TIM_PWM_Start+0x174>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d022      	beq.n	8002d5e <HAL_TIM_PWM_Start+0x136>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d20:	d01d      	beq.n	8002d5e <HAL_TIM_PWM_Start+0x136>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a1f      	ldr	r2, [pc, #124]	; (8002da4 <HAL_TIM_PWM_Start+0x17c>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d018      	beq.n	8002d5e <HAL_TIM_PWM_Start+0x136>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a1d      	ldr	r2, [pc, #116]	; (8002da8 <HAL_TIM_PWM_Start+0x180>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d013      	beq.n	8002d5e <HAL_TIM_PWM_Start+0x136>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a1c      	ldr	r2, [pc, #112]	; (8002dac <HAL_TIM_PWM_Start+0x184>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d00e      	beq.n	8002d5e <HAL_TIM_PWM_Start+0x136>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a16      	ldr	r2, [pc, #88]	; (8002da0 <HAL_TIM_PWM_Start+0x178>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d009      	beq.n	8002d5e <HAL_TIM_PWM_Start+0x136>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a18      	ldr	r2, [pc, #96]	; (8002db0 <HAL_TIM_PWM_Start+0x188>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d004      	beq.n	8002d5e <HAL_TIM_PWM_Start+0x136>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a16      	ldr	r2, [pc, #88]	; (8002db4 <HAL_TIM_PWM_Start+0x18c>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d111      	bne.n	8002d82 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f003 0307 	and.w	r3, r3, #7
 8002d68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2b06      	cmp	r3, #6
 8002d6e:	d010      	beq.n	8002d92 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f042 0201 	orr.w	r2, r2, #1
 8002d7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d80:	e007      	b.n	8002d92 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f042 0201 	orr.w	r2, r2, #1
 8002d90:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	40010000 	.word	0x40010000
 8002da0:	40010400 	.word	0x40010400
 8002da4:	40000400 	.word	0x40000400
 8002da8:	40000800 	.word	0x40000800
 8002dac:	40000c00 	.word	0x40000c00
 8002db0:	40014000 	.word	0x40014000
 8002db4:	40001800 	.word	0x40001800

08002db8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d101      	bne.n	8002dcc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e097      	b.n	8002efc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d106      	bne.n	8002de6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f7fe fc03 	bl	80015ec <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2202      	movs	r2, #2
 8002dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	6812      	ldr	r2, [r2, #0]
 8002df8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002dfc:	f023 0307 	bic.w	r3, r3, #7
 8002e00:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	3304      	adds	r3, #4
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	4610      	mov	r0, r2
 8002e0e:	f000 fa91 	bl	8003334 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6a1b      	ldr	r3, [r3, #32]
 8002e28:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	697a      	ldr	r2, [r7, #20]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e3a:	f023 0303 	bic.w	r3, r3, #3
 8002e3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	689a      	ldr	r2, [r3, #8]
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	021b      	lsls	r3, r3, #8
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002e58:	f023 030c 	bic.w	r3, r3, #12
 8002e5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	68da      	ldr	r2, [r3, #12]
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	69db      	ldr	r3, [r3, #28]
 8002e72:	021b      	lsls	r3, r3, #8
 8002e74:	4313      	orrs	r3, r2
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	011a      	lsls	r2, r3, #4
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	031b      	lsls	r3, r3, #12
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002e96:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002e9e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	685a      	ldr	r2, [r3, #4]
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	695b      	ldr	r3, [r3, #20]
 8002ea8:	011b      	lsls	r3, r3, #4
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	697a      	ldr	r2, [r7, #20]
 8002eb8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3718      	adds	r7, #24
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f14:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002f1c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f24:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002f2c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d110      	bne.n	8002f56 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002f34:	7bfb      	ldrb	r3, [r7, #15]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d102      	bne.n	8002f40 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002f3a:	7b7b      	ldrb	r3, [r7, #13]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d001      	beq.n	8002f44 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e069      	b.n	8003018 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2202      	movs	r2, #2
 8002f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2202      	movs	r2, #2
 8002f50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f54:	e031      	b.n	8002fba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	2b04      	cmp	r3, #4
 8002f5a:	d110      	bne.n	8002f7e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002f5c:	7bbb      	ldrb	r3, [r7, #14]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d102      	bne.n	8002f68 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002f62:	7b3b      	ldrb	r3, [r7, #12]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d001      	beq.n	8002f6c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e055      	b.n	8003018 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2202      	movs	r2, #2
 8002f70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2202      	movs	r2, #2
 8002f78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f7c:	e01d      	b.n	8002fba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002f7e:	7bfb      	ldrb	r3, [r7, #15]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d108      	bne.n	8002f96 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002f84:	7bbb      	ldrb	r3, [r7, #14]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d105      	bne.n	8002f96 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002f8a:	7b7b      	ldrb	r3, [r7, #13]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d102      	bne.n	8002f96 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002f90:	7b3b      	ldrb	r3, [r7, #12]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d001      	beq.n	8002f9a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e03e      	b.n	8003018 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2202      	movs	r2, #2
 8002f9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2202      	movs	r2, #2
 8002fa6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2202      	movs	r2, #2
 8002fae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2202      	movs	r2, #2
 8002fb6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d003      	beq.n	8002fc8 <HAL_TIM_Encoder_Start+0xc4>
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	2b04      	cmp	r3, #4
 8002fc4:	d008      	beq.n	8002fd8 <HAL_TIM_Encoder_Start+0xd4>
 8002fc6:	e00f      	b.n	8002fe8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	2100      	movs	r1, #0
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f000 fc99 	bl	8003908 <TIM_CCxChannelCmd>
      break;
 8002fd6:	e016      	b.n	8003006 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	2104      	movs	r1, #4
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f000 fc91 	bl	8003908 <TIM_CCxChannelCmd>
      break;
 8002fe6:	e00e      	b.n	8003006 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2201      	movs	r2, #1
 8002fee:	2100      	movs	r1, #0
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f000 fc89 	bl	8003908 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	2104      	movs	r1, #4
 8002ffe:	4618      	mov	r0, r3
 8003000:	f000 fc82 	bl	8003908 <TIM_CCxChannelCmd>
      break;
 8003004:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f042 0201 	orr.w	r2, r2, #1
 8003014:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800302c:	2300      	movs	r3, #0
 800302e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003036:	2b01      	cmp	r3, #1
 8003038:	d101      	bne.n	800303e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800303a:	2302      	movs	r3, #2
 800303c:	e0ae      	b.n	800319c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2201      	movs	r2, #1
 8003042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2b0c      	cmp	r3, #12
 800304a:	f200 809f 	bhi.w	800318c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800304e:	a201      	add	r2, pc, #4	; (adr r2, 8003054 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003054:	08003089 	.word	0x08003089
 8003058:	0800318d 	.word	0x0800318d
 800305c:	0800318d 	.word	0x0800318d
 8003060:	0800318d 	.word	0x0800318d
 8003064:	080030c9 	.word	0x080030c9
 8003068:	0800318d 	.word	0x0800318d
 800306c:	0800318d 	.word	0x0800318d
 8003070:	0800318d 	.word	0x0800318d
 8003074:	0800310b 	.word	0x0800310b
 8003078:	0800318d 	.word	0x0800318d
 800307c:	0800318d 	.word	0x0800318d
 8003080:	0800318d 	.word	0x0800318d
 8003084:	0800314b 	.word	0x0800314b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68b9      	ldr	r1, [r7, #8]
 800308e:	4618      	mov	r0, r3
 8003090:	f000 f9f0 	bl	8003474 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	699a      	ldr	r2, [r3, #24]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f042 0208 	orr.w	r2, r2, #8
 80030a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	699a      	ldr	r2, [r3, #24]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f022 0204 	bic.w	r2, r2, #4
 80030b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6999      	ldr	r1, [r3, #24]
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	691a      	ldr	r2, [r3, #16]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	430a      	orrs	r2, r1
 80030c4:	619a      	str	r2, [r3, #24]
      break;
 80030c6:	e064      	b.n	8003192 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68b9      	ldr	r1, [r7, #8]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 fa40 	bl	8003554 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	699a      	ldr	r2, [r3, #24]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	699a      	ldr	r2, [r3, #24]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	6999      	ldr	r1, [r3, #24]
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	021a      	lsls	r2, r3, #8
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	430a      	orrs	r2, r1
 8003106:	619a      	str	r2, [r3, #24]
      break;
 8003108:	e043      	b.n	8003192 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68b9      	ldr	r1, [r7, #8]
 8003110:	4618      	mov	r0, r3
 8003112:	f000 fa95 	bl	8003640 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	69da      	ldr	r2, [r3, #28]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f042 0208 	orr.w	r2, r2, #8
 8003124:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	69da      	ldr	r2, [r3, #28]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f022 0204 	bic.w	r2, r2, #4
 8003134:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	69d9      	ldr	r1, [r3, #28]
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	691a      	ldr	r2, [r3, #16]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	430a      	orrs	r2, r1
 8003146:	61da      	str	r2, [r3, #28]
      break;
 8003148:	e023      	b.n	8003192 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68b9      	ldr	r1, [r7, #8]
 8003150:	4618      	mov	r0, r3
 8003152:	f000 fae9 	bl	8003728 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	69da      	ldr	r2, [r3, #28]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003164:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	69da      	ldr	r2, [r3, #28]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003174:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	69d9      	ldr	r1, [r3, #28]
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	691b      	ldr	r3, [r3, #16]
 8003180:	021a      	lsls	r2, r3, #8
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	430a      	orrs	r2, r1
 8003188:	61da      	str	r2, [r3, #28]
      break;
 800318a:	e002      	b.n	8003192 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	75fb      	strb	r3, [r7, #23]
      break;
 8003190:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800319a:	7dfb      	ldrb	r3, [r7, #23]
}
 800319c:	4618      	mov	r0, r3
 800319e:	3718      	adds	r7, #24
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031ae:	2300      	movs	r3, #0
 80031b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d101      	bne.n	80031c0 <HAL_TIM_ConfigClockSource+0x1c>
 80031bc:	2302      	movs	r3, #2
 80031be:	e0b4      	b.n	800332a <HAL_TIM_ConfigClockSource+0x186>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2202      	movs	r2, #2
 80031cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80031de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68ba      	ldr	r2, [r7, #8]
 80031ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031f8:	d03e      	beq.n	8003278 <HAL_TIM_ConfigClockSource+0xd4>
 80031fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031fe:	f200 8087 	bhi.w	8003310 <HAL_TIM_ConfigClockSource+0x16c>
 8003202:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003206:	f000 8086 	beq.w	8003316 <HAL_TIM_ConfigClockSource+0x172>
 800320a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800320e:	d87f      	bhi.n	8003310 <HAL_TIM_ConfigClockSource+0x16c>
 8003210:	2b70      	cmp	r3, #112	; 0x70
 8003212:	d01a      	beq.n	800324a <HAL_TIM_ConfigClockSource+0xa6>
 8003214:	2b70      	cmp	r3, #112	; 0x70
 8003216:	d87b      	bhi.n	8003310 <HAL_TIM_ConfigClockSource+0x16c>
 8003218:	2b60      	cmp	r3, #96	; 0x60
 800321a:	d050      	beq.n	80032be <HAL_TIM_ConfigClockSource+0x11a>
 800321c:	2b60      	cmp	r3, #96	; 0x60
 800321e:	d877      	bhi.n	8003310 <HAL_TIM_ConfigClockSource+0x16c>
 8003220:	2b50      	cmp	r3, #80	; 0x50
 8003222:	d03c      	beq.n	800329e <HAL_TIM_ConfigClockSource+0xfa>
 8003224:	2b50      	cmp	r3, #80	; 0x50
 8003226:	d873      	bhi.n	8003310 <HAL_TIM_ConfigClockSource+0x16c>
 8003228:	2b40      	cmp	r3, #64	; 0x40
 800322a:	d058      	beq.n	80032de <HAL_TIM_ConfigClockSource+0x13a>
 800322c:	2b40      	cmp	r3, #64	; 0x40
 800322e:	d86f      	bhi.n	8003310 <HAL_TIM_ConfigClockSource+0x16c>
 8003230:	2b30      	cmp	r3, #48	; 0x30
 8003232:	d064      	beq.n	80032fe <HAL_TIM_ConfigClockSource+0x15a>
 8003234:	2b30      	cmp	r3, #48	; 0x30
 8003236:	d86b      	bhi.n	8003310 <HAL_TIM_ConfigClockSource+0x16c>
 8003238:	2b20      	cmp	r3, #32
 800323a:	d060      	beq.n	80032fe <HAL_TIM_ConfigClockSource+0x15a>
 800323c:	2b20      	cmp	r3, #32
 800323e:	d867      	bhi.n	8003310 <HAL_TIM_ConfigClockSource+0x16c>
 8003240:	2b00      	cmp	r3, #0
 8003242:	d05c      	beq.n	80032fe <HAL_TIM_ConfigClockSource+0x15a>
 8003244:	2b10      	cmp	r3, #16
 8003246:	d05a      	beq.n	80032fe <HAL_TIM_ConfigClockSource+0x15a>
 8003248:	e062      	b.n	8003310 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6818      	ldr	r0, [r3, #0]
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	6899      	ldr	r1, [r3, #8]
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	685a      	ldr	r2, [r3, #4]
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	f000 fb35 	bl	80038c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800326c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68ba      	ldr	r2, [r7, #8]
 8003274:	609a      	str	r2, [r3, #8]
      break;
 8003276:	e04f      	b.n	8003318 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6818      	ldr	r0, [r3, #0]
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	6899      	ldr	r1, [r3, #8]
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	f000 fb1e 	bl	80038c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	689a      	ldr	r2, [r3, #8]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800329a:	609a      	str	r2, [r3, #8]
      break;
 800329c:	e03c      	b.n	8003318 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6818      	ldr	r0, [r3, #0]
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	6859      	ldr	r1, [r3, #4]
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	461a      	mov	r2, r3
 80032ac:	f000 fa92 	bl	80037d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2150      	movs	r1, #80	; 0x50
 80032b6:	4618      	mov	r0, r3
 80032b8:	f000 faeb 	bl	8003892 <TIM_ITRx_SetConfig>
      break;
 80032bc:	e02c      	b.n	8003318 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6818      	ldr	r0, [r3, #0]
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	6859      	ldr	r1, [r3, #4]
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	461a      	mov	r2, r3
 80032cc:	f000 fab1 	bl	8003832 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2160      	movs	r1, #96	; 0x60
 80032d6:	4618      	mov	r0, r3
 80032d8:	f000 fadb 	bl	8003892 <TIM_ITRx_SetConfig>
      break;
 80032dc:	e01c      	b.n	8003318 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6818      	ldr	r0, [r3, #0]
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	6859      	ldr	r1, [r3, #4]
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	461a      	mov	r2, r3
 80032ec:	f000 fa72 	bl	80037d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2140      	movs	r1, #64	; 0x40
 80032f6:	4618      	mov	r0, r3
 80032f8:	f000 facb 	bl	8003892 <TIM_ITRx_SetConfig>
      break;
 80032fc:	e00c      	b.n	8003318 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4619      	mov	r1, r3
 8003308:	4610      	mov	r0, r2
 800330a:	f000 fac2 	bl	8003892 <TIM_ITRx_SetConfig>
      break;
 800330e:	e003      	b.n	8003318 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	73fb      	strb	r3, [r7, #15]
      break;
 8003314:	e000      	b.n	8003318 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003316:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003328:	7bfb      	ldrb	r3, [r7, #15]
}
 800332a:	4618      	mov	r0, r3
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
	...

08003334 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003334:	b480      	push	{r7}
 8003336:	b085      	sub	sp, #20
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4a40      	ldr	r2, [pc, #256]	; (8003448 <TIM_Base_SetConfig+0x114>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d013      	beq.n	8003374 <TIM_Base_SetConfig+0x40>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003352:	d00f      	beq.n	8003374 <TIM_Base_SetConfig+0x40>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a3d      	ldr	r2, [pc, #244]	; (800344c <TIM_Base_SetConfig+0x118>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d00b      	beq.n	8003374 <TIM_Base_SetConfig+0x40>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a3c      	ldr	r2, [pc, #240]	; (8003450 <TIM_Base_SetConfig+0x11c>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d007      	beq.n	8003374 <TIM_Base_SetConfig+0x40>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a3b      	ldr	r2, [pc, #236]	; (8003454 <TIM_Base_SetConfig+0x120>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d003      	beq.n	8003374 <TIM_Base_SetConfig+0x40>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a3a      	ldr	r2, [pc, #232]	; (8003458 <TIM_Base_SetConfig+0x124>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d108      	bne.n	8003386 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800337a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	4313      	orrs	r3, r2
 8003384:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a2f      	ldr	r2, [pc, #188]	; (8003448 <TIM_Base_SetConfig+0x114>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d02b      	beq.n	80033e6 <TIM_Base_SetConfig+0xb2>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003394:	d027      	beq.n	80033e6 <TIM_Base_SetConfig+0xb2>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a2c      	ldr	r2, [pc, #176]	; (800344c <TIM_Base_SetConfig+0x118>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d023      	beq.n	80033e6 <TIM_Base_SetConfig+0xb2>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a2b      	ldr	r2, [pc, #172]	; (8003450 <TIM_Base_SetConfig+0x11c>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d01f      	beq.n	80033e6 <TIM_Base_SetConfig+0xb2>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a2a      	ldr	r2, [pc, #168]	; (8003454 <TIM_Base_SetConfig+0x120>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d01b      	beq.n	80033e6 <TIM_Base_SetConfig+0xb2>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a29      	ldr	r2, [pc, #164]	; (8003458 <TIM_Base_SetConfig+0x124>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d017      	beq.n	80033e6 <TIM_Base_SetConfig+0xb2>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a28      	ldr	r2, [pc, #160]	; (800345c <TIM_Base_SetConfig+0x128>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d013      	beq.n	80033e6 <TIM_Base_SetConfig+0xb2>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a27      	ldr	r2, [pc, #156]	; (8003460 <TIM_Base_SetConfig+0x12c>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d00f      	beq.n	80033e6 <TIM_Base_SetConfig+0xb2>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a26      	ldr	r2, [pc, #152]	; (8003464 <TIM_Base_SetConfig+0x130>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d00b      	beq.n	80033e6 <TIM_Base_SetConfig+0xb2>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a25      	ldr	r2, [pc, #148]	; (8003468 <TIM_Base_SetConfig+0x134>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d007      	beq.n	80033e6 <TIM_Base_SetConfig+0xb2>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a24      	ldr	r2, [pc, #144]	; (800346c <TIM_Base_SetConfig+0x138>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d003      	beq.n	80033e6 <TIM_Base_SetConfig+0xb2>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a23      	ldr	r2, [pc, #140]	; (8003470 <TIM_Base_SetConfig+0x13c>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d108      	bne.n	80033f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	4313      	orrs	r3, r2
 8003404:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a0a      	ldr	r2, [pc, #40]	; (8003448 <TIM_Base_SetConfig+0x114>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d003      	beq.n	800342c <TIM_Base_SetConfig+0xf8>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a0c      	ldr	r2, [pc, #48]	; (8003458 <TIM_Base_SetConfig+0x124>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d103      	bne.n	8003434 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	691a      	ldr	r2, [r3, #16]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	615a      	str	r2, [r3, #20]
}
 800343a:	bf00      	nop
 800343c:	3714      	adds	r7, #20
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	40010000 	.word	0x40010000
 800344c:	40000400 	.word	0x40000400
 8003450:	40000800 	.word	0x40000800
 8003454:	40000c00 	.word	0x40000c00
 8003458:	40010400 	.word	0x40010400
 800345c:	40014000 	.word	0x40014000
 8003460:	40014400 	.word	0x40014400
 8003464:	40014800 	.word	0x40014800
 8003468:	40001800 	.word	0x40001800
 800346c:	40001c00 	.word	0x40001c00
 8003470:	40002000 	.word	0x40002000

08003474 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003474:	b480      	push	{r7}
 8003476:	b087      	sub	sp, #28
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	f023 0201 	bic.w	r2, r3, #1
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f023 0303 	bic.w	r3, r3, #3
 80034aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	f023 0302 	bic.w	r3, r3, #2
 80034bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a20      	ldr	r2, [pc, #128]	; (800354c <TIM_OC1_SetConfig+0xd8>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d003      	beq.n	80034d8 <TIM_OC1_SetConfig+0x64>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4a1f      	ldr	r2, [pc, #124]	; (8003550 <TIM_OC1_SetConfig+0xdc>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d10c      	bne.n	80034f2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	f023 0308 	bic.w	r3, r3, #8
 80034de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	697a      	ldr	r2, [r7, #20]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	f023 0304 	bic.w	r3, r3, #4
 80034f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a15      	ldr	r2, [pc, #84]	; (800354c <TIM_OC1_SetConfig+0xd8>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d003      	beq.n	8003502 <TIM_OC1_SetConfig+0x8e>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a14      	ldr	r2, [pc, #80]	; (8003550 <TIM_OC1_SetConfig+0xdc>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d111      	bne.n	8003526 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003508:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003510:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	4313      	orrs	r3, r2
 800351a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	4313      	orrs	r3, r2
 8003524:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685a      	ldr	r2, [r3, #4]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	697a      	ldr	r2, [r7, #20]
 800353e:	621a      	str	r2, [r3, #32]
}
 8003540:	bf00      	nop
 8003542:	371c      	adds	r7, #28
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr
 800354c:	40010000 	.word	0x40010000
 8003550:	40010400 	.word	0x40010400

08003554 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003554:	b480      	push	{r7}
 8003556:	b087      	sub	sp, #28
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a1b      	ldr	r3, [r3, #32]
 8003562:	f023 0210 	bic.w	r2, r3, #16
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003582:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800358a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	021b      	lsls	r3, r3, #8
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	4313      	orrs	r3, r2
 8003596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	f023 0320 	bic.w	r3, r3, #32
 800359e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	011b      	lsls	r3, r3, #4
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a22      	ldr	r2, [pc, #136]	; (8003638 <TIM_OC2_SetConfig+0xe4>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d003      	beq.n	80035bc <TIM_OC2_SetConfig+0x68>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a21      	ldr	r2, [pc, #132]	; (800363c <TIM_OC2_SetConfig+0xe8>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d10d      	bne.n	80035d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	011b      	lsls	r3, r3, #4
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a17      	ldr	r2, [pc, #92]	; (8003638 <TIM_OC2_SetConfig+0xe4>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d003      	beq.n	80035e8 <TIM_OC2_SetConfig+0x94>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a16      	ldr	r2, [pc, #88]	; (800363c <TIM_OC2_SetConfig+0xe8>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d113      	bne.n	8003610 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	695b      	ldr	r3, [r3, #20]
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	4313      	orrs	r3, r2
 8003602:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	4313      	orrs	r3, r2
 800360e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685a      	ldr	r2, [r3, #4]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	697a      	ldr	r2, [r7, #20]
 8003628:	621a      	str	r2, [r3, #32]
}
 800362a:	bf00      	nop
 800362c:	371c      	adds	r7, #28
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	40010000 	.word	0x40010000
 800363c:	40010400 	.word	0x40010400

08003640 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003640:	b480      	push	{r7}
 8003642:	b087      	sub	sp, #28
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a1b      	ldr	r3, [r3, #32]
 800364e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	69db      	ldr	r3, [r3, #28]
 8003666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800366e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f023 0303 	bic.w	r3, r3, #3
 8003676:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	4313      	orrs	r3, r2
 8003680:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003688:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	021b      	lsls	r3, r3, #8
 8003690:	697a      	ldr	r2, [r7, #20]
 8003692:	4313      	orrs	r3, r2
 8003694:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a21      	ldr	r2, [pc, #132]	; (8003720 <TIM_OC3_SetConfig+0xe0>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d003      	beq.n	80036a6 <TIM_OC3_SetConfig+0x66>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a20      	ldr	r2, [pc, #128]	; (8003724 <TIM_OC3_SetConfig+0xe4>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d10d      	bne.n	80036c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	021b      	lsls	r3, r3, #8
 80036b4:	697a      	ldr	r2, [r7, #20]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a16      	ldr	r2, [pc, #88]	; (8003720 <TIM_OC3_SetConfig+0xe0>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d003      	beq.n	80036d2 <TIM_OC3_SetConfig+0x92>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a15      	ldr	r2, [pc, #84]	; (8003724 <TIM_OC3_SetConfig+0xe4>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d113      	bne.n	80036fa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	011b      	lsls	r3, r3, #4
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	011b      	lsls	r3, r3, #4
 80036f4:	693a      	ldr	r2, [r7, #16]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	693a      	ldr	r2, [r7, #16]
 80036fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	685a      	ldr	r2, [r3, #4]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	697a      	ldr	r2, [r7, #20]
 8003712:	621a      	str	r2, [r3, #32]
}
 8003714:	bf00      	nop
 8003716:	371c      	adds	r7, #28
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr
 8003720:	40010000 	.word	0x40010000
 8003724:	40010400 	.word	0x40010400

08003728 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003728:	b480      	push	{r7}
 800372a:	b087      	sub	sp, #28
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a1b      	ldr	r3, [r3, #32]
 8003742:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003756:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800375e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	021b      	lsls	r3, r3, #8
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	4313      	orrs	r3, r2
 800376a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003772:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	031b      	lsls	r3, r3, #12
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	4313      	orrs	r3, r2
 800377e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a12      	ldr	r2, [pc, #72]	; (80037cc <TIM_OC4_SetConfig+0xa4>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d003      	beq.n	8003790 <TIM_OC4_SetConfig+0x68>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4a11      	ldr	r2, [pc, #68]	; (80037d0 <TIM_OC4_SetConfig+0xa8>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d109      	bne.n	80037a4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003796:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	695b      	ldr	r3, [r3, #20]
 800379c:	019b      	lsls	r3, r3, #6
 800379e:	697a      	ldr	r2, [r7, #20]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	697a      	ldr	r2, [r7, #20]
 80037a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	685a      	ldr	r2, [r3, #4]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	621a      	str	r2, [r3, #32]
}
 80037be:	bf00      	nop
 80037c0:	371c      	adds	r7, #28
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	40010000 	.word	0x40010000
 80037d0:	40010400 	.word	0x40010400

080037d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b087      	sub	sp, #28
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6a1b      	ldr	r3, [r3, #32]
 80037ea:	f023 0201 	bic.w	r2, r3, #1
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	011b      	lsls	r3, r3, #4
 8003804:	693a      	ldr	r2, [r7, #16]
 8003806:	4313      	orrs	r3, r2
 8003808:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	f023 030a 	bic.w	r3, r3, #10
 8003810:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003812:	697a      	ldr	r2, [r7, #20]
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	4313      	orrs	r3, r2
 8003818:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	693a      	ldr	r2, [r7, #16]
 800381e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	621a      	str	r2, [r3, #32]
}
 8003826:	bf00      	nop
 8003828:	371c      	adds	r7, #28
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr

08003832 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003832:	b480      	push	{r7}
 8003834:	b087      	sub	sp, #28
 8003836:	af00      	add	r7, sp, #0
 8003838:	60f8      	str	r0, [r7, #12]
 800383a:	60b9      	str	r1, [r7, #8]
 800383c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	f023 0210 	bic.w	r2, r3, #16
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6a1b      	ldr	r3, [r3, #32]
 8003854:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800385c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	031b      	lsls	r3, r3, #12
 8003862:	697a      	ldr	r2, [r7, #20]
 8003864:	4313      	orrs	r3, r2
 8003866:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800386e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	011b      	lsls	r3, r3, #4
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	4313      	orrs	r3, r2
 8003878:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	697a      	ldr	r2, [r7, #20]
 800387e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	621a      	str	r2, [r3, #32]
}
 8003886:	bf00      	nop
 8003888:	371c      	adds	r7, #28
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr

08003892 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003892:	b480      	push	{r7}
 8003894:	b085      	sub	sp, #20
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
 800389a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038aa:	683a      	ldr	r2, [r7, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	f043 0307 	orr.w	r3, r3, #7
 80038b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	68fa      	ldr	r2, [r7, #12]
 80038ba:	609a      	str	r2, [r3, #8]
}
 80038bc:	bf00      	nop
 80038be:	3714      	adds	r7, #20
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b087      	sub	sp, #28
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	607a      	str	r2, [r7, #4]
 80038d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	021a      	lsls	r2, r3, #8
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	431a      	orrs	r2, r3
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	697a      	ldr	r2, [r7, #20]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	697a      	ldr	r2, [r7, #20]
 80038fa:	609a      	str	r2, [r3, #8]
}
 80038fc:	bf00      	nop
 80038fe:	371c      	adds	r7, #28
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003908:	b480      	push	{r7}
 800390a:	b087      	sub	sp, #28
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	f003 031f 	and.w	r3, r3, #31
 800391a:	2201      	movs	r2, #1
 800391c:	fa02 f303 	lsl.w	r3, r2, r3
 8003920:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6a1a      	ldr	r2, [r3, #32]
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	43db      	mvns	r3, r3
 800392a:	401a      	ands	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6a1a      	ldr	r2, [r3, #32]
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	f003 031f 	and.w	r3, r3, #31
 800393a:	6879      	ldr	r1, [r7, #4]
 800393c:	fa01 f303 	lsl.w	r3, r1, r3
 8003940:	431a      	orrs	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	621a      	str	r2, [r3, #32]
}
 8003946:	bf00      	nop
 8003948:	371c      	adds	r7, #28
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
	...

08003954 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003954:	b480      	push	{r7}
 8003956:	b085      	sub	sp, #20
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003964:	2b01      	cmp	r3, #1
 8003966:	d101      	bne.n	800396c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003968:	2302      	movs	r3, #2
 800396a:	e05a      	b.n	8003a22 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2202      	movs	r2, #2
 8003978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003992:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	4313      	orrs	r3, r2
 800399c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68fa      	ldr	r2, [r7, #12]
 80039a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a21      	ldr	r2, [pc, #132]	; (8003a30 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d022      	beq.n	80039f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039b8:	d01d      	beq.n	80039f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a1d      	ldr	r2, [pc, #116]	; (8003a34 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d018      	beq.n	80039f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a1b      	ldr	r2, [pc, #108]	; (8003a38 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d013      	beq.n	80039f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a1a      	ldr	r2, [pc, #104]	; (8003a3c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d00e      	beq.n	80039f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a18      	ldr	r2, [pc, #96]	; (8003a40 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d009      	beq.n	80039f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a17      	ldr	r2, [pc, #92]	; (8003a44 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d004      	beq.n	80039f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a15      	ldr	r2, [pc, #84]	; (8003a48 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d10c      	bne.n	8003a10 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	68ba      	ldr	r2, [r7, #8]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68ba      	ldr	r2, [r7, #8]
 8003a0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3714      	adds	r7, #20
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	40010000 	.word	0x40010000
 8003a34:	40000400 	.word	0x40000400
 8003a38:	40000800 	.word	0x40000800
 8003a3c:	40000c00 	.word	0x40000c00
 8003a40:	40010400 	.word	0x40010400
 8003a44:	40014000 	.word	0x40014000
 8003a48:	40001800 	.word	0x40001800

08003a4c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b085      	sub	sp, #20
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003a56:	2300      	movs	r3, #0
 8003a58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d101      	bne.n	8003a68 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003a64:	2302      	movs	r3, #2
 8003a66:	e03d      	b.n	8003ae4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	695b      	ldr	r3, [r3, #20]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	69db      	ldr	r3, [r3, #28]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3714      	adds	r7, #20
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e03f      	b.n	8003b82 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d106      	bne.n	8003b1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f7fd fe64 	bl	80017e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2224      	movs	r2, #36	; 0x24
 8003b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68da      	ldr	r2, [r3, #12]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 fddf 	bl	80046f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	691a      	ldr	r2, [r3, #16]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	695a      	ldr	r2, [r3, #20]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68da      	ldr	r2, [r3, #12]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2220      	movs	r2, #32
 8003b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2220      	movs	r2, #32
 8003b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3708      	adds	r7, #8
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	b08a      	sub	sp, #40	; 0x28
 8003b8e:	af02      	add	r7, sp, #8
 8003b90:	60f8      	str	r0, [r7, #12]
 8003b92:	60b9      	str	r1, [r7, #8]
 8003b94:	603b      	str	r3, [r7, #0]
 8003b96:	4613      	mov	r3, r2
 8003b98:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b20      	cmp	r3, #32
 8003ba8:	d17c      	bne.n	8003ca4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d002      	beq.n	8003bb6 <HAL_UART_Transmit+0x2c>
 8003bb0:	88fb      	ldrh	r3, [r7, #6]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d101      	bne.n	8003bba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e075      	b.n	8003ca6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d101      	bne.n	8003bc8 <HAL_UART_Transmit+0x3e>
 8003bc4:	2302      	movs	r3, #2
 8003bc6:	e06e      	b.n	8003ca6 <HAL_UART_Transmit+0x11c>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2221      	movs	r2, #33	; 0x21
 8003bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003bde:	f7fd ff57 	bl	8001a90 <HAL_GetTick>
 8003be2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	88fa      	ldrh	r2, [r7, #6]
 8003be8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	88fa      	ldrh	r2, [r7, #6]
 8003bee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bf8:	d108      	bne.n	8003c0c <HAL_UART_Transmit+0x82>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d104      	bne.n	8003c0c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003c02:	2300      	movs	r3, #0
 8003c04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	61bb      	str	r3, [r7, #24]
 8003c0a:	e003      	b.n	8003c14 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c10:	2300      	movs	r3, #0
 8003c12:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003c1c:	e02a      	b.n	8003c74 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	9300      	str	r3, [sp, #0]
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	2200      	movs	r2, #0
 8003c26:	2180      	movs	r1, #128	; 0x80
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f000 fb1f 	bl	800426c <UART_WaitOnFlagUntilTimeout>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d001      	beq.n	8003c38 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e036      	b.n	8003ca6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d10b      	bne.n	8003c56 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	881b      	ldrh	r3, [r3, #0]
 8003c42:	461a      	mov	r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c4c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	3302      	adds	r3, #2
 8003c52:	61bb      	str	r3, [r7, #24]
 8003c54:	e007      	b.n	8003c66 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	781a      	ldrb	r2, [r3, #0]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	3301      	adds	r3, #1
 8003c64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d1cf      	bne.n	8003c1e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	9300      	str	r3, [sp, #0]
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	2200      	movs	r2, #0
 8003c86:	2140      	movs	r1, #64	; 0x40
 8003c88:	68f8      	ldr	r0, [r7, #12]
 8003c8a:	f000 faef 	bl	800426c <UART_WaitOnFlagUntilTimeout>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d001      	beq.n	8003c98 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e006      	b.n	8003ca6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2220      	movs	r2, #32
 8003c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	e000      	b.n	8003ca6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003ca4:	2302      	movs	r3, #2
  }
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3720      	adds	r7, #32
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b084      	sub	sp, #16
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	60f8      	str	r0, [r7, #12]
 8003cb6:	60b9      	str	r1, [r7, #8]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	2b20      	cmp	r3, #32
 8003cc6:	d11d      	bne.n	8003d04 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d002      	beq.n	8003cd4 <HAL_UART_Receive_IT+0x26>
 8003cce:	88fb      	ldrh	r3, [r7, #6]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d101      	bne.n	8003cd8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e016      	b.n	8003d06 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d101      	bne.n	8003ce6 <HAL_UART_Receive_IT+0x38>
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	e00f      	b.n	8003d06 <HAL_UART_Receive_IT+0x58>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003cf4:	88fb      	ldrh	r3, [r7, #6]
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	68b9      	ldr	r1, [r7, #8]
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	f000 fb24 	bl	8004348 <UART_Start_Receive_IT>
 8003d00:	4603      	mov	r3, r0
 8003d02:	e000      	b.n	8003d06 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003d04:	2302      	movs	r3, #2
  }
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3710      	adds	r7, #16
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
	...

08003d10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b0ba      	sub	sp, #232	; 0xe8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003d36:	2300      	movs	r3, #0
 8003d38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d46:	f003 030f 	and.w	r3, r3, #15
 8003d4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003d4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10f      	bne.n	8003d76 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d5a:	f003 0320 	and.w	r3, r3, #32
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d009      	beq.n	8003d76 <HAL_UART_IRQHandler+0x66>
 8003d62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d66:	f003 0320 	and.w	r3, r3, #32
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d003      	beq.n	8003d76 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 fc07 	bl	8004582 <UART_Receive_IT>
      return;
 8003d74:	e256      	b.n	8004224 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003d76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	f000 80de 	beq.w	8003f3c <HAL_UART_IRQHandler+0x22c>
 8003d80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d84:	f003 0301 	and.w	r3, r3, #1
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d106      	bne.n	8003d9a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d90:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f000 80d1 	beq.w	8003f3c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00b      	beq.n	8003dbe <HAL_UART_IRQHandler+0xae>
 8003da6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d005      	beq.n	8003dbe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db6:	f043 0201 	orr.w	r2, r3, #1
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003dbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dc2:	f003 0304 	and.w	r3, r3, #4
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00b      	beq.n	8003de2 <HAL_UART_IRQHandler+0xd2>
 8003dca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d005      	beq.n	8003de2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	f043 0202 	orr.w	r2, r3, #2
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00b      	beq.n	8003e06 <HAL_UART_IRQHandler+0xf6>
 8003dee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d005      	beq.n	8003e06 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfe:	f043 0204 	orr.w	r2, r3, #4
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e0a:	f003 0308 	and.w	r3, r3, #8
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d011      	beq.n	8003e36 <HAL_UART_IRQHandler+0x126>
 8003e12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e16:	f003 0320 	and.w	r3, r3, #32
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d105      	bne.n	8003e2a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d005      	beq.n	8003e36 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2e:	f043 0208 	orr.w	r2, r3, #8
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	f000 81ed 	beq.w	800421a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e44:	f003 0320 	and.w	r3, r3, #32
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d008      	beq.n	8003e5e <HAL_UART_IRQHandler+0x14e>
 8003e4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e50:	f003 0320 	and.w	r3, r3, #32
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d002      	beq.n	8003e5e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f000 fb92 	bl	8004582 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	695b      	ldr	r3, [r3, #20]
 8003e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e68:	2b40      	cmp	r3, #64	; 0x40
 8003e6a:	bf0c      	ite	eq
 8003e6c:	2301      	moveq	r3, #1
 8003e6e:	2300      	movne	r3, #0
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7a:	f003 0308 	and.w	r3, r3, #8
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d103      	bne.n	8003e8a <HAL_UART_IRQHandler+0x17a>
 8003e82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d04f      	beq.n	8003f2a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 fa9a 	bl	80043c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e9a:	2b40      	cmp	r3, #64	; 0x40
 8003e9c:	d141      	bne.n	8003f22 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	3314      	adds	r3, #20
 8003ea4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003eac:	e853 3f00 	ldrex	r3, [r3]
 8003eb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003eb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003eb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ebc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	3314      	adds	r3, #20
 8003ec6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003eca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003ece:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003ed6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003eda:	e841 2300 	strex	r3, r2, [r1]
 8003ede:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003ee2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1d9      	bne.n	8003e9e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d013      	beq.n	8003f1a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef6:	4a7d      	ldr	r2, [pc, #500]	; (80040ec <HAL_UART_IRQHandler+0x3dc>)
 8003ef8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7fd ff77 	bl	8001df2 <HAL_DMA_Abort_IT>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d016      	beq.n	8003f38 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f14:	4610      	mov	r0, r2
 8003f16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f18:	e00e      	b.n	8003f38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 f990 	bl	8004240 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f20:	e00a      	b.n	8003f38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 f98c 	bl	8004240 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f28:	e006      	b.n	8003f38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 f988 	bl	8004240 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003f36:	e170      	b.n	800421a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f38:	bf00      	nop
    return;
 8003f3a:	e16e      	b.n	800421a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	f040 814a 	bne.w	80041da <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f4a:	f003 0310 	and.w	r3, r3, #16
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	f000 8143 	beq.w	80041da <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003f54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f58:	f003 0310 	and.w	r3, r3, #16
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f000 813c 	beq.w	80041da <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f62:	2300      	movs	r3, #0
 8003f64:	60bb      	str	r3, [r7, #8]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	60bb      	str	r3, [r7, #8]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	60bb      	str	r3, [r7, #8]
 8003f76:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f82:	2b40      	cmp	r3, #64	; 0x40
 8003f84:	f040 80b4 	bne.w	80040f0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f94:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f000 8140 	beq.w	800421e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003fa2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	f080 8139 	bcs.w	800421e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003fb2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb8:	69db      	ldr	r3, [r3, #28]
 8003fba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fbe:	f000 8088 	beq.w	80040d2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	330c      	adds	r3, #12
 8003fc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fcc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003fd0:	e853 3f00 	ldrex	r3, [r3]
 8003fd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003fd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003fdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fe0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	330c      	adds	r3, #12
 8003fea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003fee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ff2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003ffa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003ffe:	e841 2300 	strex	r3, r2, [r1]
 8004002:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004006:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1d9      	bne.n	8003fc2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	3314      	adds	r3, #20
 8004014:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004016:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004018:	e853 3f00 	ldrex	r3, [r3]
 800401c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800401e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004020:	f023 0301 	bic.w	r3, r3, #1
 8004024:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	3314      	adds	r3, #20
 800402e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004032:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004036:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004038:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800403a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800403e:	e841 2300 	strex	r3, r2, [r1]
 8004042:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004044:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1e1      	bne.n	800400e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	3314      	adds	r3, #20
 8004050:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004052:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004054:	e853 3f00 	ldrex	r3, [r3]
 8004058:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800405a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800405c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004060:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	3314      	adds	r3, #20
 800406a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800406e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004070:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004072:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004074:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004076:	e841 2300 	strex	r3, r2, [r1]
 800407a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800407c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1e3      	bne.n	800404a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2220      	movs	r2, #32
 8004086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	330c      	adds	r3, #12
 8004096:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004098:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800409a:	e853 3f00 	ldrex	r3, [r3]
 800409e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80040a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040a2:	f023 0310 	bic.w	r3, r3, #16
 80040a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	330c      	adds	r3, #12
 80040b0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80040b4:	65ba      	str	r2, [r7, #88]	; 0x58
 80040b6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80040ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80040bc:	e841 2300 	strex	r3, r2, [r1]
 80040c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80040c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d1e3      	bne.n	8004090 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040cc:	4618      	mov	r0, r3
 80040ce:	f7fd fe20 	bl	8001d12 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040da:	b29b      	uxth	r3, r3
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	b29b      	uxth	r3, r3
 80040e0:	4619      	mov	r1, r3
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 f8b6 	bl	8004254 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80040e8:	e099      	b.n	800421e <HAL_UART_IRQHandler+0x50e>
 80040ea:	bf00      	nop
 80040ec:	0800448b 	.word	0x0800448b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004104:	b29b      	uxth	r3, r3
 8004106:	2b00      	cmp	r3, #0
 8004108:	f000 808b 	beq.w	8004222 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800410c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004110:	2b00      	cmp	r3, #0
 8004112:	f000 8086 	beq.w	8004222 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	330c      	adds	r3, #12
 800411c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800411e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004120:	e853 3f00 	ldrex	r3, [r3]
 8004124:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004128:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800412c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	330c      	adds	r3, #12
 8004136:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800413a:	647a      	str	r2, [r7, #68]	; 0x44
 800413c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800413e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004140:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004142:	e841 2300 	strex	r3, r2, [r1]
 8004146:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1e3      	bne.n	8004116 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	3314      	adds	r3, #20
 8004154:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004158:	e853 3f00 	ldrex	r3, [r3]
 800415c:	623b      	str	r3, [r7, #32]
   return(result);
 800415e:	6a3b      	ldr	r3, [r7, #32]
 8004160:	f023 0301 	bic.w	r3, r3, #1
 8004164:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	3314      	adds	r3, #20
 800416e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004172:	633a      	str	r2, [r7, #48]	; 0x30
 8004174:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004176:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004178:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800417a:	e841 2300 	strex	r3, r2, [r1]
 800417e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1e3      	bne.n	800414e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2220      	movs	r2, #32
 800418a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	330c      	adds	r3, #12
 800419a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	e853 3f00 	ldrex	r3, [r3]
 80041a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f023 0310 	bic.w	r3, r3, #16
 80041aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	330c      	adds	r3, #12
 80041b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80041b8:	61fa      	str	r2, [r7, #28]
 80041ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041bc:	69b9      	ldr	r1, [r7, #24]
 80041be:	69fa      	ldr	r2, [r7, #28]
 80041c0:	e841 2300 	strex	r3, r2, [r1]
 80041c4:	617b      	str	r3, [r7, #20]
   return(result);
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1e3      	bne.n	8004194 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80041cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80041d0:	4619      	mov	r1, r3
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f000 f83e 	bl	8004254 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80041d8:	e023      	b.n	8004222 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80041da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d009      	beq.n	80041fa <HAL_UART_IRQHandler+0x4ea>
 80041e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d003      	beq.n	80041fa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 f95d 	bl	80044b2 <UART_Transmit_IT>
    return;
 80041f8:	e014      	b.n	8004224 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80041fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00e      	beq.n	8004224 <HAL_UART_IRQHandler+0x514>
 8004206:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800420a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800420e:	2b00      	cmp	r3, #0
 8004210:	d008      	beq.n	8004224 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 f99d 	bl	8004552 <UART_EndTransmit_IT>
    return;
 8004218:	e004      	b.n	8004224 <HAL_UART_IRQHandler+0x514>
    return;
 800421a:	bf00      	nop
 800421c:	e002      	b.n	8004224 <HAL_UART_IRQHandler+0x514>
      return;
 800421e:	bf00      	nop
 8004220:	e000      	b.n	8004224 <HAL_UART_IRQHandler+0x514>
      return;
 8004222:	bf00      	nop
  }
}
 8004224:	37e8      	adds	r7, #232	; 0xe8
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop

0800422c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004234:	bf00      	nop
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004248:	bf00      	nop
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	460b      	mov	r3, r1
 800425e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b090      	sub	sp, #64	; 0x40
 8004270:	af00      	add	r7, sp, #0
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	603b      	str	r3, [r7, #0]
 8004278:	4613      	mov	r3, r2
 800427a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800427c:	e050      	b.n	8004320 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800427e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004280:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004284:	d04c      	beq.n	8004320 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004286:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004288:	2b00      	cmp	r3, #0
 800428a:	d007      	beq.n	800429c <UART_WaitOnFlagUntilTimeout+0x30>
 800428c:	f7fd fc00 	bl	8001a90 <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004298:	429a      	cmp	r2, r3
 800429a:	d241      	bcs.n	8004320 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	330c      	adds	r3, #12
 80042a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a6:	e853 3f00 	ldrex	r3, [r3]
 80042aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80042b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	330c      	adds	r3, #12
 80042ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80042bc:	637a      	str	r2, [r7, #52]	; 0x34
 80042be:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80042c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042c4:	e841 2300 	strex	r3, r2, [r1]
 80042c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80042ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1e5      	bne.n	800429c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	3314      	adds	r3, #20
 80042d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	e853 3f00 	ldrex	r3, [r3]
 80042de:	613b      	str	r3, [r7, #16]
   return(result);
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	f023 0301 	bic.w	r3, r3, #1
 80042e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	3314      	adds	r3, #20
 80042ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042f0:	623a      	str	r2, [r7, #32]
 80042f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f4:	69f9      	ldr	r1, [r7, #28]
 80042f6:	6a3a      	ldr	r2, [r7, #32]
 80042f8:	e841 2300 	strex	r3, r2, [r1]
 80042fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d1e5      	bne.n	80042d0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2220      	movs	r2, #32
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2220      	movs	r2, #32
 8004310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e00f      	b.n	8004340 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	4013      	ands	r3, r2
 800432a:	68ba      	ldr	r2, [r7, #8]
 800432c:	429a      	cmp	r2, r3
 800432e:	bf0c      	ite	eq
 8004330:	2301      	moveq	r3, #1
 8004332:	2300      	movne	r3, #0
 8004334:	b2db      	uxtb	r3, r3
 8004336:	461a      	mov	r2, r3
 8004338:	79fb      	ldrb	r3, [r7, #7]
 800433a:	429a      	cmp	r2, r3
 800433c:	d09f      	beq.n	800427e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	3740      	adds	r7, #64	; 0x40
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	4613      	mov	r3, r2
 8004354:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	68ba      	ldr	r2, [r7, #8]
 800435a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	88fa      	ldrh	r2, [r7, #6]
 8004360:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	88fa      	ldrh	r2, [r7, #6]
 8004366:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2222      	movs	r2, #34	; 0x22
 8004372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d007      	beq.n	8004396 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68da      	ldr	r2, [r3, #12]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004394:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	695a      	ldr	r2, [r3, #20]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f042 0201 	orr.w	r2, r2, #1
 80043a4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68da      	ldr	r2, [r3, #12]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f042 0220 	orr.w	r2, r2, #32
 80043b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3714      	adds	r7, #20
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b095      	sub	sp, #84	; 0x54
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	330c      	adds	r3, #12
 80043d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043d6:	e853 3f00 	ldrex	r3, [r3]
 80043da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80043dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	330c      	adds	r3, #12
 80043ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80043ec:	643a      	str	r2, [r7, #64]	; 0x40
 80043ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80043f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80043f4:	e841 2300 	strex	r3, r2, [r1]
 80043f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80043fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d1e5      	bne.n	80043cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	3314      	adds	r3, #20
 8004406:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004408:	6a3b      	ldr	r3, [r7, #32]
 800440a:	e853 3f00 	ldrex	r3, [r3]
 800440e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	f023 0301 	bic.w	r3, r3, #1
 8004416:	64bb      	str	r3, [r7, #72]	; 0x48
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	3314      	adds	r3, #20
 800441e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004420:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004422:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004424:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004426:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004428:	e841 2300 	strex	r3, r2, [r1]
 800442c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800442e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004430:	2b00      	cmp	r3, #0
 8004432:	d1e5      	bne.n	8004400 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004438:	2b01      	cmp	r3, #1
 800443a:	d119      	bne.n	8004470 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	330c      	adds	r3, #12
 8004442:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	e853 3f00 	ldrex	r3, [r3]
 800444a:	60bb      	str	r3, [r7, #8]
   return(result);
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	f023 0310 	bic.w	r3, r3, #16
 8004452:	647b      	str	r3, [r7, #68]	; 0x44
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	330c      	adds	r3, #12
 800445a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800445c:	61ba      	str	r2, [r7, #24]
 800445e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004460:	6979      	ldr	r1, [r7, #20]
 8004462:	69ba      	ldr	r2, [r7, #24]
 8004464:	e841 2300 	strex	r3, r2, [r1]
 8004468:	613b      	str	r3, [r7, #16]
   return(result);
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1e5      	bne.n	800443c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2220      	movs	r2, #32
 8004474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800447e:	bf00      	nop
 8004480:	3754      	adds	r7, #84	; 0x54
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr

0800448a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800448a:	b580      	push	{r7, lr}
 800448c:	b084      	sub	sp, #16
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004496:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	f7ff fecb 	bl	8004240 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044aa:	bf00      	nop
 80044ac:	3710      	adds	r7, #16
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80044b2:	b480      	push	{r7}
 80044b4:	b085      	sub	sp, #20
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b21      	cmp	r3, #33	; 0x21
 80044c4:	d13e      	bne.n	8004544 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ce:	d114      	bne.n	80044fa <UART_Transmit_IT+0x48>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d110      	bne.n	80044fa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a1b      	ldr	r3, [r3, #32]
 80044dc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	881b      	ldrh	r3, [r3, #0]
 80044e2:	461a      	mov	r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044ec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a1b      	ldr	r3, [r3, #32]
 80044f2:	1c9a      	adds	r2, r3, #2
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	621a      	str	r2, [r3, #32]
 80044f8:	e008      	b.n	800450c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	1c59      	adds	r1, r3, #1
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	6211      	str	r1, [r2, #32]
 8004504:	781a      	ldrb	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004510:	b29b      	uxth	r3, r3
 8004512:	3b01      	subs	r3, #1
 8004514:	b29b      	uxth	r3, r3
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	4619      	mov	r1, r3
 800451a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800451c:	2b00      	cmp	r3, #0
 800451e:	d10f      	bne.n	8004540 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68da      	ldr	r2, [r3, #12]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800452e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68da      	ldr	r2, [r3, #12]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800453e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004540:	2300      	movs	r3, #0
 8004542:	e000      	b.n	8004546 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004544:	2302      	movs	r3, #2
  }
}
 8004546:	4618      	mov	r0, r3
 8004548:	3714      	adds	r7, #20
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr

08004552 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004552:	b580      	push	{r7, lr}
 8004554:	b082      	sub	sp, #8
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68da      	ldr	r2, [r3, #12]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004568:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2220      	movs	r2, #32
 800456e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f7ff fe5a 	bl	800422c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	3708      	adds	r7, #8
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}

08004582 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004582:	b580      	push	{r7, lr}
 8004584:	b08c      	sub	sp, #48	; 0x30
 8004586:	af00      	add	r7, sp, #0
 8004588:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004590:	b2db      	uxtb	r3, r3
 8004592:	2b22      	cmp	r3, #34	; 0x22
 8004594:	f040 80ab 	bne.w	80046ee <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045a0:	d117      	bne.n	80045d2 <UART_Receive_IT+0x50>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d113      	bne.n	80045d2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80045aa:	2300      	movs	r3, #0
 80045ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ca:	1c9a      	adds	r2, r3, #2
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	629a      	str	r2, [r3, #40]	; 0x28
 80045d0:	e026      	b.n	8004620 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80045d8:	2300      	movs	r3, #0
 80045da:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045e4:	d007      	beq.n	80045f6 <UART_Receive_IT+0x74>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d10a      	bne.n	8004604 <UART_Receive_IT+0x82>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d106      	bne.n	8004604 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	b2da      	uxtb	r2, r3
 80045fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004600:	701a      	strb	r2, [r3, #0]
 8004602:	e008      	b.n	8004616 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	b2db      	uxtb	r3, r3
 800460c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004610:	b2da      	uxtb	r2, r3
 8004612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004614:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800461a:	1c5a      	adds	r2, r3, #1
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004624:	b29b      	uxth	r3, r3
 8004626:	3b01      	subs	r3, #1
 8004628:	b29b      	uxth	r3, r3
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	4619      	mov	r1, r3
 800462e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004630:	2b00      	cmp	r3, #0
 8004632:	d15a      	bne.n	80046ea <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68da      	ldr	r2, [r3, #12]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f022 0220 	bic.w	r2, r2, #32
 8004642:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68da      	ldr	r2, [r3, #12]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004652:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	695a      	ldr	r2, [r3, #20]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f022 0201 	bic.w	r2, r2, #1
 8004662:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2220      	movs	r2, #32
 8004668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004670:	2b01      	cmp	r3, #1
 8004672:	d135      	bne.n	80046e0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	330c      	adds	r3, #12
 8004680:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	e853 3f00 	ldrex	r3, [r3]
 8004688:	613b      	str	r3, [r7, #16]
   return(result);
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	f023 0310 	bic.w	r3, r3, #16
 8004690:	627b      	str	r3, [r7, #36]	; 0x24
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	330c      	adds	r3, #12
 8004698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800469a:	623a      	str	r2, [r7, #32]
 800469c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800469e:	69f9      	ldr	r1, [r7, #28]
 80046a0:	6a3a      	ldr	r2, [r7, #32]
 80046a2:	e841 2300 	strex	r3, r2, [r1]
 80046a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d1e5      	bne.n	800467a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0310 	and.w	r3, r3, #16
 80046b8:	2b10      	cmp	r3, #16
 80046ba:	d10a      	bne.n	80046d2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80046bc:	2300      	movs	r3, #0
 80046be:	60fb      	str	r3, [r7, #12]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	60fb      	str	r3, [r7, #12]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	60fb      	str	r3, [r7, #12]
 80046d0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80046d6:	4619      	mov	r1, r3
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f7ff fdbb 	bl	8004254 <HAL_UARTEx_RxEventCallback>
 80046de:	e002      	b.n	80046e6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f7fc fae3 	bl	8000cac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80046e6:	2300      	movs	r3, #0
 80046e8:	e002      	b.n	80046f0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80046ea:	2300      	movs	r3, #0
 80046ec:	e000      	b.n	80046f0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80046ee:	2302      	movs	r3, #2
  }
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3730      	adds	r7, #48	; 0x30
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046fc:	b0c0      	sub	sp, #256	; 0x100
 80046fe:	af00      	add	r7, sp, #0
 8004700:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004714:	68d9      	ldr	r1, [r3, #12]
 8004716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	ea40 0301 	orr.w	r3, r0, r1
 8004720:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004726:	689a      	ldr	r2, [r3, #8]
 8004728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	431a      	orrs	r2, r3
 8004730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	431a      	orrs	r2, r3
 8004738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800473c:	69db      	ldr	r3, [r3, #28]
 800473e:	4313      	orrs	r3, r2
 8004740:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004750:	f021 010c 	bic.w	r1, r1, #12
 8004754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800475e:	430b      	orrs	r3, r1
 8004760:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	695b      	ldr	r3, [r3, #20]
 800476a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800476e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004772:	6999      	ldr	r1, [r3, #24]
 8004774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	ea40 0301 	orr.w	r3, r0, r1
 800477e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	4b8f      	ldr	r3, [pc, #572]	; (80049c4 <UART_SetConfig+0x2cc>)
 8004788:	429a      	cmp	r2, r3
 800478a:	d005      	beq.n	8004798 <UART_SetConfig+0xa0>
 800478c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	4b8d      	ldr	r3, [pc, #564]	; (80049c8 <UART_SetConfig+0x2d0>)
 8004794:	429a      	cmp	r2, r3
 8004796:	d104      	bne.n	80047a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004798:	f7fe f98a 	bl	8002ab0 <HAL_RCC_GetPCLK2Freq>
 800479c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80047a0:	e003      	b.n	80047aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80047a2:	f7fe f971 	bl	8002a88 <HAL_RCC_GetPCLK1Freq>
 80047a6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ae:	69db      	ldr	r3, [r3, #28]
 80047b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047b4:	f040 810c 	bne.w	80049d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80047b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047bc:	2200      	movs	r2, #0
 80047be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80047c2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80047c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80047ca:	4622      	mov	r2, r4
 80047cc:	462b      	mov	r3, r5
 80047ce:	1891      	adds	r1, r2, r2
 80047d0:	65b9      	str	r1, [r7, #88]	; 0x58
 80047d2:	415b      	adcs	r3, r3
 80047d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80047da:	4621      	mov	r1, r4
 80047dc:	eb12 0801 	adds.w	r8, r2, r1
 80047e0:	4629      	mov	r1, r5
 80047e2:	eb43 0901 	adc.w	r9, r3, r1
 80047e6:	f04f 0200 	mov.w	r2, #0
 80047ea:	f04f 0300 	mov.w	r3, #0
 80047ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047fa:	4690      	mov	r8, r2
 80047fc:	4699      	mov	r9, r3
 80047fe:	4623      	mov	r3, r4
 8004800:	eb18 0303 	adds.w	r3, r8, r3
 8004804:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004808:	462b      	mov	r3, r5
 800480a:	eb49 0303 	adc.w	r3, r9, r3
 800480e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800481e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004822:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004826:	460b      	mov	r3, r1
 8004828:	18db      	adds	r3, r3, r3
 800482a:	653b      	str	r3, [r7, #80]	; 0x50
 800482c:	4613      	mov	r3, r2
 800482e:	eb42 0303 	adc.w	r3, r2, r3
 8004832:	657b      	str	r3, [r7, #84]	; 0x54
 8004834:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004838:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800483c:	f7fb fd18 	bl	8000270 <__aeabi_uldivmod>
 8004840:	4602      	mov	r2, r0
 8004842:	460b      	mov	r3, r1
 8004844:	4b61      	ldr	r3, [pc, #388]	; (80049cc <UART_SetConfig+0x2d4>)
 8004846:	fba3 2302 	umull	r2, r3, r3, r2
 800484a:	095b      	lsrs	r3, r3, #5
 800484c:	011c      	lsls	r4, r3, #4
 800484e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004852:	2200      	movs	r2, #0
 8004854:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004858:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800485c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004860:	4642      	mov	r2, r8
 8004862:	464b      	mov	r3, r9
 8004864:	1891      	adds	r1, r2, r2
 8004866:	64b9      	str	r1, [r7, #72]	; 0x48
 8004868:	415b      	adcs	r3, r3
 800486a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800486c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004870:	4641      	mov	r1, r8
 8004872:	eb12 0a01 	adds.w	sl, r2, r1
 8004876:	4649      	mov	r1, r9
 8004878:	eb43 0b01 	adc.w	fp, r3, r1
 800487c:	f04f 0200 	mov.w	r2, #0
 8004880:	f04f 0300 	mov.w	r3, #0
 8004884:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004888:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800488c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004890:	4692      	mov	sl, r2
 8004892:	469b      	mov	fp, r3
 8004894:	4643      	mov	r3, r8
 8004896:	eb1a 0303 	adds.w	r3, sl, r3
 800489a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800489e:	464b      	mov	r3, r9
 80048a0:	eb4b 0303 	adc.w	r3, fp, r3
 80048a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80048a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80048b4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80048b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80048bc:	460b      	mov	r3, r1
 80048be:	18db      	adds	r3, r3, r3
 80048c0:	643b      	str	r3, [r7, #64]	; 0x40
 80048c2:	4613      	mov	r3, r2
 80048c4:	eb42 0303 	adc.w	r3, r2, r3
 80048c8:	647b      	str	r3, [r7, #68]	; 0x44
 80048ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80048ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80048d2:	f7fb fccd 	bl	8000270 <__aeabi_uldivmod>
 80048d6:	4602      	mov	r2, r0
 80048d8:	460b      	mov	r3, r1
 80048da:	4611      	mov	r1, r2
 80048dc:	4b3b      	ldr	r3, [pc, #236]	; (80049cc <UART_SetConfig+0x2d4>)
 80048de:	fba3 2301 	umull	r2, r3, r3, r1
 80048e2:	095b      	lsrs	r3, r3, #5
 80048e4:	2264      	movs	r2, #100	; 0x64
 80048e6:	fb02 f303 	mul.w	r3, r2, r3
 80048ea:	1acb      	subs	r3, r1, r3
 80048ec:	00db      	lsls	r3, r3, #3
 80048ee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80048f2:	4b36      	ldr	r3, [pc, #216]	; (80049cc <UART_SetConfig+0x2d4>)
 80048f4:	fba3 2302 	umull	r2, r3, r3, r2
 80048f8:	095b      	lsrs	r3, r3, #5
 80048fa:	005b      	lsls	r3, r3, #1
 80048fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004900:	441c      	add	r4, r3
 8004902:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004906:	2200      	movs	r2, #0
 8004908:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800490c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004910:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004914:	4642      	mov	r2, r8
 8004916:	464b      	mov	r3, r9
 8004918:	1891      	adds	r1, r2, r2
 800491a:	63b9      	str	r1, [r7, #56]	; 0x38
 800491c:	415b      	adcs	r3, r3
 800491e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004920:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004924:	4641      	mov	r1, r8
 8004926:	1851      	adds	r1, r2, r1
 8004928:	6339      	str	r1, [r7, #48]	; 0x30
 800492a:	4649      	mov	r1, r9
 800492c:	414b      	adcs	r3, r1
 800492e:	637b      	str	r3, [r7, #52]	; 0x34
 8004930:	f04f 0200 	mov.w	r2, #0
 8004934:	f04f 0300 	mov.w	r3, #0
 8004938:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800493c:	4659      	mov	r1, fp
 800493e:	00cb      	lsls	r3, r1, #3
 8004940:	4651      	mov	r1, sl
 8004942:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004946:	4651      	mov	r1, sl
 8004948:	00ca      	lsls	r2, r1, #3
 800494a:	4610      	mov	r0, r2
 800494c:	4619      	mov	r1, r3
 800494e:	4603      	mov	r3, r0
 8004950:	4642      	mov	r2, r8
 8004952:	189b      	adds	r3, r3, r2
 8004954:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004958:	464b      	mov	r3, r9
 800495a:	460a      	mov	r2, r1
 800495c:	eb42 0303 	adc.w	r3, r2, r3
 8004960:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004970:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004974:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004978:	460b      	mov	r3, r1
 800497a:	18db      	adds	r3, r3, r3
 800497c:	62bb      	str	r3, [r7, #40]	; 0x28
 800497e:	4613      	mov	r3, r2
 8004980:	eb42 0303 	adc.w	r3, r2, r3
 8004984:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004986:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800498a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800498e:	f7fb fc6f 	bl	8000270 <__aeabi_uldivmod>
 8004992:	4602      	mov	r2, r0
 8004994:	460b      	mov	r3, r1
 8004996:	4b0d      	ldr	r3, [pc, #52]	; (80049cc <UART_SetConfig+0x2d4>)
 8004998:	fba3 1302 	umull	r1, r3, r3, r2
 800499c:	095b      	lsrs	r3, r3, #5
 800499e:	2164      	movs	r1, #100	; 0x64
 80049a0:	fb01 f303 	mul.w	r3, r1, r3
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	00db      	lsls	r3, r3, #3
 80049a8:	3332      	adds	r3, #50	; 0x32
 80049aa:	4a08      	ldr	r2, [pc, #32]	; (80049cc <UART_SetConfig+0x2d4>)
 80049ac:	fba2 2303 	umull	r2, r3, r2, r3
 80049b0:	095b      	lsrs	r3, r3, #5
 80049b2:	f003 0207 	and.w	r2, r3, #7
 80049b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4422      	add	r2, r4
 80049be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80049c0:	e105      	b.n	8004bce <UART_SetConfig+0x4d6>
 80049c2:	bf00      	nop
 80049c4:	40011000 	.word	0x40011000
 80049c8:	40011400 	.word	0x40011400
 80049cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049d4:	2200      	movs	r2, #0
 80049d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80049da:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80049de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80049e2:	4642      	mov	r2, r8
 80049e4:	464b      	mov	r3, r9
 80049e6:	1891      	adds	r1, r2, r2
 80049e8:	6239      	str	r1, [r7, #32]
 80049ea:	415b      	adcs	r3, r3
 80049ec:	627b      	str	r3, [r7, #36]	; 0x24
 80049ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80049f2:	4641      	mov	r1, r8
 80049f4:	1854      	adds	r4, r2, r1
 80049f6:	4649      	mov	r1, r9
 80049f8:	eb43 0501 	adc.w	r5, r3, r1
 80049fc:	f04f 0200 	mov.w	r2, #0
 8004a00:	f04f 0300 	mov.w	r3, #0
 8004a04:	00eb      	lsls	r3, r5, #3
 8004a06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a0a:	00e2      	lsls	r2, r4, #3
 8004a0c:	4614      	mov	r4, r2
 8004a0e:	461d      	mov	r5, r3
 8004a10:	4643      	mov	r3, r8
 8004a12:	18e3      	adds	r3, r4, r3
 8004a14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a18:	464b      	mov	r3, r9
 8004a1a:	eb45 0303 	adc.w	r3, r5, r3
 8004a1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a2e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a32:	f04f 0200 	mov.w	r2, #0
 8004a36:	f04f 0300 	mov.w	r3, #0
 8004a3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004a3e:	4629      	mov	r1, r5
 8004a40:	008b      	lsls	r3, r1, #2
 8004a42:	4621      	mov	r1, r4
 8004a44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a48:	4621      	mov	r1, r4
 8004a4a:	008a      	lsls	r2, r1, #2
 8004a4c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004a50:	f7fb fc0e 	bl	8000270 <__aeabi_uldivmod>
 8004a54:	4602      	mov	r2, r0
 8004a56:	460b      	mov	r3, r1
 8004a58:	4b60      	ldr	r3, [pc, #384]	; (8004bdc <UART_SetConfig+0x4e4>)
 8004a5a:	fba3 2302 	umull	r2, r3, r3, r2
 8004a5e:	095b      	lsrs	r3, r3, #5
 8004a60:	011c      	lsls	r4, r3, #4
 8004a62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a66:	2200      	movs	r2, #0
 8004a68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004a6c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004a70:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004a74:	4642      	mov	r2, r8
 8004a76:	464b      	mov	r3, r9
 8004a78:	1891      	adds	r1, r2, r2
 8004a7a:	61b9      	str	r1, [r7, #24]
 8004a7c:	415b      	adcs	r3, r3
 8004a7e:	61fb      	str	r3, [r7, #28]
 8004a80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a84:	4641      	mov	r1, r8
 8004a86:	1851      	adds	r1, r2, r1
 8004a88:	6139      	str	r1, [r7, #16]
 8004a8a:	4649      	mov	r1, r9
 8004a8c:	414b      	adcs	r3, r1
 8004a8e:	617b      	str	r3, [r7, #20]
 8004a90:	f04f 0200 	mov.w	r2, #0
 8004a94:	f04f 0300 	mov.w	r3, #0
 8004a98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a9c:	4659      	mov	r1, fp
 8004a9e:	00cb      	lsls	r3, r1, #3
 8004aa0:	4651      	mov	r1, sl
 8004aa2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004aa6:	4651      	mov	r1, sl
 8004aa8:	00ca      	lsls	r2, r1, #3
 8004aaa:	4610      	mov	r0, r2
 8004aac:	4619      	mov	r1, r3
 8004aae:	4603      	mov	r3, r0
 8004ab0:	4642      	mov	r2, r8
 8004ab2:	189b      	adds	r3, r3, r2
 8004ab4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004ab8:	464b      	mov	r3, r9
 8004aba:	460a      	mov	r2, r1
 8004abc:	eb42 0303 	adc.w	r3, r2, r3
 8004ac0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ace:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004ad0:	f04f 0200 	mov.w	r2, #0
 8004ad4:	f04f 0300 	mov.w	r3, #0
 8004ad8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004adc:	4649      	mov	r1, r9
 8004ade:	008b      	lsls	r3, r1, #2
 8004ae0:	4641      	mov	r1, r8
 8004ae2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ae6:	4641      	mov	r1, r8
 8004ae8:	008a      	lsls	r2, r1, #2
 8004aea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004aee:	f7fb fbbf 	bl	8000270 <__aeabi_uldivmod>
 8004af2:	4602      	mov	r2, r0
 8004af4:	460b      	mov	r3, r1
 8004af6:	4b39      	ldr	r3, [pc, #228]	; (8004bdc <UART_SetConfig+0x4e4>)
 8004af8:	fba3 1302 	umull	r1, r3, r3, r2
 8004afc:	095b      	lsrs	r3, r3, #5
 8004afe:	2164      	movs	r1, #100	; 0x64
 8004b00:	fb01 f303 	mul.w	r3, r1, r3
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	011b      	lsls	r3, r3, #4
 8004b08:	3332      	adds	r3, #50	; 0x32
 8004b0a:	4a34      	ldr	r2, [pc, #208]	; (8004bdc <UART_SetConfig+0x4e4>)
 8004b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b10:	095b      	lsrs	r3, r3, #5
 8004b12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b16:	441c      	add	r4, r3
 8004b18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	673b      	str	r3, [r7, #112]	; 0x70
 8004b20:	677a      	str	r2, [r7, #116]	; 0x74
 8004b22:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004b26:	4642      	mov	r2, r8
 8004b28:	464b      	mov	r3, r9
 8004b2a:	1891      	adds	r1, r2, r2
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	415b      	adcs	r3, r3
 8004b30:	60fb      	str	r3, [r7, #12]
 8004b32:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b36:	4641      	mov	r1, r8
 8004b38:	1851      	adds	r1, r2, r1
 8004b3a:	6039      	str	r1, [r7, #0]
 8004b3c:	4649      	mov	r1, r9
 8004b3e:	414b      	adcs	r3, r1
 8004b40:	607b      	str	r3, [r7, #4]
 8004b42:	f04f 0200 	mov.w	r2, #0
 8004b46:	f04f 0300 	mov.w	r3, #0
 8004b4a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004b4e:	4659      	mov	r1, fp
 8004b50:	00cb      	lsls	r3, r1, #3
 8004b52:	4651      	mov	r1, sl
 8004b54:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b58:	4651      	mov	r1, sl
 8004b5a:	00ca      	lsls	r2, r1, #3
 8004b5c:	4610      	mov	r0, r2
 8004b5e:	4619      	mov	r1, r3
 8004b60:	4603      	mov	r3, r0
 8004b62:	4642      	mov	r2, r8
 8004b64:	189b      	adds	r3, r3, r2
 8004b66:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b68:	464b      	mov	r3, r9
 8004b6a:	460a      	mov	r2, r1
 8004b6c:	eb42 0303 	adc.w	r3, r2, r3
 8004b70:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	663b      	str	r3, [r7, #96]	; 0x60
 8004b7c:	667a      	str	r2, [r7, #100]	; 0x64
 8004b7e:	f04f 0200 	mov.w	r2, #0
 8004b82:	f04f 0300 	mov.w	r3, #0
 8004b86:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004b8a:	4649      	mov	r1, r9
 8004b8c:	008b      	lsls	r3, r1, #2
 8004b8e:	4641      	mov	r1, r8
 8004b90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b94:	4641      	mov	r1, r8
 8004b96:	008a      	lsls	r2, r1, #2
 8004b98:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004b9c:	f7fb fb68 	bl	8000270 <__aeabi_uldivmod>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	4b0d      	ldr	r3, [pc, #52]	; (8004bdc <UART_SetConfig+0x4e4>)
 8004ba6:	fba3 1302 	umull	r1, r3, r3, r2
 8004baa:	095b      	lsrs	r3, r3, #5
 8004bac:	2164      	movs	r1, #100	; 0x64
 8004bae:	fb01 f303 	mul.w	r3, r1, r3
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	011b      	lsls	r3, r3, #4
 8004bb6:	3332      	adds	r3, #50	; 0x32
 8004bb8:	4a08      	ldr	r2, [pc, #32]	; (8004bdc <UART_SetConfig+0x4e4>)
 8004bba:	fba2 2303 	umull	r2, r3, r2, r3
 8004bbe:	095b      	lsrs	r3, r3, #5
 8004bc0:	f003 020f 	and.w	r2, r3, #15
 8004bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4422      	add	r2, r4
 8004bcc:	609a      	str	r2, [r3, #8]
}
 8004bce:	bf00      	nop
 8004bd0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bda:	bf00      	nop
 8004bdc:	51eb851f 	.word	0x51eb851f

08004be0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b085      	sub	sp, #20
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	4603      	mov	r3, r0
 8004be8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004bea:	2300      	movs	r3, #0
 8004bec:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004bee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bf2:	2b84      	cmp	r3, #132	; 0x84
 8004bf4:	d005      	beq.n	8004c02 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004bf6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	3303      	adds	r3, #3
 8004c00:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004c02:	68fb      	ldr	r3, [r7, #12]
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3714      	adds	r7, #20
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004c14:	f000 fade 	bl	80051d4 <vTaskStartScheduler>
  
  return osOK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	bd80      	pop	{r7, pc}

08004c1e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004c1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c20:	b089      	sub	sp, #36	; 0x24
 8004c22:	af04      	add	r7, sp, #16
 8004c24:	6078      	str	r0, [r7, #4]
 8004c26:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	695b      	ldr	r3, [r3, #20]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d020      	beq.n	8004c72 <osThreadCreate+0x54>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	699b      	ldr	r3, [r3, #24]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d01c      	beq.n	8004c72 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685c      	ldr	r4, [r3, #4]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681d      	ldr	r5, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	691e      	ldr	r6, [r3, #16]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7ff ffc8 	bl	8004be0 <makeFreeRtosPriority>
 8004c50:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	695b      	ldr	r3, [r3, #20]
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c5a:	9202      	str	r2, [sp, #8]
 8004c5c:	9301      	str	r3, [sp, #4]
 8004c5e:	9100      	str	r1, [sp, #0]
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	4632      	mov	r2, r6
 8004c64:	4629      	mov	r1, r5
 8004c66:	4620      	mov	r0, r4
 8004c68:	f000 f8ed 	bl	8004e46 <xTaskCreateStatic>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	60fb      	str	r3, [r7, #12]
 8004c70:	e01c      	b.n	8004cac <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685c      	ldr	r4, [r3, #4]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c7e:	b29e      	uxth	r6, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7ff ffaa 	bl	8004be0 <makeFreeRtosPriority>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	f107 030c 	add.w	r3, r7, #12
 8004c92:	9301      	str	r3, [sp, #4]
 8004c94:	9200      	str	r2, [sp, #0]
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	4632      	mov	r2, r6
 8004c9a:	4629      	mov	r1, r5
 8004c9c:	4620      	mov	r0, r4
 8004c9e:	f000 f92f 	bl	8004f00 <xTaskCreate>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d001      	beq.n	8004cac <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	e000      	b.n	8004cae <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004cac:	68fb      	ldr	r3, [r7, #12]
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3714      	adds	r7, #20
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004cb6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004cb6:	b580      	push	{r7, lr}
 8004cb8:	b084      	sub	sp, #16
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d001      	beq.n	8004ccc <osDelay+0x16>
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	e000      	b.n	8004cce <osDelay+0x18>
 8004ccc:	2301      	movs	r3, #1
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f000 fa4c 	bl	800516c <vTaskDelay>
  
  return osOK;
 8004cd4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3710      	adds	r7, #16
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}

08004cde <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004cde:	b480      	push	{r7}
 8004ce0:	b083      	sub	sp, #12
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f103 0208 	add.w	r2, r3, #8
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004cf6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f103 0208 	add.w	r2, r3, #8
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f103 0208 	add.w	r2, r3, #8
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004d12:	bf00      	nop
 8004d14:	370c      	adds	r7, #12
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr

08004d1e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004d1e:	b480      	push	{r7}
 8004d20:	b083      	sub	sp, #12
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004d2c:	bf00      	nop
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b085      	sub	sp, #20
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	689a      	ldr	r2, [r3, #8]
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	683a      	ldr	r2, [r7, #0]
 8004d5c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	683a      	ldr	r2, [r7, #0]
 8004d62:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	1c5a      	adds	r2, r3, #1
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	601a      	str	r2, [r3, #0]
}
 8004d74:	bf00      	nop
 8004d76:	3714      	adds	r7, #20
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d80:	b480      	push	{r7}
 8004d82:	b085      	sub	sp, #20
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d96:	d103      	bne.n	8004da0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	60fb      	str	r3, [r7, #12]
 8004d9e:	e00c      	b.n	8004dba <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	3308      	adds	r3, #8
 8004da4:	60fb      	str	r3, [r7, #12]
 8004da6:	e002      	b.n	8004dae <vListInsert+0x2e>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	60fb      	str	r3, [r7, #12]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68ba      	ldr	r2, [r7, #8]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d2f6      	bcs.n	8004da8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	685a      	ldr	r2, [r3, #4]
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	683a      	ldr	r2, [r7, #0]
 8004dc8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	68fa      	ldr	r2, [r7, #12]
 8004dce:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	683a      	ldr	r2, [r7, #0]
 8004dd4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	1c5a      	adds	r2, r3, #1
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	601a      	str	r2, [r3, #0]
}
 8004de6:	bf00      	nop
 8004de8:	3714      	adds	r7, #20
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr

08004df2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004df2:	b480      	push	{r7}
 8004df4:	b085      	sub	sp, #20
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	6892      	ldr	r2, [r2, #8]
 8004e08:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	6852      	ldr	r2, [r2, #4]
 8004e12:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d103      	bne.n	8004e26 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	689a      	ldr	r2, [r3, #8]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	1e5a      	subs	r2, r3, #1
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3714      	adds	r7, #20
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr

08004e46 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004e46:	b580      	push	{r7, lr}
 8004e48:	b08e      	sub	sp, #56	; 0x38
 8004e4a:	af04      	add	r7, sp, #16
 8004e4c:	60f8      	str	r0, [r7, #12]
 8004e4e:	60b9      	str	r1, [r7, #8]
 8004e50:	607a      	str	r2, [r7, #4]
 8004e52:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d10a      	bne.n	8004e70 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e5e:	f383 8811 	msr	BASEPRI, r3
 8004e62:	f3bf 8f6f 	isb	sy
 8004e66:	f3bf 8f4f 	dsb	sy
 8004e6a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004e6c:	bf00      	nop
 8004e6e:	e7fe      	b.n	8004e6e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d10a      	bne.n	8004e8c <xTaskCreateStatic+0x46>
	__asm volatile
 8004e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e7a:	f383 8811 	msr	BASEPRI, r3
 8004e7e:	f3bf 8f6f 	isb	sy
 8004e82:	f3bf 8f4f 	dsb	sy
 8004e86:	61fb      	str	r3, [r7, #28]
}
 8004e88:	bf00      	nop
 8004e8a:	e7fe      	b.n	8004e8a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004e8c:	2354      	movs	r3, #84	; 0x54
 8004e8e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	2b54      	cmp	r3, #84	; 0x54
 8004e94:	d00a      	beq.n	8004eac <xTaskCreateStatic+0x66>
	__asm volatile
 8004e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e9a:	f383 8811 	msr	BASEPRI, r3
 8004e9e:	f3bf 8f6f 	isb	sy
 8004ea2:	f3bf 8f4f 	dsb	sy
 8004ea6:	61bb      	str	r3, [r7, #24]
}
 8004ea8:	bf00      	nop
 8004eaa:	e7fe      	b.n	8004eaa <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004eac:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d01e      	beq.n	8004ef2 <xTaskCreateStatic+0xac>
 8004eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d01b      	beq.n	8004ef2 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ebc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ec2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec6:	2202      	movs	r2, #2
 8004ec8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004ecc:	2300      	movs	r3, #0
 8004ece:	9303      	str	r3, [sp, #12]
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed2:	9302      	str	r3, [sp, #8]
 8004ed4:	f107 0314 	add.w	r3, r7, #20
 8004ed8:	9301      	str	r3, [sp, #4]
 8004eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004edc:	9300      	str	r3, [sp, #0]
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	68b9      	ldr	r1, [r7, #8]
 8004ee4:	68f8      	ldr	r0, [r7, #12]
 8004ee6:	f000 f850 	bl	8004f8a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004eea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004eec:	f000 f8d4 	bl	8005098 <prvAddNewTaskToReadyList>
 8004ef0:	e001      	b.n	8004ef6 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004ef6:	697b      	ldr	r3, [r7, #20]
	}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3728      	adds	r7, #40	; 0x28
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b08c      	sub	sp, #48	; 0x30
 8004f04:	af04      	add	r7, sp, #16
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	603b      	str	r3, [r7, #0]
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004f10:	88fb      	ldrh	r3, [r7, #6]
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	4618      	mov	r0, r3
 8004f16:	f000 fee7 	bl	8005ce8 <pvPortMalloc>
 8004f1a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d00e      	beq.n	8004f40 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004f22:	2054      	movs	r0, #84	; 0x54
 8004f24:	f000 fee0 	bl	8005ce8 <pvPortMalloc>
 8004f28:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d003      	beq.n	8004f38 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	631a      	str	r2, [r3, #48]	; 0x30
 8004f36:	e005      	b.n	8004f44 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004f38:	6978      	ldr	r0, [r7, #20]
 8004f3a:	f000 ffa1 	bl	8005e80 <vPortFree>
 8004f3e:	e001      	b.n	8004f44 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004f40:	2300      	movs	r3, #0
 8004f42:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d017      	beq.n	8004f7a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004f52:	88fa      	ldrh	r2, [r7, #6]
 8004f54:	2300      	movs	r3, #0
 8004f56:	9303      	str	r3, [sp, #12]
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	9302      	str	r3, [sp, #8]
 8004f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f5e:	9301      	str	r3, [sp, #4]
 8004f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f62:	9300      	str	r3, [sp, #0]
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	68b9      	ldr	r1, [r7, #8]
 8004f68:	68f8      	ldr	r0, [r7, #12]
 8004f6a:	f000 f80e 	bl	8004f8a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f6e:	69f8      	ldr	r0, [r7, #28]
 8004f70:	f000 f892 	bl	8005098 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004f74:	2301      	movs	r3, #1
 8004f76:	61bb      	str	r3, [r7, #24]
 8004f78:	e002      	b.n	8004f80 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004f7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f7e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004f80:	69bb      	ldr	r3, [r7, #24]
	}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3720      	adds	r7, #32
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004f8a:	b580      	push	{r7, lr}
 8004f8c:	b088      	sub	sp, #32
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	60f8      	str	r0, [r7, #12]
 8004f92:	60b9      	str	r1, [r7, #8]
 8004f94:	607a      	str	r2, [r7, #4]
 8004f96:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004fa2:	3b01      	subs	r3, #1
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	4413      	add	r3, r2
 8004fa8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	f023 0307 	bic.w	r3, r3, #7
 8004fb0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	f003 0307 	and.w	r3, r3, #7
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00a      	beq.n	8004fd2 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc0:	f383 8811 	msr	BASEPRI, r3
 8004fc4:	f3bf 8f6f 	isb	sy
 8004fc8:	f3bf 8f4f 	dsb	sy
 8004fcc:	617b      	str	r3, [r7, #20]
}
 8004fce:	bf00      	nop
 8004fd0:	e7fe      	b.n	8004fd0 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d01f      	beq.n	8005018 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004fd8:	2300      	movs	r3, #0
 8004fda:	61fb      	str	r3, [r7, #28]
 8004fdc:	e012      	b.n	8005004 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004fde:	68ba      	ldr	r2, [r7, #8]
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	7819      	ldrb	r1, [r3, #0]
 8004fe6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	4413      	add	r3, r2
 8004fec:	3334      	adds	r3, #52	; 0x34
 8004fee:	460a      	mov	r2, r1
 8004ff0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004ff2:	68ba      	ldr	r2, [r7, #8]
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	4413      	add	r3, r2
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d006      	beq.n	800500c <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	3301      	adds	r3, #1
 8005002:	61fb      	str	r3, [r7, #28]
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	2b0f      	cmp	r3, #15
 8005008:	d9e9      	bls.n	8004fde <prvInitialiseNewTask+0x54>
 800500a:	e000      	b.n	800500e <prvInitialiseNewTask+0x84>
			{
				break;
 800500c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800500e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005010:	2200      	movs	r2, #0
 8005012:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005016:	e003      	b.n	8005020 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501a:	2200      	movs	r2, #0
 800501c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005022:	2b06      	cmp	r3, #6
 8005024:	d901      	bls.n	800502a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005026:	2306      	movs	r3, #6
 8005028:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800502a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800502e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005032:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005034:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005038:	2200      	movs	r2, #0
 800503a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800503c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503e:	3304      	adds	r3, #4
 8005040:	4618      	mov	r0, r3
 8005042:	f7ff fe6c 	bl	8004d1e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005048:	3318      	adds	r3, #24
 800504a:	4618      	mov	r0, r3
 800504c:	f7ff fe67 	bl	8004d1e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005052:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005054:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005058:	f1c3 0207 	rsb	r2, r3, #7
 800505c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800505e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005062:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005064:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005068:	2200      	movs	r2, #0
 800506a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800506c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506e:	2200      	movs	r2, #0
 8005070:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005074:	683a      	ldr	r2, [r7, #0]
 8005076:	68f9      	ldr	r1, [r7, #12]
 8005078:	69b8      	ldr	r0, [r7, #24]
 800507a:	f000 fc23 	bl	80058c4 <pxPortInitialiseStack>
 800507e:	4602      	mov	r2, r0
 8005080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005082:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005086:	2b00      	cmp	r3, #0
 8005088:	d002      	beq.n	8005090 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800508a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800508c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800508e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005090:	bf00      	nop
 8005092:	3720      	adds	r7, #32
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80050a0:	f000 fd40 	bl	8005b24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80050a4:	4b2a      	ldr	r3, [pc, #168]	; (8005150 <prvAddNewTaskToReadyList+0xb8>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	3301      	adds	r3, #1
 80050aa:	4a29      	ldr	r2, [pc, #164]	; (8005150 <prvAddNewTaskToReadyList+0xb8>)
 80050ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80050ae:	4b29      	ldr	r3, [pc, #164]	; (8005154 <prvAddNewTaskToReadyList+0xbc>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d109      	bne.n	80050ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80050b6:	4a27      	ldr	r2, [pc, #156]	; (8005154 <prvAddNewTaskToReadyList+0xbc>)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80050bc:	4b24      	ldr	r3, [pc, #144]	; (8005150 <prvAddNewTaskToReadyList+0xb8>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d110      	bne.n	80050e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80050c4:	f000 fabc 	bl	8005640 <prvInitialiseTaskLists>
 80050c8:	e00d      	b.n	80050e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80050ca:	4b23      	ldr	r3, [pc, #140]	; (8005158 <prvAddNewTaskToReadyList+0xc0>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d109      	bne.n	80050e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80050d2:	4b20      	ldr	r3, [pc, #128]	; (8005154 <prvAddNewTaskToReadyList+0xbc>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050dc:	429a      	cmp	r2, r3
 80050de:	d802      	bhi.n	80050e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80050e0:	4a1c      	ldr	r2, [pc, #112]	; (8005154 <prvAddNewTaskToReadyList+0xbc>)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80050e6:	4b1d      	ldr	r3, [pc, #116]	; (800515c <prvAddNewTaskToReadyList+0xc4>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	3301      	adds	r3, #1
 80050ec:	4a1b      	ldr	r2, [pc, #108]	; (800515c <prvAddNewTaskToReadyList+0xc4>)
 80050ee:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f4:	2201      	movs	r2, #1
 80050f6:	409a      	lsls	r2, r3
 80050f8:	4b19      	ldr	r3, [pc, #100]	; (8005160 <prvAddNewTaskToReadyList+0xc8>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	4a18      	ldr	r2, [pc, #96]	; (8005160 <prvAddNewTaskToReadyList+0xc8>)
 8005100:	6013      	str	r3, [r2, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005106:	4613      	mov	r3, r2
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	4413      	add	r3, r2
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	4a15      	ldr	r2, [pc, #84]	; (8005164 <prvAddNewTaskToReadyList+0xcc>)
 8005110:	441a      	add	r2, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	3304      	adds	r3, #4
 8005116:	4619      	mov	r1, r3
 8005118:	4610      	mov	r0, r2
 800511a:	f7ff fe0d 	bl	8004d38 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800511e:	f000 fd31 	bl	8005b84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005122:	4b0d      	ldr	r3, [pc, #52]	; (8005158 <prvAddNewTaskToReadyList+0xc0>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00e      	beq.n	8005148 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800512a:	4b0a      	ldr	r3, [pc, #40]	; (8005154 <prvAddNewTaskToReadyList+0xbc>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005134:	429a      	cmp	r2, r3
 8005136:	d207      	bcs.n	8005148 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005138:	4b0b      	ldr	r3, [pc, #44]	; (8005168 <prvAddNewTaskToReadyList+0xd0>)
 800513a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800513e:	601a      	str	r2, [r3, #0]
 8005140:	f3bf 8f4f 	dsb	sy
 8005144:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005148:	bf00      	nop
 800514a:	3708      	adds	r7, #8
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}
 8005150:	20000978 	.word	0x20000978
 8005154:	20000878 	.word	0x20000878
 8005158:	20000984 	.word	0x20000984
 800515c:	20000994 	.word	0x20000994
 8005160:	20000980 	.word	0x20000980
 8005164:	2000087c 	.word	0x2000087c
 8005168:	e000ed04 	.word	0xe000ed04

0800516c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800516c:	b580      	push	{r7, lr}
 800516e:	b084      	sub	sp, #16
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005174:	2300      	movs	r3, #0
 8005176:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d017      	beq.n	80051ae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800517e:	4b13      	ldr	r3, [pc, #76]	; (80051cc <vTaskDelay+0x60>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00a      	beq.n	800519c <vTaskDelay+0x30>
	__asm volatile
 8005186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800518a:	f383 8811 	msr	BASEPRI, r3
 800518e:	f3bf 8f6f 	isb	sy
 8005192:	f3bf 8f4f 	dsb	sy
 8005196:	60bb      	str	r3, [r7, #8]
}
 8005198:	bf00      	nop
 800519a:	e7fe      	b.n	800519a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800519c:	f000 f87a 	bl	8005294 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80051a0:	2100      	movs	r1, #0
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 fb28 	bl	80057f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80051a8:	f000 f882 	bl	80052b0 <xTaskResumeAll>
 80051ac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d107      	bne.n	80051c4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80051b4:	4b06      	ldr	r3, [pc, #24]	; (80051d0 <vTaskDelay+0x64>)
 80051b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051ba:	601a      	str	r2, [r3, #0]
 80051bc:	f3bf 8f4f 	dsb	sy
 80051c0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80051c4:	bf00      	nop
 80051c6:	3710      	adds	r7, #16
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	200009a0 	.word	0x200009a0
 80051d0:	e000ed04 	.word	0xe000ed04

080051d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b08a      	sub	sp, #40	; 0x28
 80051d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80051da:	2300      	movs	r3, #0
 80051dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80051de:	2300      	movs	r3, #0
 80051e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80051e2:	463a      	mov	r2, r7
 80051e4:	1d39      	adds	r1, r7, #4
 80051e6:	f107 0308 	add.w	r3, r7, #8
 80051ea:	4618      	mov	r0, r3
 80051ec:	f7fb f9c2 	bl	8000574 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80051f0:	6839      	ldr	r1, [r7, #0]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	68ba      	ldr	r2, [r7, #8]
 80051f6:	9202      	str	r2, [sp, #8]
 80051f8:	9301      	str	r3, [sp, #4]
 80051fa:	2300      	movs	r3, #0
 80051fc:	9300      	str	r3, [sp, #0]
 80051fe:	2300      	movs	r3, #0
 8005200:	460a      	mov	r2, r1
 8005202:	491e      	ldr	r1, [pc, #120]	; (800527c <vTaskStartScheduler+0xa8>)
 8005204:	481e      	ldr	r0, [pc, #120]	; (8005280 <vTaskStartScheduler+0xac>)
 8005206:	f7ff fe1e 	bl	8004e46 <xTaskCreateStatic>
 800520a:	4603      	mov	r3, r0
 800520c:	4a1d      	ldr	r2, [pc, #116]	; (8005284 <vTaskStartScheduler+0xb0>)
 800520e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005210:	4b1c      	ldr	r3, [pc, #112]	; (8005284 <vTaskStartScheduler+0xb0>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d002      	beq.n	800521e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005218:	2301      	movs	r3, #1
 800521a:	617b      	str	r3, [r7, #20]
 800521c:	e001      	b.n	8005222 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800521e:	2300      	movs	r3, #0
 8005220:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	2b01      	cmp	r3, #1
 8005226:	d116      	bne.n	8005256 <vTaskStartScheduler+0x82>
	__asm volatile
 8005228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800522c:	f383 8811 	msr	BASEPRI, r3
 8005230:	f3bf 8f6f 	isb	sy
 8005234:	f3bf 8f4f 	dsb	sy
 8005238:	613b      	str	r3, [r7, #16]
}
 800523a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800523c:	4b12      	ldr	r3, [pc, #72]	; (8005288 <vTaskStartScheduler+0xb4>)
 800523e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005242:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005244:	4b11      	ldr	r3, [pc, #68]	; (800528c <vTaskStartScheduler+0xb8>)
 8005246:	2201      	movs	r2, #1
 8005248:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800524a:	4b11      	ldr	r3, [pc, #68]	; (8005290 <vTaskStartScheduler+0xbc>)
 800524c:	2200      	movs	r2, #0
 800524e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005250:	f000 fbc6 	bl	80059e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005254:	e00e      	b.n	8005274 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800525c:	d10a      	bne.n	8005274 <vTaskStartScheduler+0xa0>
	__asm volatile
 800525e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005262:	f383 8811 	msr	BASEPRI, r3
 8005266:	f3bf 8f6f 	isb	sy
 800526a:	f3bf 8f4f 	dsb	sy
 800526e:	60fb      	str	r3, [r7, #12]
}
 8005270:	bf00      	nop
 8005272:	e7fe      	b.n	8005272 <vTaskStartScheduler+0x9e>
}
 8005274:	bf00      	nop
 8005276:	3718      	adds	r7, #24
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}
 800527c:	08006b34 	.word	0x08006b34
 8005280:	08005611 	.word	0x08005611
 8005284:	2000099c 	.word	0x2000099c
 8005288:	20000998 	.word	0x20000998
 800528c:	20000984 	.word	0x20000984
 8005290:	2000097c 	.word	0x2000097c

08005294 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005294:	b480      	push	{r7}
 8005296:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005298:	4b04      	ldr	r3, [pc, #16]	; (80052ac <vTaskSuspendAll+0x18>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	3301      	adds	r3, #1
 800529e:	4a03      	ldr	r2, [pc, #12]	; (80052ac <vTaskSuspendAll+0x18>)
 80052a0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80052a2:	bf00      	nop
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr
 80052ac:	200009a0 	.word	0x200009a0

080052b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80052b6:	2300      	movs	r3, #0
 80052b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80052ba:	2300      	movs	r3, #0
 80052bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80052be:	4b41      	ldr	r3, [pc, #260]	; (80053c4 <xTaskResumeAll+0x114>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d10a      	bne.n	80052dc <xTaskResumeAll+0x2c>
	__asm volatile
 80052c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ca:	f383 8811 	msr	BASEPRI, r3
 80052ce:	f3bf 8f6f 	isb	sy
 80052d2:	f3bf 8f4f 	dsb	sy
 80052d6:	603b      	str	r3, [r7, #0]
}
 80052d8:	bf00      	nop
 80052da:	e7fe      	b.n	80052da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80052dc:	f000 fc22 	bl	8005b24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80052e0:	4b38      	ldr	r3, [pc, #224]	; (80053c4 <xTaskResumeAll+0x114>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	3b01      	subs	r3, #1
 80052e6:	4a37      	ldr	r2, [pc, #220]	; (80053c4 <xTaskResumeAll+0x114>)
 80052e8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052ea:	4b36      	ldr	r3, [pc, #216]	; (80053c4 <xTaskResumeAll+0x114>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d161      	bne.n	80053b6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80052f2:	4b35      	ldr	r3, [pc, #212]	; (80053c8 <xTaskResumeAll+0x118>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d05d      	beq.n	80053b6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80052fa:	e02e      	b.n	800535a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052fc:	4b33      	ldr	r3, [pc, #204]	; (80053cc <xTaskResumeAll+0x11c>)
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	3318      	adds	r3, #24
 8005308:	4618      	mov	r0, r3
 800530a:	f7ff fd72 	bl	8004df2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	3304      	adds	r3, #4
 8005312:	4618      	mov	r0, r3
 8005314:	f7ff fd6d 	bl	8004df2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800531c:	2201      	movs	r2, #1
 800531e:	409a      	lsls	r2, r3
 8005320:	4b2b      	ldr	r3, [pc, #172]	; (80053d0 <xTaskResumeAll+0x120>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4313      	orrs	r3, r2
 8005326:	4a2a      	ldr	r2, [pc, #168]	; (80053d0 <xTaskResumeAll+0x120>)
 8005328:	6013      	str	r3, [r2, #0]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800532e:	4613      	mov	r3, r2
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	4413      	add	r3, r2
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	4a27      	ldr	r2, [pc, #156]	; (80053d4 <xTaskResumeAll+0x124>)
 8005338:	441a      	add	r2, r3
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	3304      	adds	r3, #4
 800533e:	4619      	mov	r1, r3
 8005340:	4610      	mov	r0, r2
 8005342:	f7ff fcf9 	bl	8004d38 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800534a:	4b23      	ldr	r3, [pc, #140]	; (80053d8 <xTaskResumeAll+0x128>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005350:	429a      	cmp	r2, r3
 8005352:	d302      	bcc.n	800535a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005354:	4b21      	ldr	r3, [pc, #132]	; (80053dc <xTaskResumeAll+0x12c>)
 8005356:	2201      	movs	r2, #1
 8005358:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800535a:	4b1c      	ldr	r3, [pc, #112]	; (80053cc <xTaskResumeAll+0x11c>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1cc      	bne.n	80052fc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d001      	beq.n	800536c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005368:	f000 fa08 	bl	800577c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800536c:	4b1c      	ldr	r3, [pc, #112]	; (80053e0 <xTaskResumeAll+0x130>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d010      	beq.n	800539a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005378:	f000 f836 	bl	80053e8 <xTaskIncrementTick>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d002      	beq.n	8005388 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005382:	4b16      	ldr	r3, [pc, #88]	; (80053dc <xTaskResumeAll+0x12c>)
 8005384:	2201      	movs	r2, #1
 8005386:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	3b01      	subs	r3, #1
 800538c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d1f1      	bne.n	8005378 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005394:	4b12      	ldr	r3, [pc, #72]	; (80053e0 <xTaskResumeAll+0x130>)
 8005396:	2200      	movs	r2, #0
 8005398:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800539a:	4b10      	ldr	r3, [pc, #64]	; (80053dc <xTaskResumeAll+0x12c>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d009      	beq.n	80053b6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80053a2:	2301      	movs	r3, #1
 80053a4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80053a6:	4b0f      	ldr	r3, [pc, #60]	; (80053e4 <xTaskResumeAll+0x134>)
 80053a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053ac:	601a      	str	r2, [r3, #0]
 80053ae:	f3bf 8f4f 	dsb	sy
 80053b2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80053b6:	f000 fbe5 	bl	8005b84 <vPortExitCritical>

	return xAlreadyYielded;
 80053ba:	68bb      	ldr	r3, [r7, #8]
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3710      	adds	r7, #16
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	200009a0 	.word	0x200009a0
 80053c8:	20000978 	.word	0x20000978
 80053cc:	20000938 	.word	0x20000938
 80053d0:	20000980 	.word	0x20000980
 80053d4:	2000087c 	.word	0x2000087c
 80053d8:	20000878 	.word	0x20000878
 80053dc:	2000098c 	.word	0x2000098c
 80053e0:	20000988 	.word	0x20000988
 80053e4:	e000ed04 	.word	0xe000ed04

080053e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b086      	sub	sp, #24
 80053ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80053ee:	2300      	movs	r3, #0
 80053f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053f2:	4b4e      	ldr	r3, [pc, #312]	; (800552c <xTaskIncrementTick+0x144>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	f040 808e 	bne.w	8005518 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80053fc:	4b4c      	ldr	r3, [pc, #304]	; (8005530 <xTaskIncrementTick+0x148>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	3301      	adds	r3, #1
 8005402:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005404:	4a4a      	ldr	r2, [pc, #296]	; (8005530 <xTaskIncrementTick+0x148>)
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d120      	bne.n	8005452 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005410:	4b48      	ldr	r3, [pc, #288]	; (8005534 <xTaskIncrementTick+0x14c>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00a      	beq.n	8005430 <xTaskIncrementTick+0x48>
	__asm volatile
 800541a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800541e:	f383 8811 	msr	BASEPRI, r3
 8005422:	f3bf 8f6f 	isb	sy
 8005426:	f3bf 8f4f 	dsb	sy
 800542a:	603b      	str	r3, [r7, #0]
}
 800542c:	bf00      	nop
 800542e:	e7fe      	b.n	800542e <xTaskIncrementTick+0x46>
 8005430:	4b40      	ldr	r3, [pc, #256]	; (8005534 <xTaskIncrementTick+0x14c>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	60fb      	str	r3, [r7, #12]
 8005436:	4b40      	ldr	r3, [pc, #256]	; (8005538 <xTaskIncrementTick+0x150>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a3e      	ldr	r2, [pc, #248]	; (8005534 <xTaskIncrementTick+0x14c>)
 800543c:	6013      	str	r3, [r2, #0]
 800543e:	4a3e      	ldr	r2, [pc, #248]	; (8005538 <xTaskIncrementTick+0x150>)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6013      	str	r3, [r2, #0]
 8005444:	4b3d      	ldr	r3, [pc, #244]	; (800553c <xTaskIncrementTick+0x154>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	3301      	adds	r3, #1
 800544a:	4a3c      	ldr	r2, [pc, #240]	; (800553c <xTaskIncrementTick+0x154>)
 800544c:	6013      	str	r3, [r2, #0]
 800544e:	f000 f995 	bl	800577c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005452:	4b3b      	ldr	r3, [pc, #236]	; (8005540 <xTaskIncrementTick+0x158>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	693a      	ldr	r2, [r7, #16]
 8005458:	429a      	cmp	r2, r3
 800545a:	d348      	bcc.n	80054ee <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800545c:	4b35      	ldr	r3, [pc, #212]	; (8005534 <xTaskIncrementTick+0x14c>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d104      	bne.n	8005470 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005466:	4b36      	ldr	r3, [pc, #216]	; (8005540 <xTaskIncrementTick+0x158>)
 8005468:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800546c:	601a      	str	r2, [r3, #0]
					break;
 800546e:	e03e      	b.n	80054ee <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005470:	4b30      	ldr	r3, [pc, #192]	; (8005534 <xTaskIncrementTick+0x14c>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005480:	693a      	ldr	r2, [r7, #16]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	429a      	cmp	r2, r3
 8005486:	d203      	bcs.n	8005490 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005488:	4a2d      	ldr	r2, [pc, #180]	; (8005540 <xTaskIncrementTick+0x158>)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800548e:	e02e      	b.n	80054ee <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	3304      	adds	r3, #4
 8005494:	4618      	mov	r0, r3
 8005496:	f7ff fcac 	bl	8004df2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d004      	beq.n	80054ac <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	3318      	adds	r3, #24
 80054a6:	4618      	mov	r0, r3
 80054a8:	f7ff fca3 	bl	8004df2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b0:	2201      	movs	r2, #1
 80054b2:	409a      	lsls	r2, r3
 80054b4:	4b23      	ldr	r3, [pc, #140]	; (8005544 <xTaskIncrementTick+0x15c>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	4a22      	ldr	r2, [pc, #136]	; (8005544 <xTaskIncrementTick+0x15c>)
 80054bc:	6013      	str	r3, [r2, #0]
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054c2:	4613      	mov	r3, r2
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	4413      	add	r3, r2
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	4a1f      	ldr	r2, [pc, #124]	; (8005548 <xTaskIncrementTick+0x160>)
 80054cc:	441a      	add	r2, r3
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	3304      	adds	r3, #4
 80054d2:	4619      	mov	r1, r3
 80054d4:	4610      	mov	r0, r2
 80054d6:	f7ff fc2f 	bl	8004d38 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054de:	4b1b      	ldr	r3, [pc, #108]	; (800554c <xTaskIncrementTick+0x164>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d3b9      	bcc.n	800545c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80054e8:	2301      	movs	r3, #1
 80054ea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054ec:	e7b6      	b.n	800545c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80054ee:	4b17      	ldr	r3, [pc, #92]	; (800554c <xTaskIncrementTick+0x164>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054f4:	4914      	ldr	r1, [pc, #80]	; (8005548 <xTaskIncrementTick+0x160>)
 80054f6:	4613      	mov	r3, r2
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	4413      	add	r3, r2
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	440b      	add	r3, r1
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2b01      	cmp	r3, #1
 8005504:	d901      	bls.n	800550a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005506:	2301      	movs	r3, #1
 8005508:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800550a:	4b11      	ldr	r3, [pc, #68]	; (8005550 <xTaskIncrementTick+0x168>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d007      	beq.n	8005522 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005512:	2301      	movs	r3, #1
 8005514:	617b      	str	r3, [r7, #20]
 8005516:	e004      	b.n	8005522 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005518:	4b0e      	ldr	r3, [pc, #56]	; (8005554 <xTaskIncrementTick+0x16c>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	3301      	adds	r3, #1
 800551e:	4a0d      	ldr	r2, [pc, #52]	; (8005554 <xTaskIncrementTick+0x16c>)
 8005520:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005522:	697b      	ldr	r3, [r7, #20]
}
 8005524:	4618      	mov	r0, r3
 8005526:	3718      	adds	r7, #24
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}
 800552c:	200009a0 	.word	0x200009a0
 8005530:	2000097c 	.word	0x2000097c
 8005534:	20000930 	.word	0x20000930
 8005538:	20000934 	.word	0x20000934
 800553c:	20000990 	.word	0x20000990
 8005540:	20000998 	.word	0x20000998
 8005544:	20000980 	.word	0x20000980
 8005548:	2000087c 	.word	0x2000087c
 800554c:	20000878 	.word	0x20000878
 8005550:	2000098c 	.word	0x2000098c
 8005554:	20000988 	.word	0x20000988

08005558 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005558:	b480      	push	{r7}
 800555a:	b087      	sub	sp, #28
 800555c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800555e:	4b27      	ldr	r3, [pc, #156]	; (80055fc <vTaskSwitchContext+0xa4>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d003      	beq.n	800556e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005566:	4b26      	ldr	r3, [pc, #152]	; (8005600 <vTaskSwitchContext+0xa8>)
 8005568:	2201      	movs	r2, #1
 800556a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800556c:	e03f      	b.n	80055ee <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800556e:	4b24      	ldr	r3, [pc, #144]	; (8005600 <vTaskSwitchContext+0xa8>)
 8005570:	2200      	movs	r2, #0
 8005572:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005574:	4b23      	ldr	r3, [pc, #140]	; (8005604 <vTaskSwitchContext+0xac>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	fab3 f383 	clz	r3, r3
 8005580:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005582:	7afb      	ldrb	r3, [r7, #11]
 8005584:	f1c3 031f 	rsb	r3, r3, #31
 8005588:	617b      	str	r3, [r7, #20]
 800558a:	491f      	ldr	r1, [pc, #124]	; (8005608 <vTaskSwitchContext+0xb0>)
 800558c:	697a      	ldr	r2, [r7, #20]
 800558e:	4613      	mov	r3, r2
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	4413      	add	r3, r2
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	440b      	add	r3, r1
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d10a      	bne.n	80055b4 <vTaskSwitchContext+0x5c>
	__asm volatile
 800559e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a2:	f383 8811 	msr	BASEPRI, r3
 80055a6:	f3bf 8f6f 	isb	sy
 80055aa:	f3bf 8f4f 	dsb	sy
 80055ae:	607b      	str	r3, [r7, #4]
}
 80055b0:	bf00      	nop
 80055b2:	e7fe      	b.n	80055b2 <vTaskSwitchContext+0x5a>
 80055b4:	697a      	ldr	r2, [r7, #20]
 80055b6:	4613      	mov	r3, r2
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	4413      	add	r3, r2
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	4a12      	ldr	r2, [pc, #72]	; (8005608 <vTaskSwitchContext+0xb0>)
 80055c0:	4413      	add	r3, r2
 80055c2:	613b      	str	r3, [r7, #16]
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	685a      	ldr	r2, [r3, #4]
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	605a      	str	r2, [r3, #4]
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	685a      	ldr	r2, [r3, #4]
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	3308      	adds	r3, #8
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d104      	bne.n	80055e4 <vTaskSwitchContext+0x8c>
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	685a      	ldr	r2, [r3, #4]
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	605a      	str	r2, [r3, #4]
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	4a08      	ldr	r2, [pc, #32]	; (800560c <vTaskSwitchContext+0xb4>)
 80055ec:	6013      	str	r3, [r2, #0]
}
 80055ee:	bf00      	nop
 80055f0:	371c      	adds	r7, #28
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	200009a0 	.word	0x200009a0
 8005600:	2000098c 	.word	0x2000098c
 8005604:	20000980 	.word	0x20000980
 8005608:	2000087c 	.word	0x2000087c
 800560c:	20000878 	.word	0x20000878

08005610 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b082      	sub	sp, #8
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005618:	f000 f852 	bl	80056c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800561c:	4b06      	ldr	r3, [pc, #24]	; (8005638 <prvIdleTask+0x28>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2b01      	cmp	r3, #1
 8005622:	d9f9      	bls.n	8005618 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005624:	4b05      	ldr	r3, [pc, #20]	; (800563c <prvIdleTask+0x2c>)
 8005626:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800562a:	601a      	str	r2, [r3, #0]
 800562c:	f3bf 8f4f 	dsb	sy
 8005630:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005634:	e7f0      	b.n	8005618 <prvIdleTask+0x8>
 8005636:	bf00      	nop
 8005638:	2000087c 	.word	0x2000087c
 800563c:	e000ed04 	.word	0xe000ed04

08005640 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b082      	sub	sp, #8
 8005644:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005646:	2300      	movs	r3, #0
 8005648:	607b      	str	r3, [r7, #4]
 800564a:	e00c      	b.n	8005666 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	4613      	mov	r3, r2
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	4413      	add	r3, r2
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	4a12      	ldr	r2, [pc, #72]	; (80056a0 <prvInitialiseTaskLists+0x60>)
 8005658:	4413      	add	r3, r2
 800565a:	4618      	mov	r0, r3
 800565c:	f7ff fb3f 	bl	8004cde <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	3301      	adds	r3, #1
 8005664:	607b      	str	r3, [r7, #4]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2b06      	cmp	r3, #6
 800566a:	d9ef      	bls.n	800564c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800566c:	480d      	ldr	r0, [pc, #52]	; (80056a4 <prvInitialiseTaskLists+0x64>)
 800566e:	f7ff fb36 	bl	8004cde <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005672:	480d      	ldr	r0, [pc, #52]	; (80056a8 <prvInitialiseTaskLists+0x68>)
 8005674:	f7ff fb33 	bl	8004cde <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005678:	480c      	ldr	r0, [pc, #48]	; (80056ac <prvInitialiseTaskLists+0x6c>)
 800567a:	f7ff fb30 	bl	8004cde <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800567e:	480c      	ldr	r0, [pc, #48]	; (80056b0 <prvInitialiseTaskLists+0x70>)
 8005680:	f7ff fb2d 	bl	8004cde <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005684:	480b      	ldr	r0, [pc, #44]	; (80056b4 <prvInitialiseTaskLists+0x74>)
 8005686:	f7ff fb2a 	bl	8004cde <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800568a:	4b0b      	ldr	r3, [pc, #44]	; (80056b8 <prvInitialiseTaskLists+0x78>)
 800568c:	4a05      	ldr	r2, [pc, #20]	; (80056a4 <prvInitialiseTaskLists+0x64>)
 800568e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005690:	4b0a      	ldr	r3, [pc, #40]	; (80056bc <prvInitialiseTaskLists+0x7c>)
 8005692:	4a05      	ldr	r2, [pc, #20]	; (80056a8 <prvInitialiseTaskLists+0x68>)
 8005694:	601a      	str	r2, [r3, #0]
}
 8005696:	bf00      	nop
 8005698:	3708      	adds	r7, #8
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop
 80056a0:	2000087c 	.word	0x2000087c
 80056a4:	20000908 	.word	0x20000908
 80056a8:	2000091c 	.word	0x2000091c
 80056ac:	20000938 	.word	0x20000938
 80056b0:	2000094c 	.word	0x2000094c
 80056b4:	20000964 	.word	0x20000964
 80056b8:	20000930 	.word	0x20000930
 80056bc:	20000934 	.word	0x20000934

080056c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b082      	sub	sp, #8
 80056c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80056c6:	e019      	b.n	80056fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80056c8:	f000 fa2c 	bl	8005b24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056cc:	4b10      	ldr	r3, [pc, #64]	; (8005710 <prvCheckTasksWaitingTermination+0x50>)
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	3304      	adds	r3, #4
 80056d8:	4618      	mov	r0, r3
 80056da:	f7ff fb8a 	bl	8004df2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80056de:	4b0d      	ldr	r3, [pc, #52]	; (8005714 <prvCheckTasksWaitingTermination+0x54>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	3b01      	subs	r3, #1
 80056e4:	4a0b      	ldr	r2, [pc, #44]	; (8005714 <prvCheckTasksWaitingTermination+0x54>)
 80056e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80056e8:	4b0b      	ldr	r3, [pc, #44]	; (8005718 <prvCheckTasksWaitingTermination+0x58>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	3b01      	subs	r3, #1
 80056ee:	4a0a      	ldr	r2, [pc, #40]	; (8005718 <prvCheckTasksWaitingTermination+0x58>)
 80056f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80056f2:	f000 fa47 	bl	8005b84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 f810 	bl	800571c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80056fc:	4b06      	ldr	r3, [pc, #24]	; (8005718 <prvCheckTasksWaitingTermination+0x58>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d1e1      	bne.n	80056c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005704:	bf00      	nop
 8005706:	bf00      	nop
 8005708:	3708      	adds	r7, #8
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	2000094c 	.word	0x2000094c
 8005714:	20000978 	.word	0x20000978
 8005718:	20000960 	.word	0x20000960

0800571c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800572a:	2b00      	cmp	r3, #0
 800572c:	d108      	bne.n	8005740 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005732:	4618      	mov	r0, r3
 8005734:	f000 fba4 	bl	8005e80 <vPortFree>
				vPortFree( pxTCB );
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f000 fba1 	bl	8005e80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800573e:	e018      	b.n	8005772 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005746:	2b01      	cmp	r3, #1
 8005748:	d103      	bne.n	8005752 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 fb98 	bl	8005e80 <vPortFree>
	}
 8005750:	e00f      	b.n	8005772 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005758:	2b02      	cmp	r3, #2
 800575a:	d00a      	beq.n	8005772 <prvDeleteTCB+0x56>
	__asm volatile
 800575c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005760:	f383 8811 	msr	BASEPRI, r3
 8005764:	f3bf 8f6f 	isb	sy
 8005768:	f3bf 8f4f 	dsb	sy
 800576c:	60fb      	str	r3, [r7, #12]
}
 800576e:	bf00      	nop
 8005770:	e7fe      	b.n	8005770 <prvDeleteTCB+0x54>
	}
 8005772:	bf00      	nop
 8005774:	3710      	adds	r7, #16
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
	...

0800577c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800577c:	b480      	push	{r7}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005782:	4b0c      	ldr	r3, [pc, #48]	; (80057b4 <prvResetNextTaskUnblockTime+0x38>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d104      	bne.n	8005796 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800578c:	4b0a      	ldr	r3, [pc, #40]	; (80057b8 <prvResetNextTaskUnblockTime+0x3c>)
 800578e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005792:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005794:	e008      	b.n	80057a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005796:	4b07      	ldr	r3, [pc, #28]	; (80057b4 <prvResetNextTaskUnblockTime+0x38>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	4a04      	ldr	r2, [pc, #16]	; (80057b8 <prvResetNextTaskUnblockTime+0x3c>)
 80057a6:	6013      	str	r3, [r2, #0]
}
 80057a8:	bf00      	nop
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr
 80057b4:	20000930 	.word	0x20000930
 80057b8:	20000998 	.word	0x20000998

080057bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80057c2:	4b0b      	ldr	r3, [pc, #44]	; (80057f0 <xTaskGetSchedulerState+0x34>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d102      	bne.n	80057d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80057ca:	2301      	movs	r3, #1
 80057cc:	607b      	str	r3, [r7, #4]
 80057ce:	e008      	b.n	80057e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057d0:	4b08      	ldr	r3, [pc, #32]	; (80057f4 <xTaskGetSchedulerState+0x38>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d102      	bne.n	80057de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80057d8:	2302      	movs	r3, #2
 80057da:	607b      	str	r3, [r7, #4]
 80057dc:	e001      	b.n	80057e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80057de:	2300      	movs	r3, #0
 80057e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80057e2:	687b      	ldr	r3, [r7, #4]
	}
 80057e4:	4618      	mov	r0, r3
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr
 80057f0:	20000984 	.word	0x20000984
 80057f4:	200009a0 	.word	0x200009a0

080057f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005802:	4b29      	ldr	r3, [pc, #164]	; (80058a8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005808:	4b28      	ldr	r3, [pc, #160]	; (80058ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	3304      	adds	r3, #4
 800580e:	4618      	mov	r0, r3
 8005810:	f7ff faef 	bl	8004df2 <uxListRemove>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d10b      	bne.n	8005832 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800581a:	4b24      	ldr	r3, [pc, #144]	; (80058ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005820:	2201      	movs	r2, #1
 8005822:	fa02 f303 	lsl.w	r3, r2, r3
 8005826:	43da      	mvns	r2, r3
 8005828:	4b21      	ldr	r3, [pc, #132]	; (80058b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4013      	ands	r3, r2
 800582e:	4a20      	ldr	r2, [pc, #128]	; (80058b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005830:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005838:	d10a      	bne.n	8005850 <prvAddCurrentTaskToDelayedList+0x58>
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d007      	beq.n	8005850 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005840:	4b1a      	ldr	r3, [pc, #104]	; (80058ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	3304      	adds	r3, #4
 8005846:	4619      	mov	r1, r3
 8005848:	481a      	ldr	r0, [pc, #104]	; (80058b4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800584a:	f7ff fa75 	bl	8004d38 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800584e:	e026      	b.n	800589e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4413      	add	r3, r2
 8005856:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005858:	4b14      	ldr	r3, [pc, #80]	; (80058ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68ba      	ldr	r2, [r7, #8]
 800585e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005860:	68ba      	ldr	r2, [r7, #8]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	429a      	cmp	r2, r3
 8005866:	d209      	bcs.n	800587c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005868:	4b13      	ldr	r3, [pc, #76]	; (80058b8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	4b0f      	ldr	r3, [pc, #60]	; (80058ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	3304      	adds	r3, #4
 8005872:	4619      	mov	r1, r3
 8005874:	4610      	mov	r0, r2
 8005876:	f7ff fa83 	bl	8004d80 <vListInsert>
}
 800587a:	e010      	b.n	800589e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800587c:	4b0f      	ldr	r3, [pc, #60]	; (80058bc <prvAddCurrentTaskToDelayedList+0xc4>)
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	4b0a      	ldr	r3, [pc, #40]	; (80058ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	3304      	adds	r3, #4
 8005886:	4619      	mov	r1, r3
 8005888:	4610      	mov	r0, r2
 800588a:	f7ff fa79 	bl	8004d80 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800588e:	4b0c      	ldr	r3, [pc, #48]	; (80058c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	68ba      	ldr	r2, [r7, #8]
 8005894:	429a      	cmp	r2, r3
 8005896:	d202      	bcs.n	800589e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005898:	4a09      	ldr	r2, [pc, #36]	; (80058c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	6013      	str	r3, [r2, #0]
}
 800589e:	bf00      	nop
 80058a0:	3710      	adds	r7, #16
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	2000097c 	.word	0x2000097c
 80058ac:	20000878 	.word	0x20000878
 80058b0:	20000980 	.word	0x20000980
 80058b4:	20000964 	.word	0x20000964
 80058b8:	20000934 	.word	0x20000934
 80058bc:	20000930 	.word	0x20000930
 80058c0:	20000998 	.word	0x20000998

080058c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80058c4:	b480      	push	{r7}
 80058c6:	b085      	sub	sp, #20
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	60b9      	str	r1, [r7, #8]
 80058ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	3b04      	subs	r3, #4
 80058d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80058dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	3b04      	subs	r3, #4
 80058e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	f023 0201 	bic.w	r2, r3, #1
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	3b04      	subs	r3, #4
 80058f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80058f4:	4a0c      	ldr	r2, [pc, #48]	; (8005928 <pxPortInitialiseStack+0x64>)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	3b14      	subs	r3, #20
 80058fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	3b04      	subs	r3, #4
 800590a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f06f 0202 	mvn.w	r2, #2
 8005912:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	3b20      	subs	r3, #32
 8005918:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800591a:	68fb      	ldr	r3, [r7, #12]
}
 800591c:	4618      	mov	r0, r3
 800591e:	3714      	adds	r7, #20
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr
 8005928:	0800592d 	.word	0x0800592d

0800592c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800592c:	b480      	push	{r7}
 800592e:	b085      	sub	sp, #20
 8005930:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005932:	2300      	movs	r3, #0
 8005934:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005936:	4b12      	ldr	r3, [pc, #72]	; (8005980 <prvTaskExitError+0x54>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800593e:	d00a      	beq.n	8005956 <prvTaskExitError+0x2a>
	__asm volatile
 8005940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005944:	f383 8811 	msr	BASEPRI, r3
 8005948:	f3bf 8f6f 	isb	sy
 800594c:	f3bf 8f4f 	dsb	sy
 8005950:	60fb      	str	r3, [r7, #12]
}
 8005952:	bf00      	nop
 8005954:	e7fe      	b.n	8005954 <prvTaskExitError+0x28>
	__asm volatile
 8005956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800595a:	f383 8811 	msr	BASEPRI, r3
 800595e:	f3bf 8f6f 	isb	sy
 8005962:	f3bf 8f4f 	dsb	sy
 8005966:	60bb      	str	r3, [r7, #8]
}
 8005968:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800596a:	bf00      	nop
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d0fc      	beq.n	800596c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005972:	bf00      	nop
 8005974:	bf00      	nop
 8005976:	3714      	adds	r7, #20
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr
 8005980:	2000000c 	.word	0x2000000c
	...

08005990 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005990:	4b07      	ldr	r3, [pc, #28]	; (80059b0 <pxCurrentTCBConst2>)
 8005992:	6819      	ldr	r1, [r3, #0]
 8005994:	6808      	ldr	r0, [r1, #0]
 8005996:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800599a:	f380 8809 	msr	PSP, r0
 800599e:	f3bf 8f6f 	isb	sy
 80059a2:	f04f 0000 	mov.w	r0, #0
 80059a6:	f380 8811 	msr	BASEPRI, r0
 80059aa:	4770      	bx	lr
 80059ac:	f3af 8000 	nop.w

080059b0 <pxCurrentTCBConst2>:
 80059b0:	20000878 	.word	0x20000878
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80059b4:	bf00      	nop
 80059b6:	bf00      	nop

080059b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80059b8:	4808      	ldr	r0, [pc, #32]	; (80059dc <prvPortStartFirstTask+0x24>)
 80059ba:	6800      	ldr	r0, [r0, #0]
 80059bc:	6800      	ldr	r0, [r0, #0]
 80059be:	f380 8808 	msr	MSP, r0
 80059c2:	f04f 0000 	mov.w	r0, #0
 80059c6:	f380 8814 	msr	CONTROL, r0
 80059ca:	b662      	cpsie	i
 80059cc:	b661      	cpsie	f
 80059ce:	f3bf 8f4f 	dsb	sy
 80059d2:	f3bf 8f6f 	isb	sy
 80059d6:	df00      	svc	0
 80059d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80059da:	bf00      	nop
 80059dc:	e000ed08 	.word	0xe000ed08

080059e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b086      	sub	sp, #24
 80059e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80059e6:	4b46      	ldr	r3, [pc, #280]	; (8005b00 <xPortStartScheduler+0x120>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a46      	ldr	r2, [pc, #280]	; (8005b04 <xPortStartScheduler+0x124>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d10a      	bne.n	8005a06 <xPortStartScheduler+0x26>
	__asm volatile
 80059f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f4:	f383 8811 	msr	BASEPRI, r3
 80059f8:	f3bf 8f6f 	isb	sy
 80059fc:	f3bf 8f4f 	dsb	sy
 8005a00:	613b      	str	r3, [r7, #16]
}
 8005a02:	bf00      	nop
 8005a04:	e7fe      	b.n	8005a04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005a06:	4b3e      	ldr	r3, [pc, #248]	; (8005b00 <xPortStartScheduler+0x120>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a3f      	ldr	r2, [pc, #252]	; (8005b08 <xPortStartScheduler+0x128>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d10a      	bne.n	8005a26 <xPortStartScheduler+0x46>
	__asm volatile
 8005a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a14:	f383 8811 	msr	BASEPRI, r3
 8005a18:	f3bf 8f6f 	isb	sy
 8005a1c:	f3bf 8f4f 	dsb	sy
 8005a20:	60fb      	str	r3, [r7, #12]
}
 8005a22:	bf00      	nop
 8005a24:	e7fe      	b.n	8005a24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005a26:	4b39      	ldr	r3, [pc, #228]	; (8005b0c <xPortStartScheduler+0x12c>)
 8005a28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	22ff      	movs	r2, #255	; 0xff
 8005a36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005a40:	78fb      	ldrb	r3, [r7, #3]
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005a48:	b2da      	uxtb	r2, r3
 8005a4a:	4b31      	ldr	r3, [pc, #196]	; (8005b10 <xPortStartScheduler+0x130>)
 8005a4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005a4e:	4b31      	ldr	r3, [pc, #196]	; (8005b14 <xPortStartScheduler+0x134>)
 8005a50:	2207      	movs	r2, #7
 8005a52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a54:	e009      	b.n	8005a6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005a56:	4b2f      	ldr	r3, [pc, #188]	; (8005b14 <xPortStartScheduler+0x134>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	4a2d      	ldr	r2, [pc, #180]	; (8005b14 <xPortStartScheduler+0x134>)
 8005a5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005a60:	78fb      	ldrb	r3, [r7, #3]
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	005b      	lsls	r3, r3, #1
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a6a:	78fb      	ldrb	r3, [r7, #3]
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a72:	2b80      	cmp	r3, #128	; 0x80
 8005a74:	d0ef      	beq.n	8005a56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005a76:	4b27      	ldr	r3, [pc, #156]	; (8005b14 <xPortStartScheduler+0x134>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f1c3 0307 	rsb	r3, r3, #7
 8005a7e:	2b04      	cmp	r3, #4
 8005a80:	d00a      	beq.n	8005a98 <xPortStartScheduler+0xb8>
	__asm volatile
 8005a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a86:	f383 8811 	msr	BASEPRI, r3
 8005a8a:	f3bf 8f6f 	isb	sy
 8005a8e:	f3bf 8f4f 	dsb	sy
 8005a92:	60bb      	str	r3, [r7, #8]
}
 8005a94:	bf00      	nop
 8005a96:	e7fe      	b.n	8005a96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005a98:	4b1e      	ldr	r3, [pc, #120]	; (8005b14 <xPortStartScheduler+0x134>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	021b      	lsls	r3, r3, #8
 8005a9e:	4a1d      	ldr	r2, [pc, #116]	; (8005b14 <xPortStartScheduler+0x134>)
 8005aa0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005aa2:	4b1c      	ldr	r3, [pc, #112]	; (8005b14 <xPortStartScheduler+0x134>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005aaa:	4a1a      	ldr	r2, [pc, #104]	; (8005b14 <xPortStartScheduler+0x134>)
 8005aac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	b2da      	uxtb	r2, r3
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005ab6:	4b18      	ldr	r3, [pc, #96]	; (8005b18 <xPortStartScheduler+0x138>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a17      	ldr	r2, [pc, #92]	; (8005b18 <xPortStartScheduler+0x138>)
 8005abc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005ac0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005ac2:	4b15      	ldr	r3, [pc, #84]	; (8005b18 <xPortStartScheduler+0x138>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a14      	ldr	r2, [pc, #80]	; (8005b18 <xPortStartScheduler+0x138>)
 8005ac8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005acc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005ace:	f000 f8dd 	bl	8005c8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005ad2:	4b12      	ldr	r3, [pc, #72]	; (8005b1c <xPortStartScheduler+0x13c>)
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005ad8:	f000 f8fc 	bl	8005cd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005adc:	4b10      	ldr	r3, [pc, #64]	; (8005b20 <xPortStartScheduler+0x140>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a0f      	ldr	r2, [pc, #60]	; (8005b20 <xPortStartScheduler+0x140>)
 8005ae2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005ae6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005ae8:	f7ff ff66 	bl	80059b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005aec:	f7ff fd34 	bl	8005558 <vTaskSwitchContext>
	prvTaskExitError();
 8005af0:	f7ff ff1c 	bl	800592c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3718      	adds	r7, #24
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	e000ed00 	.word	0xe000ed00
 8005b04:	410fc271 	.word	0x410fc271
 8005b08:	410fc270 	.word	0x410fc270
 8005b0c:	e000e400 	.word	0xe000e400
 8005b10:	200009a4 	.word	0x200009a4
 8005b14:	200009a8 	.word	0x200009a8
 8005b18:	e000ed20 	.word	0xe000ed20
 8005b1c:	2000000c 	.word	0x2000000c
 8005b20:	e000ef34 	.word	0xe000ef34

08005b24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
	__asm volatile
 8005b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2e:	f383 8811 	msr	BASEPRI, r3
 8005b32:	f3bf 8f6f 	isb	sy
 8005b36:	f3bf 8f4f 	dsb	sy
 8005b3a:	607b      	str	r3, [r7, #4]
}
 8005b3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005b3e:	4b0f      	ldr	r3, [pc, #60]	; (8005b7c <vPortEnterCritical+0x58>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	3301      	adds	r3, #1
 8005b44:	4a0d      	ldr	r2, [pc, #52]	; (8005b7c <vPortEnterCritical+0x58>)
 8005b46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005b48:	4b0c      	ldr	r3, [pc, #48]	; (8005b7c <vPortEnterCritical+0x58>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d10f      	bne.n	8005b70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005b50:	4b0b      	ldr	r3, [pc, #44]	; (8005b80 <vPortEnterCritical+0x5c>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d00a      	beq.n	8005b70 <vPortEnterCritical+0x4c>
	__asm volatile
 8005b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b5e:	f383 8811 	msr	BASEPRI, r3
 8005b62:	f3bf 8f6f 	isb	sy
 8005b66:	f3bf 8f4f 	dsb	sy
 8005b6a:	603b      	str	r3, [r7, #0]
}
 8005b6c:	bf00      	nop
 8005b6e:	e7fe      	b.n	8005b6e <vPortEnterCritical+0x4a>
	}
}
 8005b70:	bf00      	nop
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr
 8005b7c:	2000000c 	.word	0x2000000c
 8005b80:	e000ed04 	.word	0xe000ed04

08005b84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005b8a:	4b12      	ldr	r3, [pc, #72]	; (8005bd4 <vPortExitCritical+0x50>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d10a      	bne.n	8005ba8 <vPortExitCritical+0x24>
	__asm volatile
 8005b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b96:	f383 8811 	msr	BASEPRI, r3
 8005b9a:	f3bf 8f6f 	isb	sy
 8005b9e:	f3bf 8f4f 	dsb	sy
 8005ba2:	607b      	str	r3, [r7, #4]
}
 8005ba4:	bf00      	nop
 8005ba6:	e7fe      	b.n	8005ba6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005ba8:	4b0a      	ldr	r3, [pc, #40]	; (8005bd4 <vPortExitCritical+0x50>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	3b01      	subs	r3, #1
 8005bae:	4a09      	ldr	r2, [pc, #36]	; (8005bd4 <vPortExitCritical+0x50>)
 8005bb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005bb2:	4b08      	ldr	r3, [pc, #32]	; (8005bd4 <vPortExitCritical+0x50>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d105      	bne.n	8005bc6 <vPortExitCritical+0x42>
 8005bba:	2300      	movs	r3, #0
 8005bbc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005bc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005bc6:	bf00      	nop
 8005bc8:	370c      	adds	r7, #12
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	2000000c 	.word	0x2000000c
	...

08005be0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005be0:	f3ef 8009 	mrs	r0, PSP
 8005be4:	f3bf 8f6f 	isb	sy
 8005be8:	4b15      	ldr	r3, [pc, #84]	; (8005c40 <pxCurrentTCBConst>)
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	f01e 0f10 	tst.w	lr, #16
 8005bf0:	bf08      	it	eq
 8005bf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005bf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bfa:	6010      	str	r0, [r2, #0]
 8005bfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005c00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005c04:	f380 8811 	msr	BASEPRI, r0
 8005c08:	f3bf 8f4f 	dsb	sy
 8005c0c:	f3bf 8f6f 	isb	sy
 8005c10:	f7ff fca2 	bl	8005558 <vTaskSwitchContext>
 8005c14:	f04f 0000 	mov.w	r0, #0
 8005c18:	f380 8811 	msr	BASEPRI, r0
 8005c1c:	bc09      	pop	{r0, r3}
 8005c1e:	6819      	ldr	r1, [r3, #0]
 8005c20:	6808      	ldr	r0, [r1, #0]
 8005c22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c26:	f01e 0f10 	tst.w	lr, #16
 8005c2a:	bf08      	it	eq
 8005c2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005c30:	f380 8809 	msr	PSP, r0
 8005c34:	f3bf 8f6f 	isb	sy
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	f3af 8000 	nop.w

08005c40 <pxCurrentTCBConst>:
 8005c40:	20000878 	.word	0x20000878
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005c44:	bf00      	nop
 8005c46:	bf00      	nop

08005c48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
	__asm volatile
 8005c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c52:	f383 8811 	msr	BASEPRI, r3
 8005c56:	f3bf 8f6f 	isb	sy
 8005c5a:	f3bf 8f4f 	dsb	sy
 8005c5e:	607b      	str	r3, [r7, #4]
}
 8005c60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005c62:	f7ff fbc1 	bl	80053e8 <xTaskIncrementTick>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d003      	beq.n	8005c74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005c6c:	4b06      	ldr	r3, [pc, #24]	; (8005c88 <xPortSysTickHandler+0x40>)
 8005c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c72:	601a      	str	r2, [r3, #0]
 8005c74:	2300      	movs	r3, #0
 8005c76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	f383 8811 	msr	BASEPRI, r3
}
 8005c7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005c80:	bf00      	nop
 8005c82:	3708      	adds	r7, #8
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	e000ed04 	.word	0xe000ed04

08005c8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005c90:	4b0b      	ldr	r3, [pc, #44]	; (8005cc0 <vPortSetupTimerInterrupt+0x34>)
 8005c92:	2200      	movs	r2, #0
 8005c94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005c96:	4b0b      	ldr	r3, [pc, #44]	; (8005cc4 <vPortSetupTimerInterrupt+0x38>)
 8005c98:	2200      	movs	r2, #0
 8005c9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005c9c:	4b0a      	ldr	r3, [pc, #40]	; (8005cc8 <vPortSetupTimerInterrupt+0x3c>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a0a      	ldr	r2, [pc, #40]	; (8005ccc <vPortSetupTimerInterrupt+0x40>)
 8005ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ca6:	099b      	lsrs	r3, r3, #6
 8005ca8:	4a09      	ldr	r2, [pc, #36]	; (8005cd0 <vPortSetupTimerInterrupt+0x44>)
 8005caa:	3b01      	subs	r3, #1
 8005cac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005cae:	4b04      	ldr	r3, [pc, #16]	; (8005cc0 <vPortSetupTimerInterrupt+0x34>)
 8005cb0:	2207      	movs	r2, #7
 8005cb2:	601a      	str	r2, [r3, #0]
}
 8005cb4:	bf00      	nop
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr
 8005cbe:	bf00      	nop
 8005cc0:	e000e010 	.word	0xe000e010
 8005cc4:	e000e018 	.word	0xe000e018
 8005cc8:	20000000 	.word	0x20000000
 8005ccc:	10624dd3 	.word	0x10624dd3
 8005cd0:	e000e014 	.word	0xe000e014

08005cd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005cd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005ce4 <vPortEnableVFP+0x10>
 8005cd8:	6801      	ldr	r1, [r0, #0]
 8005cda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005cde:	6001      	str	r1, [r0, #0]
 8005ce0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005ce2:	bf00      	nop
 8005ce4:	e000ed88 	.word	0xe000ed88

08005ce8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b08a      	sub	sp, #40	; 0x28
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005cf4:	f7ff face 	bl	8005294 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005cf8:	4b5b      	ldr	r3, [pc, #364]	; (8005e68 <pvPortMalloc+0x180>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d101      	bne.n	8005d04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005d00:	f000 f920 	bl	8005f44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005d04:	4b59      	ldr	r3, [pc, #356]	; (8005e6c <pvPortMalloc+0x184>)
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	f040 8093 	bne.w	8005e38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d01d      	beq.n	8005d54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005d18:	2208      	movs	r2, #8
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f003 0307 	and.w	r3, r3, #7
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d014      	beq.n	8005d54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f023 0307 	bic.w	r3, r3, #7
 8005d30:	3308      	adds	r3, #8
 8005d32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f003 0307 	and.w	r3, r3, #7
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00a      	beq.n	8005d54 <pvPortMalloc+0x6c>
	__asm volatile
 8005d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d42:	f383 8811 	msr	BASEPRI, r3
 8005d46:	f3bf 8f6f 	isb	sy
 8005d4a:	f3bf 8f4f 	dsb	sy
 8005d4e:	617b      	str	r3, [r7, #20]
}
 8005d50:	bf00      	nop
 8005d52:	e7fe      	b.n	8005d52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d06e      	beq.n	8005e38 <pvPortMalloc+0x150>
 8005d5a:	4b45      	ldr	r3, [pc, #276]	; (8005e70 <pvPortMalloc+0x188>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d869      	bhi.n	8005e38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005d64:	4b43      	ldr	r3, [pc, #268]	; (8005e74 <pvPortMalloc+0x18c>)
 8005d66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005d68:	4b42      	ldr	r3, [pc, #264]	; (8005e74 <pvPortMalloc+0x18c>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d6e:	e004      	b.n	8005d7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d903      	bls.n	8005d8c <pvPortMalloc+0xa4>
 8005d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d1f1      	bne.n	8005d70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005d8c:	4b36      	ldr	r3, [pc, #216]	; (8005e68 <pvPortMalloc+0x180>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d050      	beq.n	8005e38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005d96:	6a3b      	ldr	r3, [r7, #32]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	2208      	movs	r2, #8
 8005d9c:	4413      	add	r3, r2
 8005d9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	6a3b      	ldr	r3, [r7, #32]
 8005da6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005daa:	685a      	ldr	r2, [r3, #4]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	1ad2      	subs	r2, r2, r3
 8005db0:	2308      	movs	r3, #8
 8005db2:	005b      	lsls	r3, r3, #1
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d91f      	bls.n	8005df8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	f003 0307 	and.w	r3, r3, #7
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d00a      	beq.n	8005de0 <pvPortMalloc+0xf8>
	__asm volatile
 8005dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dce:	f383 8811 	msr	BASEPRI, r3
 8005dd2:	f3bf 8f6f 	isb	sy
 8005dd6:	f3bf 8f4f 	dsb	sy
 8005dda:	613b      	str	r3, [r7, #16]
}
 8005ddc:	bf00      	nop
 8005dde:	e7fe      	b.n	8005dde <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de2:	685a      	ldr	r2, [r3, #4]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	1ad2      	subs	r2, r2, r3
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005df2:	69b8      	ldr	r0, [r7, #24]
 8005df4:	f000 f908 	bl	8006008 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005df8:	4b1d      	ldr	r3, [pc, #116]	; (8005e70 <pvPortMalloc+0x188>)
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	4a1b      	ldr	r2, [pc, #108]	; (8005e70 <pvPortMalloc+0x188>)
 8005e04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005e06:	4b1a      	ldr	r3, [pc, #104]	; (8005e70 <pvPortMalloc+0x188>)
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	4b1b      	ldr	r3, [pc, #108]	; (8005e78 <pvPortMalloc+0x190>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d203      	bcs.n	8005e1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005e12:	4b17      	ldr	r3, [pc, #92]	; (8005e70 <pvPortMalloc+0x188>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a18      	ldr	r2, [pc, #96]	; (8005e78 <pvPortMalloc+0x190>)
 8005e18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1c:	685a      	ldr	r2, [r3, #4]
 8005e1e:	4b13      	ldr	r3, [pc, #76]	; (8005e6c <pvPortMalloc+0x184>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	431a      	orrs	r2, r3
 8005e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005e2e:	4b13      	ldr	r3, [pc, #76]	; (8005e7c <pvPortMalloc+0x194>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	3301      	adds	r3, #1
 8005e34:	4a11      	ldr	r2, [pc, #68]	; (8005e7c <pvPortMalloc+0x194>)
 8005e36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005e38:	f7ff fa3a 	bl	80052b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	f003 0307 	and.w	r3, r3, #7
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00a      	beq.n	8005e5c <pvPortMalloc+0x174>
	__asm volatile
 8005e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e4a:	f383 8811 	msr	BASEPRI, r3
 8005e4e:	f3bf 8f6f 	isb	sy
 8005e52:	f3bf 8f4f 	dsb	sy
 8005e56:	60fb      	str	r3, [r7, #12]
}
 8005e58:	bf00      	nop
 8005e5a:	e7fe      	b.n	8005e5a <pvPortMalloc+0x172>
	return pvReturn;
 8005e5c:	69fb      	ldr	r3, [r7, #28]
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3728      	adds	r7, #40	; 0x28
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	200045b4 	.word	0x200045b4
 8005e6c:	200045c8 	.word	0x200045c8
 8005e70:	200045b8 	.word	0x200045b8
 8005e74:	200045ac 	.word	0x200045ac
 8005e78:	200045bc 	.word	0x200045bc
 8005e7c:	200045c0 	.word	0x200045c0

08005e80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b086      	sub	sp, #24
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d04d      	beq.n	8005f2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005e92:	2308      	movs	r3, #8
 8005e94:	425b      	negs	r3, r3
 8005e96:	697a      	ldr	r2, [r7, #20]
 8005e98:	4413      	add	r3, r2
 8005e9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	685a      	ldr	r2, [r3, #4]
 8005ea4:	4b24      	ldr	r3, [pc, #144]	; (8005f38 <vPortFree+0xb8>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10a      	bne.n	8005ec4 <vPortFree+0x44>
	__asm volatile
 8005eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb2:	f383 8811 	msr	BASEPRI, r3
 8005eb6:	f3bf 8f6f 	isb	sy
 8005eba:	f3bf 8f4f 	dsb	sy
 8005ebe:	60fb      	str	r3, [r7, #12]
}
 8005ec0:	bf00      	nop
 8005ec2:	e7fe      	b.n	8005ec2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d00a      	beq.n	8005ee2 <vPortFree+0x62>
	__asm volatile
 8005ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed0:	f383 8811 	msr	BASEPRI, r3
 8005ed4:	f3bf 8f6f 	isb	sy
 8005ed8:	f3bf 8f4f 	dsb	sy
 8005edc:	60bb      	str	r3, [r7, #8]
}
 8005ede:	bf00      	nop
 8005ee0:	e7fe      	b.n	8005ee0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	685a      	ldr	r2, [r3, #4]
 8005ee6:	4b14      	ldr	r3, [pc, #80]	; (8005f38 <vPortFree+0xb8>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4013      	ands	r3, r2
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d01e      	beq.n	8005f2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d11a      	bne.n	8005f2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	685a      	ldr	r2, [r3, #4]
 8005efc:	4b0e      	ldr	r3, [pc, #56]	; (8005f38 <vPortFree+0xb8>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	43db      	mvns	r3, r3
 8005f02:	401a      	ands	r2, r3
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005f08:	f7ff f9c4 	bl	8005294 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	685a      	ldr	r2, [r3, #4]
 8005f10:	4b0a      	ldr	r3, [pc, #40]	; (8005f3c <vPortFree+0xbc>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4413      	add	r3, r2
 8005f16:	4a09      	ldr	r2, [pc, #36]	; (8005f3c <vPortFree+0xbc>)
 8005f18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005f1a:	6938      	ldr	r0, [r7, #16]
 8005f1c:	f000 f874 	bl	8006008 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005f20:	4b07      	ldr	r3, [pc, #28]	; (8005f40 <vPortFree+0xc0>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	3301      	adds	r3, #1
 8005f26:	4a06      	ldr	r2, [pc, #24]	; (8005f40 <vPortFree+0xc0>)
 8005f28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005f2a:	f7ff f9c1 	bl	80052b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005f2e:	bf00      	nop
 8005f30:	3718      	adds	r7, #24
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	200045c8 	.word	0x200045c8
 8005f3c:	200045b8 	.word	0x200045b8
 8005f40:	200045c4 	.word	0x200045c4

08005f44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005f4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005f4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005f50:	4b27      	ldr	r3, [pc, #156]	; (8005ff0 <prvHeapInit+0xac>)
 8005f52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f003 0307 	and.w	r3, r3, #7
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d00c      	beq.n	8005f78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	3307      	adds	r3, #7
 8005f62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f023 0307 	bic.w	r3, r3, #7
 8005f6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005f6c:	68ba      	ldr	r2, [r7, #8]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	4a1f      	ldr	r2, [pc, #124]	; (8005ff0 <prvHeapInit+0xac>)
 8005f74:	4413      	add	r3, r2
 8005f76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005f7c:	4a1d      	ldr	r2, [pc, #116]	; (8005ff4 <prvHeapInit+0xb0>)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005f82:	4b1c      	ldr	r3, [pc, #112]	; (8005ff4 <prvHeapInit+0xb0>)
 8005f84:	2200      	movs	r2, #0
 8005f86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	68ba      	ldr	r2, [r7, #8]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005f90:	2208      	movs	r2, #8
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	1a9b      	subs	r3, r3, r2
 8005f96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f023 0307 	bic.w	r3, r3, #7
 8005f9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	4a15      	ldr	r2, [pc, #84]	; (8005ff8 <prvHeapInit+0xb4>)
 8005fa4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005fa6:	4b14      	ldr	r3, [pc, #80]	; (8005ff8 <prvHeapInit+0xb4>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	2200      	movs	r2, #0
 8005fac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005fae:	4b12      	ldr	r3, [pc, #72]	; (8005ff8 <prvHeapInit+0xb4>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	68fa      	ldr	r2, [r7, #12]
 8005fbe:	1ad2      	subs	r2, r2, r3
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005fc4:	4b0c      	ldr	r3, [pc, #48]	; (8005ff8 <prvHeapInit+0xb4>)
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	4a0a      	ldr	r2, [pc, #40]	; (8005ffc <prvHeapInit+0xb8>)
 8005fd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	4a09      	ldr	r2, [pc, #36]	; (8006000 <prvHeapInit+0xbc>)
 8005fda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005fdc:	4b09      	ldr	r3, [pc, #36]	; (8006004 <prvHeapInit+0xc0>)
 8005fde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005fe2:	601a      	str	r2, [r3, #0]
}
 8005fe4:	bf00      	nop
 8005fe6:	3714      	adds	r7, #20
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr
 8005ff0:	200009ac 	.word	0x200009ac
 8005ff4:	200045ac 	.word	0x200045ac
 8005ff8:	200045b4 	.word	0x200045b4
 8005ffc:	200045bc 	.word	0x200045bc
 8006000:	200045b8 	.word	0x200045b8
 8006004:	200045c8 	.word	0x200045c8

08006008 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006008:	b480      	push	{r7}
 800600a:	b085      	sub	sp, #20
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006010:	4b28      	ldr	r3, [pc, #160]	; (80060b4 <prvInsertBlockIntoFreeList+0xac>)
 8006012:	60fb      	str	r3, [r7, #12]
 8006014:	e002      	b.n	800601c <prvInsertBlockIntoFreeList+0x14>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	60fb      	str	r3, [r7, #12]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	429a      	cmp	r2, r3
 8006024:	d8f7      	bhi.n	8006016 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	68ba      	ldr	r2, [r7, #8]
 8006030:	4413      	add	r3, r2
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	429a      	cmp	r2, r3
 8006036:	d108      	bne.n	800604a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	685a      	ldr	r2, [r3, #4]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	441a      	add	r2, r3
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	68ba      	ldr	r2, [r7, #8]
 8006054:	441a      	add	r2, r3
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	429a      	cmp	r2, r3
 800605c:	d118      	bne.n	8006090 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	4b15      	ldr	r3, [pc, #84]	; (80060b8 <prvInsertBlockIntoFreeList+0xb0>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	429a      	cmp	r2, r3
 8006068:	d00d      	beq.n	8006086 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	685a      	ldr	r2, [r3, #4]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	441a      	add	r2, r3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	601a      	str	r2, [r3, #0]
 8006084:	e008      	b.n	8006098 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006086:	4b0c      	ldr	r3, [pc, #48]	; (80060b8 <prvInsertBlockIntoFreeList+0xb0>)
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	601a      	str	r2, [r3, #0]
 800608e:	e003      	b.n	8006098 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	429a      	cmp	r2, r3
 800609e:	d002      	beq.n	80060a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060a6:	bf00      	nop
 80060a8:	3714      	adds	r7, #20
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop
 80060b4:	200045ac 	.word	0x200045ac
 80060b8:	200045b4 	.word	0x200045b4

080060bc <__errno>:
 80060bc:	4b01      	ldr	r3, [pc, #4]	; (80060c4 <__errno+0x8>)
 80060be:	6818      	ldr	r0, [r3, #0]
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop
 80060c4:	20000010 	.word	0x20000010

080060c8 <__libc_init_array>:
 80060c8:	b570      	push	{r4, r5, r6, lr}
 80060ca:	4d0d      	ldr	r5, [pc, #52]	; (8006100 <__libc_init_array+0x38>)
 80060cc:	4c0d      	ldr	r4, [pc, #52]	; (8006104 <__libc_init_array+0x3c>)
 80060ce:	1b64      	subs	r4, r4, r5
 80060d0:	10a4      	asrs	r4, r4, #2
 80060d2:	2600      	movs	r6, #0
 80060d4:	42a6      	cmp	r6, r4
 80060d6:	d109      	bne.n	80060ec <__libc_init_array+0x24>
 80060d8:	4d0b      	ldr	r5, [pc, #44]	; (8006108 <__libc_init_array+0x40>)
 80060da:	4c0c      	ldr	r4, [pc, #48]	; (800610c <__libc_init_array+0x44>)
 80060dc:	f000 fc8e 	bl	80069fc <_init>
 80060e0:	1b64      	subs	r4, r4, r5
 80060e2:	10a4      	asrs	r4, r4, #2
 80060e4:	2600      	movs	r6, #0
 80060e6:	42a6      	cmp	r6, r4
 80060e8:	d105      	bne.n	80060f6 <__libc_init_array+0x2e>
 80060ea:	bd70      	pop	{r4, r5, r6, pc}
 80060ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80060f0:	4798      	blx	r3
 80060f2:	3601      	adds	r6, #1
 80060f4:	e7ee      	b.n	80060d4 <__libc_init_array+0xc>
 80060f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80060fa:	4798      	blx	r3
 80060fc:	3601      	adds	r6, #1
 80060fe:	e7f2      	b.n	80060e6 <__libc_init_array+0x1e>
 8006100:	080075f4 	.word	0x080075f4
 8006104:	080075f4 	.word	0x080075f4
 8006108:	080075f4 	.word	0x080075f4
 800610c:	080075f8 	.word	0x080075f8

08006110 <memcpy>:
 8006110:	440a      	add	r2, r1
 8006112:	4291      	cmp	r1, r2
 8006114:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006118:	d100      	bne.n	800611c <memcpy+0xc>
 800611a:	4770      	bx	lr
 800611c:	b510      	push	{r4, lr}
 800611e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006122:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006126:	4291      	cmp	r1, r2
 8006128:	d1f9      	bne.n	800611e <memcpy+0xe>
 800612a:	bd10      	pop	{r4, pc}

0800612c <memset>:
 800612c:	4402      	add	r2, r0
 800612e:	4603      	mov	r3, r0
 8006130:	4293      	cmp	r3, r2
 8006132:	d100      	bne.n	8006136 <memset+0xa>
 8006134:	4770      	bx	lr
 8006136:	f803 1b01 	strb.w	r1, [r3], #1
 800613a:	e7f9      	b.n	8006130 <memset+0x4>

0800613c <siprintf>:
 800613c:	b40e      	push	{r1, r2, r3}
 800613e:	b500      	push	{lr}
 8006140:	b09c      	sub	sp, #112	; 0x70
 8006142:	ab1d      	add	r3, sp, #116	; 0x74
 8006144:	9002      	str	r0, [sp, #8]
 8006146:	9006      	str	r0, [sp, #24]
 8006148:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800614c:	4809      	ldr	r0, [pc, #36]	; (8006174 <siprintf+0x38>)
 800614e:	9107      	str	r1, [sp, #28]
 8006150:	9104      	str	r1, [sp, #16]
 8006152:	4909      	ldr	r1, [pc, #36]	; (8006178 <siprintf+0x3c>)
 8006154:	f853 2b04 	ldr.w	r2, [r3], #4
 8006158:	9105      	str	r1, [sp, #20]
 800615a:	6800      	ldr	r0, [r0, #0]
 800615c:	9301      	str	r3, [sp, #4]
 800615e:	a902      	add	r1, sp, #8
 8006160:	f000 f868 	bl	8006234 <_svfiprintf_r>
 8006164:	9b02      	ldr	r3, [sp, #8]
 8006166:	2200      	movs	r2, #0
 8006168:	701a      	strb	r2, [r3, #0]
 800616a:	b01c      	add	sp, #112	; 0x70
 800616c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006170:	b003      	add	sp, #12
 8006172:	4770      	bx	lr
 8006174:	20000010 	.word	0x20000010
 8006178:	ffff0208 	.word	0xffff0208

0800617c <__ssputs_r>:
 800617c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006180:	688e      	ldr	r6, [r1, #8]
 8006182:	429e      	cmp	r6, r3
 8006184:	4682      	mov	sl, r0
 8006186:	460c      	mov	r4, r1
 8006188:	4690      	mov	r8, r2
 800618a:	461f      	mov	r7, r3
 800618c:	d838      	bhi.n	8006200 <__ssputs_r+0x84>
 800618e:	898a      	ldrh	r2, [r1, #12]
 8006190:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006194:	d032      	beq.n	80061fc <__ssputs_r+0x80>
 8006196:	6825      	ldr	r5, [r4, #0]
 8006198:	6909      	ldr	r1, [r1, #16]
 800619a:	eba5 0901 	sub.w	r9, r5, r1
 800619e:	6965      	ldr	r5, [r4, #20]
 80061a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80061a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80061a8:	3301      	adds	r3, #1
 80061aa:	444b      	add	r3, r9
 80061ac:	106d      	asrs	r5, r5, #1
 80061ae:	429d      	cmp	r5, r3
 80061b0:	bf38      	it	cc
 80061b2:	461d      	movcc	r5, r3
 80061b4:	0553      	lsls	r3, r2, #21
 80061b6:	d531      	bpl.n	800621c <__ssputs_r+0xa0>
 80061b8:	4629      	mov	r1, r5
 80061ba:	f000 fb55 	bl	8006868 <_malloc_r>
 80061be:	4606      	mov	r6, r0
 80061c0:	b950      	cbnz	r0, 80061d8 <__ssputs_r+0x5c>
 80061c2:	230c      	movs	r3, #12
 80061c4:	f8ca 3000 	str.w	r3, [sl]
 80061c8:	89a3      	ldrh	r3, [r4, #12]
 80061ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061ce:	81a3      	strh	r3, [r4, #12]
 80061d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80061d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061d8:	6921      	ldr	r1, [r4, #16]
 80061da:	464a      	mov	r2, r9
 80061dc:	f7ff ff98 	bl	8006110 <memcpy>
 80061e0:	89a3      	ldrh	r3, [r4, #12]
 80061e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80061e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061ea:	81a3      	strh	r3, [r4, #12]
 80061ec:	6126      	str	r6, [r4, #16]
 80061ee:	6165      	str	r5, [r4, #20]
 80061f0:	444e      	add	r6, r9
 80061f2:	eba5 0509 	sub.w	r5, r5, r9
 80061f6:	6026      	str	r6, [r4, #0]
 80061f8:	60a5      	str	r5, [r4, #8]
 80061fa:	463e      	mov	r6, r7
 80061fc:	42be      	cmp	r6, r7
 80061fe:	d900      	bls.n	8006202 <__ssputs_r+0x86>
 8006200:	463e      	mov	r6, r7
 8006202:	6820      	ldr	r0, [r4, #0]
 8006204:	4632      	mov	r2, r6
 8006206:	4641      	mov	r1, r8
 8006208:	f000 faa8 	bl	800675c <memmove>
 800620c:	68a3      	ldr	r3, [r4, #8]
 800620e:	1b9b      	subs	r3, r3, r6
 8006210:	60a3      	str	r3, [r4, #8]
 8006212:	6823      	ldr	r3, [r4, #0]
 8006214:	4433      	add	r3, r6
 8006216:	6023      	str	r3, [r4, #0]
 8006218:	2000      	movs	r0, #0
 800621a:	e7db      	b.n	80061d4 <__ssputs_r+0x58>
 800621c:	462a      	mov	r2, r5
 800621e:	f000 fb97 	bl	8006950 <_realloc_r>
 8006222:	4606      	mov	r6, r0
 8006224:	2800      	cmp	r0, #0
 8006226:	d1e1      	bne.n	80061ec <__ssputs_r+0x70>
 8006228:	6921      	ldr	r1, [r4, #16]
 800622a:	4650      	mov	r0, sl
 800622c:	f000 fab0 	bl	8006790 <_free_r>
 8006230:	e7c7      	b.n	80061c2 <__ssputs_r+0x46>
	...

08006234 <_svfiprintf_r>:
 8006234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006238:	4698      	mov	r8, r3
 800623a:	898b      	ldrh	r3, [r1, #12]
 800623c:	061b      	lsls	r3, r3, #24
 800623e:	b09d      	sub	sp, #116	; 0x74
 8006240:	4607      	mov	r7, r0
 8006242:	460d      	mov	r5, r1
 8006244:	4614      	mov	r4, r2
 8006246:	d50e      	bpl.n	8006266 <_svfiprintf_r+0x32>
 8006248:	690b      	ldr	r3, [r1, #16]
 800624a:	b963      	cbnz	r3, 8006266 <_svfiprintf_r+0x32>
 800624c:	2140      	movs	r1, #64	; 0x40
 800624e:	f000 fb0b 	bl	8006868 <_malloc_r>
 8006252:	6028      	str	r0, [r5, #0]
 8006254:	6128      	str	r0, [r5, #16]
 8006256:	b920      	cbnz	r0, 8006262 <_svfiprintf_r+0x2e>
 8006258:	230c      	movs	r3, #12
 800625a:	603b      	str	r3, [r7, #0]
 800625c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006260:	e0d1      	b.n	8006406 <_svfiprintf_r+0x1d2>
 8006262:	2340      	movs	r3, #64	; 0x40
 8006264:	616b      	str	r3, [r5, #20]
 8006266:	2300      	movs	r3, #0
 8006268:	9309      	str	r3, [sp, #36]	; 0x24
 800626a:	2320      	movs	r3, #32
 800626c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006270:	f8cd 800c 	str.w	r8, [sp, #12]
 8006274:	2330      	movs	r3, #48	; 0x30
 8006276:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006420 <_svfiprintf_r+0x1ec>
 800627a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800627e:	f04f 0901 	mov.w	r9, #1
 8006282:	4623      	mov	r3, r4
 8006284:	469a      	mov	sl, r3
 8006286:	f813 2b01 	ldrb.w	r2, [r3], #1
 800628a:	b10a      	cbz	r2, 8006290 <_svfiprintf_r+0x5c>
 800628c:	2a25      	cmp	r2, #37	; 0x25
 800628e:	d1f9      	bne.n	8006284 <_svfiprintf_r+0x50>
 8006290:	ebba 0b04 	subs.w	fp, sl, r4
 8006294:	d00b      	beq.n	80062ae <_svfiprintf_r+0x7a>
 8006296:	465b      	mov	r3, fp
 8006298:	4622      	mov	r2, r4
 800629a:	4629      	mov	r1, r5
 800629c:	4638      	mov	r0, r7
 800629e:	f7ff ff6d 	bl	800617c <__ssputs_r>
 80062a2:	3001      	adds	r0, #1
 80062a4:	f000 80aa 	beq.w	80063fc <_svfiprintf_r+0x1c8>
 80062a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062aa:	445a      	add	r2, fp
 80062ac:	9209      	str	r2, [sp, #36]	; 0x24
 80062ae:	f89a 3000 	ldrb.w	r3, [sl]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	f000 80a2 	beq.w	80063fc <_svfiprintf_r+0x1c8>
 80062b8:	2300      	movs	r3, #0
 80062ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80062be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062c2:	f10a 0a01 	add.w	sl, sl, #1
 80062c6:	9304      	str	r3, [sp, #16]
 80062c8:	9307      	str	r3, [sp, #28]
 80062ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80062ce:	931a      	str	r3, [sp, #104]	; 0x68
 80062d0:	4654      	mov	r4, sl
 80062d2:	2205      	movs	r2, #5
 80062d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062d8:	4851      	ldr	r0, [pc, #324]	; (8006420 <_svfiprintf_r+0x1ec>)
 80062da:	f7f9 ff79 	bl	80001d0 <memchr>
 80062de:	9a04      	ldr	r2, [sp, #16]
 80062e0:	b9d8      	cbnz	r0, 800631a <_svfiprintf_r+0xe6>
 80062e2:	06d0      	lsls	r0, r2, #27
 80062e4:	bf44      	itt	mi
 80062e6:	2320      	movmi	r3, #32
 80062e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062ec:	0711      	lsls	r1, r2, #28
 80062ee:	bf44      	itt	mi
 80062f0:	232b      	movmi	r3, #43	; 0x2b
 80062f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062f6:	f89a 3000 	ldrb.w	r3, [sl]
 80062fa:	2b2a      	cmp	r3, #42	; 0x2a
 80062fc:	d015      	beq.n	800632a <_svfiprintf_r+0xf6>
 80062fe:	9a07      	ldr	r2, [sp, #28]
 8006300:	4654      	mov	r4, sl
 8006302:	2000      	movs	r0, #0
 8006304:	f04f 0c0a 	mov.w	ip, #10
 8006308:	4621      	mov	r1, r4
 800630a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800630e:	3b30      	subs	r3, #48	; 0x30
 8006310:	2b09      	cmp	r3, #9
 8006312:	d94e      	bls.n	80063b2 <_svfiprintf_r+0x17e>
 8006314:	b1b0      	cbz	r0, 8006344 <_svfiprintf_r+0x110>
 8006316:	9207      	str	r2, [sp, #28]
 8006318:	e014      	b.n	8006344 <_svfiprintf_r+0x110>
 800631a:	eba0 0308 	sub.w	r3, r0, r8
 800631e:	fa09 f303 	lsl.w	r3, r9, r3
 8006322:	4313      	orrs	r3, r2
 8006324:	9304      	str	r3, [sp, #16]
 8006326:	46a2      	mov	sl, r4
 8006328:	e7d2      	b.n	80062d0 <_svfiprintf_r+0x9c>
 800632a:	9b03      	ldr	r3, [sp, #12]
 800632c:	1d19      	adds	r1, r3, #4
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	9103      	str	r1, [sp, #12]
 8006332:	2b00      	cmp	r3, #0
 8006334:	bfbb      	ittet	lt
 8006336:	425b      	neglt	r3, r3
 8006338:	f042 0202 	orrlt.w	r2, r2, #2
 800633c:	9307      	strge	r3, [sp, #28]
 800633e:	9307      	strlt	r3, [sp, #28]
 8006340:	bfb8      	it	lt
 8006342:	9204      	strlt	r2, [sp, #16]
 8006344:	7823      	ldrb	r3, [r4, #0]
 8006346:	2b2e      	cmp	r3, #46	; 0x2e
 8006348:	d10c      	bne.n	8006364 <_svfiprintf_r+0x130>
 800634a:	7863      	ldrb	r3, [r4, #1]
 800634c:	2b2a      	cmp	r3, #42	; 0x2a
 800634e:	d135      	bne.n	80063bc <_svfiprintf_r+0x188>
 8006350:	9b03      	ldr	r3, [sp, #12]
 8006352:	1d1a      	adds	r2, r3, #4
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	9203      	str	r2, [sp, #12]
 8006358:	2b00      	cmp	r3, #0
 800635a:	bfb8      	it	lt
 800635c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006360:	3402      	adds	r4, #2
 8006362:	9305      	str	r3, [sp, #20]
 8006364:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006430 <_svfiprintf_r+0x1fc>
 8006368:	7821      	ldrb	r1, [r4, #0]
 800636a:	2203      	movs	r2, #3
 800636c:	4650      	mov	r0, sl
 800636e:	f7f9 ff2f 	bl	80001d0 <memchr>
 8006372:	b140      	cbz	r0, 8006386 <_svfiprintf_r+0x152>
 8006374:	2340      	movs	r3, #64	; 0x40
 8006376:	eba0 000a 	sub.w	r0, r0, sl
 800637a:	fa03 f000 	lsl.w	r0, r3, r0
 800637e:	9b04      	ldr	r3, [sp, #16]
 8006380:	4303      	orrs	r3, r0
 8006382:	3401      	adds	r4, #1
 8006384:	9304      	str	r3, [sp, #16]
 8006386:	f814 1b01 	ldrb.w	r1, [r4], #1
 800638a:	4826      	ldr	r0, [pc, #152]	; (8006424 <_svfiprintf_r+0x1f0>)
 800638c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006390:	2206      	movs	r2, #6
 8006392:	f7f9 ff1d 	bl	80001d0 <memchr>
 8006396:	2800      	cmp	r0, #0
 8006398:	d038      	beq.n	800640c <_svfiprintf_r+0x1d8>
 800639a:	4b23      	ldr	r3, [pc, #140]	; (8006428 <_svfiprintf_r+0x1f4>)
 800639c:	bb1b      	cbnz	r3, 80063e6 <_svfiprintf_r+0x1b2>
 800639e:	9b03      	ldr	r3, [sp, #12]
 80063a0:	3307      	adds	r3, #7
 80063a2:	f023 0307 	bic.w	r3, r3, #7
 80063a6:	3308      	adds	r3, #8
 80063a8:	9303      	str	r3, [sp, #12]
 80063aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063ac:	4433      	add	r3, r6
 80063ae:	9309      	str	r3, [sp, #36]	; 0x24
 80063b0:	e767      	b.n	8006282 <_svfiprintf_r+0x4e>
 80063b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80063b6:	460c      	mov	r4, r1
 80063b8:	2001      	movs	r0, #1
 80063ba:	e7a5      	b.n	8006308 <_svfiprintf_r+0xd4>
 80063bc:	2300      	movs	r3, #0
 80063be:	3401      	adds	r4, #1
 80063c0:	9305      	str	r3, [sp, #20]
 80063c2:	4619      	mov	r1, r3
 80063c4:	f04f 0c0a 	mov.w	ip, #10
 80063c8:	4620      	mov	r0, r4
 80063ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063ce:	3a30      	subs	r2, #48	; 0x30
 80063d0:	2a09      	cmp	r2, #9
 80063d2:	d903      	bls.n	80063dc <_svfiprintf_r+0x1a8>
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d0c5      	beq.n	8006364 <_svfiprintf_r+0x130>
 80063d8:	9105      	str	r1, [sp, #20]
 80063da:	e7c3      	b.n	8006364 <_svfiprintf_r+0x130>
 80063dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80063e0:	4604      	mov	r4, r0
 80063e2:	2301      	movs	r3, #1
 80063e4:	e7f0      	b.n	80063c8 <_svfiprintf_r+0x194>
 80063e6:	ab03      	add	r3, sp, #12
 80063e8:	9300      	str	r3, [sp, #0]
 80063ea:	462a      	mov	r2, r5
 80063ec:	4b0f      	ldr	r3, [pc, #60]	; (800642c <_svfiprintf_r+0x1f8>)
 80063ee:	a904      	add	r1, sp, #16
 80063f0:	4638      	mov	r0, r7
 80063f2:	f3af 8000 	nop.w
 80063f6:	1c42      	adds	r2, r0, #1
 80063f8:	4606      	mov	r6, r0
 80063fa:	d1d6      	bne.n	80063aa <_svfiprintf_r+0x176>
 80063fc:	89ab      	ldrh	r3, [r5, #12]
 80063fe:	065b      	lsls	r3, r3, #25
 8006400:	f53f af2c 	bmi.w	800625c <_svfiprintf_r+0x28>
 8006404:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006406:	b01d      	add	sp, #116	; 0x74
 8006408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800640c:	ab03      	add	r3, sp, #12
 800640e:	9300      	str	r3, [sp, #0]
 8006410:	462a      	mov	r2, r5
 8006412:	4b06      	ldr	r3, [pc, #24]	; (800642c <_svfiprintf_r+0x1f8>)
 8006414:	a904      	add	r1, sp, #16
 8006416:	4638      	mov	r0, r7
 8006418:	f000 f87a 	bl	8006510 <_printf_i>
 800641c:	e7eb      	b.n	80063f6 <_svfiprintf_r+0x1c2>
 800641e:	bf00      	nop
 8006420:	080075b8 	.word	0x080075b8
 8006424:	080075c2 	.word	0x080075c2
 8006428:	00000000 	.word	0x00000000
 800642c:	0800617d 	.word	0x0800617d
 8006430:	080075be 	.word	0x080075be

08006434 <_printf_common>:
 8006434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006438:	4616      	mov	r6, r2
 800643a:	4699      	mov	r9, r3
 800643c:	688a      	ldr	r2, [r1, #8]
 800643e:	690b      	ldr	r3, [r1, #16]
 8006440:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006444:	4293      	cmp	r3, r2
 8006446:	bfb8      	it	lt
 8006448:	4613      	movlt	r3, r2
 800644a:	6033      	str	r3, [r6, #0]
 800644c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006450:	4607      	mov	r7, r0
 8006452:	460c      	mov	r4, r1
 8006454:	b10a      	cbz	r2, 800645a <_printf_common+0x26>
 8006456:	3301      	adds	r3, #1
 8006458:	6033      	str	r3, [r6, #0]
 800645a:	6823      	ldr	r3, [r4, #0]
 800645c:	0699      	lsls	r1, r3, #26
 800645e:	bf42      	ittt	mi
 8006460:	6833      	ldrmi	r3, [r6, #0]
 8006462:	3302      	addmi	r3, #2
 8006464:	6033      	strmi	r3, [r6, #0]
 8006466:	6825      	ldr	r5, [r4, #0]
 8006468:	f015 0506 	ands.w	r5, r5, #6
 800646c:	d106      	bne.n	800647c <_printf_common+0x48>
 800646e:	f104 0a19 	add.w	sl, r4, #25
 8006472:	68e3      	ldr	r3, [r4, #12]
 8006474:	6832      	ldr	r2, [r6, #0]
 8006476:	1a9b      	subs	r3, r3, r2
 8006478:	42ab      	cmp	r3, r5
 800647a:	dc26      	bgt.n	80064ca <_printf_common+0x96>
 800647c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006480:	1e13      	subs	r3, r2, #0
 8006482:	6822      	ldr	r2, [r4, #0]
 8006484:	bf18      	it	ne
 8006486:	2301      	movne	r3, #1
 8006488:	0692      	lsls	r2, r2, #26
 800648a:	d42b      	bmi.n	80064e4 <_printf_common+0xb0>
 800648c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006490:	4649      	mov	r1, r9
 8006492:	4638      	mov	r0, r7
 8006494:	47c0      	blx	r8
 8006496:	3001      	adds	r0, #1
 8006498:	d01e      	beq.n	80064d8 <_printf_common+0xa4>
 800649a:	6823      	ldr	r3, [r4, #0]
 800649c:	68e5      	ldr	r5, [r4, #12]
 800649e:	6832      	ldr	r2, [r6, #0]
 80064a0:	f003 0306 	and.w	r3, r3, #6
 80064a4:	2b04      	cmp	r3, #4
 80064a6:	bf08      	it	eq
 80064a8:	1aad      	subeq	r5, r5, r2
 80064aa:	68a3      	ldr	r3, [r4, #8]
 80064ac:	6922      	ldr	r2, [r4, #16]
 80064ae:	bf0c      	ite	eq
 80064b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80064b4:	2500      	movne	r5, #0
 80064b6:	4293      	cmp	r3, r2
 80064b8:	bfc4      	itt	gt
 80064ba:	1a9b      	subgt	r3, r3, r2
 80064bc:	18ed      	addgt	r5, r5, r3
 80064be:	2600      	movs	r6, #0
 80064c0:	341a      	adds	r4, #26
 80064c2:	42b5      	cmp	r5, r6
 80064c4:	d11a      	bne.n	80064fc <_printf_common+0xc8>
 80064c6:	2000      	movs	r0, #0
 80064c8:	e008      	b.n	80064dc <_printf_common+0xa8>
 80064ca:	2301      	movs	r3, #1
 80064cc:	4652      	mov	r2, sl
 80064ce:	4649      	mov	r1, r9
 80064d0:	4638      	mov	r0, r7
 80064d2:	47c0      	blx	r8
 80064d4:	3001      	adds	r0, #1
 80064d6:	d103      	bne.n	80064e0 <_printf_common+0xac>
 80064d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80064dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064e0:	3501      	adds	r5, #1
 80064e2:	e7c6      	b.n	8006472 <_printf_common+0x3e>
 80064e4:	18e1      	adds	r1, r4, r3
 80064e6:	1c5a      	adds	r2, r3, #1
 80064e8:	2030      	movs	r0, #48	; 0x30
 80064ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80064ee:	4422      	add	r2, r4
 80064f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80064f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80064f8:	3302      	adds	r3, #2
 80064fa:	e7c7      	b.n	800648c <_printf_common+0x58>
 80064fc:	2301      	movs	r3, #1
 80064fe:	4622      	mov	r2, r4
 8006500:	4649      	mov	r1, r9
 8006502:	4638      	mov	r0, r7
 8006504:	47c0      	blx	r8
 8006506:	3001      	adds	r0, #1
 8006508:	d0e6      	beq.n	80064d8 <_printf_common+0xa4>
 800650a:	3601      	adds	r6, #1
 800650c:	e7d9      	b.n	80064c2 <_printf_common+0x8e>
	...

08006510 <_printf_i>:
 8006510:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006514:	7e0f      	ldrb	r7, [r1, #24]
 8006516:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006518:	2f78      	cmp	r7, #120	; 0x78
 800651a:	4691      	mov	r9, r2
 800651c:	4680      	mov	r8, r0
 800651e:	460c      	mov	r4, r1
 8006520:	469a      	mov	sl, r3
 8006522:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006526:	d807      	bhi.n	8006538 <_printf_i+0x28>
 8006528:	2f62      	cmp	r7, #98	; 0x62
 800652a:	d80a      	bhi.n	8006542 <_printf_i+0x32>
 800652c:	2f00      	cmp	r7, #0
 800652e:	f000 80d8 	beq.w	80066e2 <_printf_i+0x1d2>
 8006532:	2f58      	cmp	r7, #88	; 0x58
 8006534:	f000 80a3 	beq.w	800667e <_printf_i+0x16e>
 8006538:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800653c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006540:	e03a      	b.n	80065b8 <_printf_i+0xa8>
 8006542:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006546:	2b15      	cmp	r3, #21
 8006548:	d8f6      	bhi.n	8006538 <_printf_i+0x28>
 800654a:	a101      	add	r1, pc, #4	; (adr r1, 8006550 <_printf_i+0x40>)
 800654c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006550:	080065a9 	.word	0x080065a9
 8006554:	080065bd 	.word	0x080065bd
 8006558:	08006539 	.word	0x08006539
 800655c:	08006539 	.word	0x08006539
 8006560:	08006539 	.word	0x08006539
 8006564:	08006539 	.word	0x08006539
 8006568:	080065bd 	.word	0x080065bd
 800656c:	08006539 	.word	0x08006539
 8006570:	08006539 	.word	0x08006539
 8006574:	08006539 	.word	0x08006539
 8006578:	08006539 	.word	0x08006539
 800657c:	080066c9 	.word	0x080066c9
 8006580:	080065ed 	.word	0x080065ed
 8006584:	080066ab 	.word	0x080066ab
 8006588:	08006539 	.word	0x08006539
 800658c:	08006539 	.word	0x08006539
 8006590:	080066eb 	.word	0x080066eb
 8006594:	08006539 	.word	0x08006539
 8006598:	080065ed 	.word	0x080065ed
 800659c:	08006539 	.word	0x08006539
 80065a0:	08006539 	.word	0x08006539
 80065a4:	080066b3 	.word	0x080066b3
 80065a8:	682b      	ldr	r3, [r5, #0]
 80065aa:	1d1a      	adds	r2, r3, #4
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	602a      	str	r2, [r5, #0]
 80065b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80065b8:	2301      	movs	r3, #1
 80065ba:	e0a3      	b.n	8006704 <_printf_i+0x1f4>
 80065bc:	6820      	ldr	r0, [r4, #0]
 80065be:	6829      	ldr	r1, [r5, #0]
 80065c0:	0606      	lsls	r6, r0, #24
 80065c2:	f101 0304 	add.w	r3, r1, #4
 80065c6:	d50a      	bpl.n	80065de <_printf_i+0xce>
 80065c8:	680e      	ldr	r6, [r1, #0]
 80065ca:	602b      	str	r3, [r5, #0]
 80065cc:	2e00      	cmp	r6, #0
 80065ce:	da03      	bge.n	80065d8 <_printf_i+0xc8>
 80065d0:	232d      	movs	r3, #45	; 0x2d
 80065d2:	4276      	negs	r6, r6
 80065d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065d8:	485e      	ldr	r0, [pc, #376]	; (8006754 <_printf_i+0x244>)
 80065da:	230a      	movs	r3, #10
 80065dc:	e019      	b.n	8006612 <_printf_i+0x102>
 80065de:	680e      	ldr	r6, [r1, #0]
 80065e0:	602b      	str	r3, [r5, #0]
 80065e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80065e6:	bf18      	it	ne
 80065e8:	b236      	sxthne	r6, r6
 80065ea:	e7ef      	b.n	80065cc <_printf_i+0xbc>
 80065ec:	682b      	ldr	r3, [r5, #0]
 80065ee:	6820      	ldr	r0, [r4, #0]
 80065f0:	1d19      	adds	r1, r3, #4
 80065f2:	6029      	str	r1, [r5, #0]
 80065f4:	0601      	lsls	r1, r0, #24
 80065f6:	d501      	bpl.n	80065fc <_printf_i+0xec>
 80065f8:	681e      	ldr	r6, [r3, #0]
 80065fa:	e002      	b.n	8006602 <_printf_i+0xf2>
 80065fc:	0646      	lsls	r6, r0, #25
 80065fe:	d5fb      	bpl.n	80065f8 <_printf_i+0xe8>
 8006600:	881e      	ldrh	r6, [r3, #0]
 8006602:	4854      	ldr	r0, [pc, #336]	; (8006754 <_printf_i+0x244>)
 8006604:	2f6f      	cmp	r7, #111	; 0x6f
 8006606:	bf0c      	ite	eq
 8006608:	2308      	moveq	r3, #8
 800660a:	230a      	movne	r3, #10
 800660c:	2100      	movs	r1, #0
 800660e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006612:	6865      	ldr	r5, [r4, #4]
 8006614:	60a5      	str	r5, [r4, #8]
 8006616:	2d00      	cmp	r5, #0
 8006618:	bfa2      	ittt	ge
 800661a:	6821      	ldrge	r1, [r4, #0]
 800661c:	f021 0104 	bicge.w	r1, r1, #4
 8006620:	6021      	strge	r1, [r4, #0]
 8006622:	b90e      	cbnz	r6, 8006628 <_printf_i+0x118>
 8006624:	2d00      	cmp	r5, #0
 8006626:	d04d      	beq.n	80066c4 <_printf_i+0x1b4>
 8006628:	4615      	mov	r5, r2
 800662a:	fbb6 f1f3 	udiv	r1, r6, r3
 800662e:	fb03 6711 	mls	r7, r3, r1, r6
 8006632:	5dc7      	ldrb	r7, [r0, r7]
 8006634:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006638:	4637      	mov	r7, r6
 800663a:	42bb      	cmp	r3, r7
 800663c:	460e      	mov	r6, r1
 800663e:	d9f4      	bls.n	800662a <_printf_i+0x11a>
 8006640:	2b08      	cmp	r3, #8
 8006642:	d10b      	bne.n	800665c <_printf_i+0x14c>
 8006644:	6823      	ldr	r3, [r4, #0]
 8006646:	07de      	lsls	r6, r3, #31
 8006648:	d508      	bpl.n	800665c <_printf_i+0x14c>
 800664a:	6923      	ldr	r3, [r4, #16]
 800664c:	6861      	ldr	r1, [r4, #4]
 800664e:	4299      	cmp	r1, r3
 8006650:	bfde      	ittt	le
 8006652:	2330      	movle	r3, #48	; 0x30
 8006654:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006658:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800665c:	1b52      	subs	r2, r2, r5
 800665e:	6122      	str	r2, [r4, #16]
 8006660:	f8cd a000 	str.w	sl, [sp]
 8006664:	464b      	mov	r3, r9
 8006666:	aa03      	add	r2, sp, #12
 8006668:	4621      	mov	r1, r4
 800666a:	4640      	mov	r0, r8
 800666c:	f7ff fee2 	bl	8006434 <_printf_common>
 8006670:	3001      	adds	r0, #1
 8006672:	d14c      	bne.n	800670e <_printf_i+0x1fe>
 8006674:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006678:	b004      	add	sp, #16
 800667a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800667e:	4835      	ldr	r0, [pc, #212]	; (8006754 <_printf_i+0x244>)
 8006680:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006684:	6829      	ldr	r1, [r5, #0]
 8006686:	6823      	ldr	r3, [r4, #0]
 8006688:	f851 6b04 	ldr.w	r6, [r1], #4
 800668c:	6029      	str	r1, [r5, #0]
 800668e:	061d      	lsls	r5, r3, #24
 8006690:	d514      	bpl.n	80066bc <_printf_i+0x1ac>
 8006692:	07df      	lsls	r7, r3, #31
 8006694:	bf44      	itt	mi
 8006696:	f043 0320 	orrmi.w	r3, r3, #32
 800669a:	6023      	strmi	r3, [r4, #0]
 800669c:	b91e      	cbnz	r6, 80066a6 <_printf_i+0x196>
 800669e:	6823      	ldr	r3, [r4, #0]
 80066a0:	f023 0320 	bic.w	r3, r3, #32
 80066a4:	6023      	str	r3, [r4, #0]
 80066a6:	2310      	movs	r3, #16
 80066a8:	e7b0      	b.n	800660c <_printf_i+0xfc>
 80066aa:	6823      	ldr	r3, [r4, #0]
 80066ac:	f043 0320 	orr.w	r3, r3, #32
 80066b0:	6023      	str	r3, [r4, #0]
 80066b2:	2378      	movs	r3, #120	; 0x78
 80066b4:	4828      	ldr	r0, [pc, #160]	; (8006758 <_printf_i+0x248>)
 80066b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80066ba:	e7e3      	b.n	8006684 <_printf_i+0x174>
 80066bc:	0659      	lsls	r1, r3, #25
 80066be:	bf48      	it	mi
 80066c0:	b2b6      	uxthmi	r6, r6
 80066c2:	e7e6      	b.n	8006692 <_printf_i+0x182>
 80066c4:	4615      	mov	r5, r2
 80066c6:	e7bb      	b.n	8006640 <_printf_i+0x130>
 80066c8:	682b      	ldr	r3, [r5, #0]
 80066ca:	6826      	ldr	r6, [r4, #0]
 80066cc:	6961      	ldr	r1, [r4, #20]
 80066ce:	1d18      	adds	r0, r3, #4
 80066d0:	6028      	str	r0, [r5, #0]
 80066d2:	0635      	lsls	r5, r6, #24
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	d501      	bpl.n	80066dc <_printf_i+0x1cc>
 80066d8:	6019      	str	r1, [r3, #0]
 80066da:	e002      	b.n	80066e2 <_printf_i+0x1d2>
 80066dc:	0670      	lsls	r0, r6, #25
 80066de:	d5fb      	bpl.n	80066d8 <_printf_i+0x1c8>
 80066e0:	8019      	strh	r1, [r3, #0]
 80066e2:	2300      	movs	r3, #0
 80066e4:	6123      	str	r3, [r4, #16]
 80066e6:	4615      	mov	r5, r2
 80066e8:	e7ba      	b.n	8006660 <_printf_i+0x150>
 80066ea:	682b      	ldr	r3, [r5, #0]
 80066ec:	1d1a      	adds	r2, r3, #4
 80066ee:	602a      	str	r2, [r5, #0]
 80066f0:	681d      	ldr	r5, [r3, #0]
 80066f2:	6862      	ldr	r2, [r4, #4]
 80066f4:	2100      	movs	r1, #0
 80066f6:	4628      	mov	r0, r5
 80066f8:	f7f9 fd6a 	bl	80001d0 <memchr>
 80066fc:	b108      	cbz	r0, 8006702 <_printf_i+0x1f2>
 80066fe:	1b40      	subs	r0, r0, r5
 8006700:	6060      	str	r0, [r4, #4]
 8006702:	6863      	ldr	r3, [r4, #4]
 8006704:	6123      	str	r3, [r4, #16]
 8006706:	2300      	movs	r3, #0
 8006708:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800670c:	e7a8      	b.n	8006660 <_printf_i+0x150>
 800670e:	6923      	ldr	r3, [r4, #16]
 8006710:	462a      	mov	r2, r5
 8006712:	4649      	mov	r1, r9
 8006714:	4640      	mov	r0, r8
 8006716:	47d0      	blx	sl
 8006718:	3001      	adds	r0, #1
 800671a:	d0ab      	beq.n	8006674 <_printf_i+0x164>
 800671c:	6823      	ldr	r3, [r4, #0]
 800671e:	079b      	lsls	r3, r3, #30
 8006720:	d413      	bmi.n	800674a <_printf_i+0x23a>
 8006722:	68e0      	ldr	r0, [r4, #12]
 8006724:	9b03      	ldr	r3, [sp, #12]
 8006726:	4298      	cmp	r0, r3
 8006728:	bfb8      	it	lt
 800672a:	4618      	movlt	r0, r3
 800672c:	e7a4      	b.n	8006678 <_printf_i+0x168>
 800672e:	2301      	movs	r3, #1
 8006730:	4632      	mov	r2, r6
 8006732:	4649      	mov	r1, r9
 8006734:	4640      	mov	r0, r8
 8006736:	47d0      	blx	sl
 8006738:	3001      	adds	r0, #1
 800673a:	d09b      	beq.n	8006674 <_printf_i+0x164>
 800673c:	3501      	adds	r5, #1
 800673e:	68e3      	ldr	r3, [r4, #12]
 8006740:	9903      	ldr	r1, [sp, #12]
 8006742:	1a5b      	subs	r3, r3, r1
 8006744:	42ab      	cmp	r3, r5
 8006746:	dcf2      	bgt.n	800672e <_printf_i+0x21e>
 8006748:	e7eb      	b.n	8006722 <_printf_i+0x212>
 800674a:	2500      	movs	r5, #0
 800674c:	f104 0619 	add.w	r6, r4, #25
 8006750:	e7f5      	b.n	800673e <_printf_i+0x22e>
 8006752:	bf00      	nop
 8006754:	080075c9 	.word	0x080075c9
 8006758:	080075da 	.word	0x080075da

0800675c <memmove>:
 800675c:	4288      	cmp	r0, r1
 800675e:	b510      	push	{r4, lr}
 8006760:	eb01 0402 	add.w	r4, r1, r2
 8006764:	d902      	bls.n	800676c <memmove+0x10>
 8006766:	4284      	cmp	r4, r0
 8006768:	4623      	mov	r3, r4
 800676a:	d807      	bhi.n	800677c <memmove+0x20>
 800676c:	1e43      	subs	r3, r0, #1
 800676e:	42a1      	cmp	r1, r4
 8006770:	d008      	beq.n	8006784 <memmove+0x28>
 8006772:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006776:	f803 2f01 	strb.w	r2, [r3, #1]!
 800677a:	e7f8      	b.n	800676e <memmove+0x12>
 800677c:	4402      	add	r2, r0
 800677e:	4601      	mov	r1, r0
 8006780:	428a      	cmp	r2, r1
 8006782:	d100      	bne.n	8006786 <memmove+0x2a>
 8006784:	bd10      	pop	{r4, pc}
 8006786:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800678a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800678e:	e7f7      	b.n	8006780 <memmove+0x24>

08006790 <_free_r>:
 8006790:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006792:	2900      	cmp	r1, #0
 8006794:	d044      	beq.n	8006820 <_free_r+0x90>
 8006796:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800679a:	9001      	str	r0, [sp, #4]
 800679c:	2b00      	cmp	r3, #0
 800679e:	f1a1 0404 	sub.w	r4, r1, #4
 80067a2:	bfb8      	it	lt
 80067a4:	18e4      	addlt	r4, r4, r3
 80067a6:	f000 f913 	bl	80069d0 <__malloc_lock>
 80067aa:	4a1e      	ldr	r2, [pc, #120]	; (8006824 <_free_r+0x94>)
 80067ac:	9801      	ldr	r0, [sp, #4]
 80067ae:	6813      	ldr	r3, [r2, #0]
 80067b0:	b933      	cbnz	r3, 80067c0 <_free_r+0x30>
 80067b2:	6063      	str	r3, [r4, #4]
 80067b4:	6014      	str	r4, [r2, #0]
 80067b6:	b003      	add	sp, #12
 80067b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80067bc:	f000 b90e 	b.w	80069dc <__malloc_unlock>
 80067c0:	42a3      	cmp	r3, r4
 80067c2:	d908      	bls.n	80067d6 <_free_r+0x46>
 80067c4:	6825      	ldr	r5, [r4, #0]
 80067c6:	1961      	adds	r1, r4, r5
 80067c8:	428b      	cmp	r3, r1
 80067ca:	bf01      	itttt	eq
 80067cc:	6819      	ldreq	r1, [r3, #0]
 80067ce:	685b      	ldreq	r3, [r3, #4]
 80067d0:	1949      	addeq	r1, r1, r5
 80067d2:	6021      	streq	r1, [r4, #0]
 80067d4:	e7ed      	b.n	80067b2 <_free_r+0x22>
 80067d6:	461a      	mov	r2, r3
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	b10b      	cbz	r3, 80067e0 <_free_r+0x50>
 80067dc:	42a3      	cmp	r3, r4
 80067de:	d9fa      	bls.n	80067d6 <_free_r+0x46>
 80067e0:	6811      	ldr	r1, [r2, #0]
 80067e2:	1855      	adds	r5, r2, r1
 80067e4:	42a5      	cmp	r5, r4
 80067e6:	d10b      	bne.n	8006800 <_free_r+0x70>
 80067e8:	6824      	ldr	r4, [r4, #0]
 80067ea:	4421      	add	r1, r4
 80067ec:	1854      	adds	r4, r2, r1
 80067ee:	42a3      	cmp	r3, r4
 80067f0:	6011      	str	r1, [r2, #0]
 80067f2:	d1e0      	bne.n	80067b6 <_free_r+0x26>
 80067f4:	681c      	ldr	r4, [r3, #0]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	6053      	str	r3, [r2, #4]
 80067fa:	4421      	add	r1, r4
 80067fc:	6011      	str	r1, [r2, #0]
 80067fe:	e7da      	b.n	80067b6 <_free_r+0x26>
 8006800:	d902      	bls.n	8006808 <_free_r+0x78>
 8006802:	230c      	movs	r3, #12
 8006804:	6003      	str	r3, [r0, #0]
 8006806:	e7d6      	b.n	80067b6 <_free_r+0x26>
 8006808:	6825      	ldr	r5, [r4, #0]
 800680a:	1961      	adds	r1, r4, r5
 800680c:	428b      	cmp	r3, r1
 800680e:	bf04      	itt	eq
 8006810:	6819      	ldreq	r1, [r3, #0]
 8006812:	685b      	ldreq	r3, [r3, #4]
 8006814:	6063      	str	r3, [r4, #4]
 8006816:	bf04      	itt	eq
 8006818:	1949      	addeq	r1, r1, r5
 800681a:	6021      	streq	r1, [r4, #0]
 800681c:	6054      	str	r4, [r2, #4]
 800681e:	e7ca      	b.n	80067b6 <_free_r+0x26>
 8006820:	b003      	add	sp, #12
 8006822:	bd30      	pop	{r4, r5, pc}
 8006824:	200045cc 	.word	0x200045cc

08006828 <sbrk_aligned>:
 8006828:	b570      	push	{r4, r5, r6, lr}
 800682a:	4e0e      	ldr	r6, [pc, #56]	; (8006864 <sbrk_aligned+0x3c>)
 800682c:	460c      	mov	r4, r1
 800682e:	6831      	ldr	r1, [r6, #0]
 8006830:	4605      	mov	r5, r0
 8006832:	b911      	cbnz	r1, 800683a <sbrk_aligned+0x12>
 8006834:	f000 f8bc 	bl	80069b0 <_sbrk_r>
 8006838:	6030      	str	r0, [r6, #0]
 800683a:	4621      	mov	r1, r4
 800683c:	4628      	mov	r0, r5
 800683e:	f000 f8b7 	bl	80069b0 <_sbrk_r>
 8006842:	1c43      	adds	r3, r0, #1
 8006844:	d00a      	beq.n	800685c <sbrk_aligned+0x34>
 8006846:	1cc4      	adds	r4, r0, #3
 8006848:	f024 0403 	bic.w	r4, r4, #3
 800684c:	42a0      	cmp	r0, r4
 800684e:	d007      	beq.n	8006860 <sbrk_aligned+0x38>
 8006850:	1a21      	subs	r1, r4, r0
 8006852:	4628      	mov	r0, r5
 8006854:	f000 f8ac 	bl	80069b0 <_sbrk_r>
 8006858:	3001      	adds	r0, #1
 800685a:	d101      	bne.n	8006860 <sbrk_aligned+0x38>
 800685c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006860:	4620      	mov	r0, r4
 8006862:	bd70      	pop	{r4, r5, r6, pc}
 8006864:	200045d0 	.word	0x200045d0

08006868 <_malloc_r>:
 8006868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800686c:	1ccd      	adds	r5, r1, #3
 800686e:	f025 0503 	bic.w	r5, r5, #3
 8006872:	3508      	adds	r5, #8
 8006874:	2d0c      	cmp	r5, #12
 8006876:	bf38      	it	cc
 8006878:	250c      	movcc	r5, #12
 800687a:	2d00      	cmp	r5, #0
 800687c:	4607      	mov	r7, r0
 800687e:	db01      	blt.n	8006884 <_malloc_r+0x1c>
 8006880:	42a9      	cmp	r1, r5
 8006882:	d905      	bls.n	8006890 <_malloc_r+0x28>
 8006884:	230c      	movs	r3, #12
 8006886:	603b      	str	r3, [r7, #0]
 8006888:	2600      	movs	r6, #0
 800688a:	4630      	mov	r0, r6
 800688c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006890:	4e2e      	ldr	r6, [pc, #184]	; (800694c <_malloc_r+0xe4>)
 8006892:	f000 f89d 	bl	80069d0 <__malloc_lock>
 8006896:	6833      	ldr	r3, [r6, #0]
 8006898:	461c      	mov	r4, r3
 800689a:	bb34      	cbnz	r4, 80068ea <_malloc_r+0x82>
 800689c:	4629      	mov	r1, r5
 800689e:	4638      	mov	r0, r7
 80068a0:	f7ff ffc2 	bl	8006828 <sbrk_aligned>
 80068a4:	1c43      	adds	r3, r0, #1
 80068a6:	4604      	mov	r4, r0
 80068a8:	d14d      	bne.n	8006946 <_malloc_r+0xde>
 80068aa:	6834      	ldr	r4, [r6, #0]
 80068ac:	4626      	mov	r6, r4
 80068ae:	2e00      	cmp	r6, #0
 80068b0:	d140      	bne.n	8006934 <_malloc_r+0xcc>
 80068b2:	6823      	ldr	r3, [r4, #0]
 80068b4:	4631      	mov	r1, r6
 80068b6:	4638      	mov	r0, r7
 80068b8:	eb04 0803 	add.w	r8, r4, r3
 80068bc:	f000 f878 	bl	80069b0 <_sbrk_r>
 80068c0:	4580      	cmp	r8, r0
 80068c2:	d13a      	bne.n	800693a <_malloc_r+0xd2>
 80068c4:	6821      	ldr	r1, [r4, #0]
 80068c6:	3503      	adds	r5, #3
 80068c8:	1a6d      	subs	r5, r5, r1
 80068ca:	f025 0503 	bic.w	r5, r5, #3
 80068ce:	3508      	adds	r5, #8
 80068d0:	2d0c      	cmp	r5, #12
 80068d2:	bf38      	it	cc
 80068d4:	250c      	movcc	r5, #12
 80068d6:	4629      	mov	r1, r5
 80068d8:	4638      	mov	r0, r7
 80068da:	f7ff ffa5 	bl	8006828 <sbrk_aligned>
 80068de:	3001      	adds	r0, #1
 80068e0:	d02b      	beq.n	800693a <_malloc_r+0xd2>
 80068e2:	6823      	ldr	r3, [r4, #0]
 80068e4:	442b      	add	r3, r5
 80068e6:	6023      	str	r3, [r4, #0]
 80068e8:	e00e      	b.n	8006908 <_malloc_r+0xa0>
 80068ea:	6822      	ldr	r2, [r4, #0]
 80068ec:	1b52      	subs	r2, r2, r5
 80068ee:	d41e      	bmi.n	800692e <_malloc_r+0xc6>
 80068f0:	2a0b      	cmp	r2, #11
 80068f2:	d916      	bls.n	8006922 <_malloc_r+0xba>
 80068f4:	1961      	adds	r1, r4, r5
 80068f6:	42a3      	cmp	r3, r4
 80068f8:	6025      	str	r5, [r4, #0]
 80068fa:	bf18      	it	ne
 80068fc:	6059      	strne	r1, [r3, #4]
 80068fe:	6863      	ldr	r3, [r4, #4]
 8006900:	bf08      	it	eq
 8006902:	6031      	streq	r1, [r6, #0]
 8006904:	5162      	str	r2, [r4, r5]
 8006906:	604b      	str	r3, [r1, #4]
 8006908:	4638      	mov	r0, r7
 800690a:	f104 060b 	add.w	r6, r4, #11
 800690e:	f000 f865 	bl	80069dc <__malloc_unlock>
 8006912:	f026 0607 	bic.w	r6, r6, #7
 8006916:	1d23      	adds	r3, r4, #4
 8006918:	1af2      	subs	r2, r6, r3
 800691a:	d0b6      	beq.n	800688a <_malloc_r+0x22>
 800691c:	1b9b      	subs	r3, r3, r6
 800691e:	50a3      	str	r3, [r4, r2]
 8006920:	e7b3      	b.n	800688a <_malloc_r+0x22>
 8006922:	6862      	ldr	r2, [r4, #4]
 8006924:	42a3      	cmp	r3, r4
 8006926:	bf0c      	ite	eq
 8006928:	6032      	streq	r2, [r6, #0]
 800692a:	605a      	strne	r2, [r3, #4]
 800692c:	e7ec      	b.n	8006908 <_malloc_r+0xa0>
 800692e:	4623      	mov	r3, r4
 8006930:	6864      	ldr	r4, [r4, #4]
 8006932:	e7b2      	b.n	800689a <_malloc_r+0x32>
 8006934:	4634      	mov	r4, r6
 8006936:	6876      	ldr	r6, [r6, #4]
 8006938:	e7b9      	b.n	80068ae <_malloc_r+0x46>
 800693a:	230c      	movs	r3, #12
 800693c:	603b      	str	r3, [r7, #0]
 800693e:	4638      	mov	r0, r7
 8006940:	f000 f84c 	bl	80069dc <__malloc_unlock>
 8006944:	e7a1      	b.n	800688a <_malloc_r+0x22>
 8006946:	6025      	str	r5, [r4, #0]
 8006948:	e7de      	b.n	8006908 <_malloc_r+0xa0>
 800694a:	bf00      	nop
 800694c:	200045cc 	.word	0x200045cc

08006950 <_realloc_r>:
 8006950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006954:	4680      	mov	r8, r0
 8006956:	4614      	mov	r4, r2
 8006958:	460e      	mov	r6, r1
 800695a:	b921      	cbnz	r1, 8006966 <_realloc_r+0x16>
 800695c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006960:	4611      	mov	r1, r2
 8006962:	f7ff bf81 	b.w	8006868 <_malloc_r>
 8006966:	b92a      	cbnz	r2, 8006974 <_realloc_r+0x24>
 8006968:	f7ff ff12 	bl	8006790 <_free_r>
 800696c:	4625      	mov	r5, r4
 800696e:	4628      	mov	r0, r5
 8006970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006974:	f000 f838 	bl	80069e8 <_malloc_usable_size_r>
 8006978:	4284      	cmp	r4, r0
 800697a:	4607      	mov	r7, r0
 800697c:	d802      	bhi.n	8006984 <_realloc_r+0x34>
 800697e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006982:	d812      	bhi.n	80069aa <_realloc_r+0x5a>
 8006984:	4621      	mov	r1, r4
 8006986:	4640      	mov	r0, r8
 8006988:	f7ff ff6e 	bl	8006868 <_malloc_r>
 800698c:	4605      	mov	r5, r0
 800698e:	2800      	cmp	r0, #0
 8006990:	d0ed      	beq.n	800696e <_realloc_r+0x1e>
 8006992:	42bc      	cmp	r4, r7
 8006994:	4622      	mov	r2, r4
 8006996:	4631      	mov	r1, r6
 8006998:	bf28      	it	cs
 800699a:	463a      	movcs	r2, r7
 800699c:	f7ff fbb8 	bl	8006110 <memcpy>
 80069a0:	4631      	mov	r1, r6
 80069a2:	4640      	mov	r0, r8
 80069a4:	f7ff fef4 	bl	8006790 <_free_r>
 80069a8:	e7e1      	b.n	800696e <_realloc_r+0x1e>
 80069aa:	4635      	mov	r5, r6
 80069ac:	e7df      	b.n	800696e <_realloc_r+0x1e>
	...

080069b0 <_sbrk_r>:
 80069b0:	b538      	push	{r3, r4, r5, lr}
 80069b2:	4d06      	ldr	r5, [pc, #24]	; (80069cc <_sbrk_r+0x1c>)
 80069b4:	2300      	movs	r3, #0
 80069b6:	4604      	mov	r4, r0
 80069b8:	4608      	mov	r0, r1
 80069ba:	602b      	str	r3, [r5, #0]
 80069bc:	f7fa ff90 	bl	80018e0 <_sbrk>
 80069c0:	1c43      	adds	r3, r0, #1
 80069c2:	d102      	bne.n	80069ca <_sbrk_r+0x1a>
 80069c4:	682b      	ldr	r3, [r5, #0]
 80069c6:	b103      	cbz	r3, 80069ca <_sbrk_r+0x1a>
 80069c8:	6023      	str	r3, [r4, #0]
 80069ca:	bd38      	pop	{r3, r4, r5, pc}
 80069cc:	200045d4 	.word	0x200045d4

080069d0 <__malloc_lock>:
 80069d0:	4801      	ldr	r0, [pc, #4]	; (80069d8 <__malloc_lock+0x8>)
 80069d2:	f000 b811 	b.w	80069f8 <__retarget_lock_acquire_recursive>
 80069d6:	bf00      	nop
 80069d8:	200045d8 	.word	0x200045d8

080069dc <__malloc_unlock>:
 80069dc:	4801      	ldr	r0, [pc, #4]	; (80069e4 <__malloc_unlock+0x8>)
 80069de:	f000 b80c 	b.w	80069fa <__retarget_lock_release_recursive>
 80069e2:	bf00      	nop
 80069e4:	200045d8 	.word	0x200045d8

080069e8 <_malloc_usable_size_r>:
 80069e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069ec:	1f18      	subs	r0, r3, #4
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	bfbc      	itt	lt
 80069f2:	580b      	ldrlt	r3, [r1, r0]
 80069f4:	18c0      	addlt	r0, r0, r3
 80069f6:	4770      	bx	lr

080069f8 <__retarget_lock_acquire_recursive>:
 80069f8:	4770      	bx	lr

080069fa <__retarget_lock_release_recursive>:
 80069fa:	4770      	bx	lr

080069fc <_init>:
 80069fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069fe:	bf00      	nop
 8006a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a02:	bc08      	pop	{r3}
 8006a04:	469e      	mov	lr, r3
 8006a06:	4770      	bx	lr

08006a08 <_fini>:
 8006a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a0a:	bf00      	nop
 8006a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a0e:	bc08      	pop	{r3}
 8006a10:	469e      	mov	lr, r3
 8006a12:	4770      	bx	lr
